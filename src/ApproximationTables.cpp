#include "ApproximationTables.h"

namespace Halide {
namespace Internal {

namespace {

using OO = ApproximationPrecision::OptimizationObjective;

// clang-format off
// Generate this table with:
//   python3 tools/polynomial_optimizer.py atan --order 1 2 3 4 5 6 7 8 --loss mae mulpe mulpe_mae --format table
//
// Note that the maximal errors are computed with numpy with double precision.
// The real errors are a bit larger with single-precision floats (see correctness/fast_arctan.cpp).
// Also note that ULP distances which are not units are bogus, but this is because this error
// was again measured with double precision, so the actual reconstruction had more bits of
// precision than the actual float32 target value. So in practice the MaxULP Error
// will be close to round(MaxUlpE).
const std::vector<Approximation> table_atan = {
    {OO::MAE, {1.098429e-03, 4.797959e-02, 2.775e+06}, {1.098429e-03, 4.797963e-02, 2.775e+06}, {+8.333777921885e-01}},
    {OO::MAE, {1.210266e-05, 4.961312e-03, 4.540e+05}, {1.210264e-05, 4.961346e-03, 4.540e+05}, {+9.724036821636e-01, -1.919668648518e-01}},
    {OO::MAE, {1.840213e-07, 6.095767e-04, 7.598e+04}, {1.840208e-07, 6.095795e-04, 7.598e+04}, {+9.953591343546e-01, -2.886967022534e-01, +7.934531076059e-02}},
    {OO::MAE, {3.298087e-09, 8.147955e-05, 1.280e+04}, {3.298077e-09, 8.148347e-05, 1.280e+04}, {+9.992139794471e-01, -3.211767216551e-01, +1.462686496593e-01, -3.898922752401e-02}},
    {OO::MAE, {6.523399e-11, 1.150370e-05, 2.162e+03}, {6.525429e-11, 1.145213e-05, 2.162e+03}, {+9.998663549359e-01, -3.303052185023e-01, +1.801611375044e-01, -8.515912986440e-02, +2.084647145573e-02}},
    {OO::MAE, {1.385794e-12, 1.728535e-06, 3.670e+02}, {1.379185e-12, 1.664052e-06, 3.677e+02}, {+9.999772231443e-01, -3.326229291846e-01, +1.935410408419e-01, -1.164281956425e-01, +5.264923498477e-02, -1.171987479879e-02}},
    {OO::MAE, {3.206118e-14, 2.980232e-07, 6.200e+01}, {3.055802e-14, 2.476055e-07, 6.263e+01}, {+9.999961122155e-01, -3.331737033676e-01, +1.980783678452e-01, -1.323342388340e-01, +7.962516974840e-02, -3.360551443675e-02, +6.812217832171e-03}},
    {OO::MAE, {1.424782e-15, 1.192093e-07, 1.100e+01}, {7.014615e-16, 3.750918e-08, 1.067e+01}, {+9.999993356894e-01, -3.332986128382e-01, +1.994657187311e-01, -1.390866273733e-01, +9.642286330577e-02, -5.591358543955e-02, +2.186385364742e-02, -4.054819829411e-03}},

    {OO::MULPE, {1.348952e-03, 1.063762e-01, 1.795e+06}, {1.348952e-03, 1.063763e-01, 1.795e+06}, {+8.917744282438e-01}},
    {OO::MULPE, {2.087210e-05, 1.066434e-02, 1.803e+05}, {2.087206e-05, 1.066435e-02, 1.803e+05}, {+9.889746119749e-01, -2.142408011623e-01}},
    {OO::MULPE, {3.540498e-07, 1.308024e-03, 2.210e+04}, {3.540566e-07, 1.308037e-03, 2.210e+04}, {+9.986340713702e-01, -3.028616668393e-01, +9.093379579497e-02}},
    {OO::MULPE, {6.434177e-09, 1.540780e-04, 2.607e+03}, {6.434131e-09, 1.540729e-04, 2.607e+03}, {+9.998380723090e-01, -3.262397728895e-01, +1.562287265464e-01, -4.458293543618e-02}},
    {OO::MULPE, {1.301531e-10, 2.515316e-05, 4.250e+02}, {1.301756e-10, 2.515281e-05, 4.259e+02}, {+9.999734631755e-01, -3.318124731458e-01, +1.858397172235e-01, -9.293577407250e-02, +2.435838302609e-02}},
    {OO::MULPE, {3.008860e-12, 3.576279e-06, 6.100e+01}, {2.990006e-12, 3.512953e-06, 5.945e+01}, {+9.999962757882e-01, -3.330341285079e-01, +1.959461169715e-01, -1.220368575619e-01, +5.830786218979e-02, -1.378461843523e-02}},
    {OO::MULPE, {6.419028e-14, 5.960464e-07, 1.000e+01}, {6.323790e-14, 4.856691e-07, 8.220e+00}, {+9.999994806663e-01, -3.332729072503e-01, +1.988914150288e-01, -1.351395106061e-01, +8.429392572998e-02, -3.732319152221e-02, +7.949437020175e-03}},
    {OO::MULPE, {1.870140e-15, 1.788139e-07, 3.000e+00}, {1.362648e-15, 7.550800e-08, 1.277e+00}, {+9.999999185625e-01, -3.333207160237e-01, +1.997072487087e-01, -1.402508150744e-01, +9.929408195773e-02, -5.969365583959e-02, +2.439211657512e-02, -4.730090970801e-03}},
};

const std::vector<Approximation> table_sin = {
    {OO::MULPE, {1.100293e-03, 6.520343e-02, 1.093e+06}, {1.100293e-03, 6.520344e-02, 1.093e+06}, {-2.049090779222e-01}},
    {OO::MULPE, {4.201539e-06, 3.946841e-03, 6.591e+04}, {4.201541e-06, 3.946836e-03, 6.591e+04}, {-2.339378399822e-02, -1.333978458043e-01}},
    {OO::MULPE, {4.939363e-08, 3.755689e-04, 6.269e+03}, {4.939333e-08, 3.755793e-04, 6.269e+03}, {+5.209218351529e-03, -1.872864979765e-01, +2.330082059686e-02}},
    {OO::MULPE, {1.195596e-10, 2.074242e-05, 3.450e+02}, {1.195652e-10, 2.070269e-05, 3.440e+02}, {+3.728118020837e-04, -1.687397656516e-01, +3.437816301870e-03, +6.417764631434e-03}},
    {OO::MULPE, {5.434038e-13, 1.370907e-06, 2.300e+01}, {5.434352e-13, 1.281310e-06, 2.122e+01}, {-3.916351740996e-05, -1.663017765787e-01, -1.083026910703e-03, +9.740280622708e-03, -8.456053276716e-04}},
    {OO::MULPE, {1.618098e-15, 1.192093e-07, 2.000e+00}, {9.362990e-16, 5.356664e-08, 8.819e-01}, {-2.029346692794e-06, -1.666423214554e-01, -9.536979207612e-05, +8.500285780257e-03, -1.401268539152e-04, -1.494014170091e-04}},
    {OO::MULPE, {7.824485e-16, 1.192093e-07, 2.000e+00}, {2.336929e-18, 2.751526e-09, 4.510e-02}, {+1.501590026169e-07, -1.666690928809e-01, +1.329430666058e-05, +8.298652097707e-03, +4.869519226135e-05, -2.364067922093e-04, +1.569364186188e-05}},
    {OO::MULPE, {7.802349e-16, 1.192093e-07, 2.000e+00}, {2.605452e-21, 8.880585e-11, 1.444e-03}, {+5.832290039296e-09, -1.666667886894e-01, +8.409567246147e-07, +8.330579364383e-03, +4.910440412495e-06, -2.033952593659e-04, +2.786778663555e-06, +2.045463272315e-06}},

    {OO::MAE, {1.199297e-03, 5.328655e-02, 1.137e+06}, {1.199297e-03, 5.328660e-02, 1.137e+06}, {-2.097387903155e-01}},
    {OO::MAE, {3.935253e-06, 2.942681e-03, 9.540e+04}, {3.935253e-06, 2.942705e-03, 9.540e+04}, {-2.841003592936e-02, -1.299453225736e-01}},
    {OO::MAE, {2.540298e-08, 2.309680e-04, 1.317e+04}, {2.540325e-08, 2.310094e-04, 1.317e+04}, {+7.938826722938e-03, -1.917120897127e-01, +2.503571763244e-02}},
    {OO::MAE, {6.812509e-11, 1.192093e-05, 8.530e+02}, {6.813202e-11, 1.188429e-05, 8.525e+02}, {+7.348893738937e-04, -1.698247240768e-01, +4.441465629479e-03, +6.124196128073e-03}},
    {OO::MAE, {2.233472e-13, 7.748604e-07, 7.500e+01}, {2.229983e-13, 6.761020e-07, 7.410e+01}, {-9.087003990074e-05, -1.660638650116e-01, -1.455561863675e-03, +9.982716292311e-03, -9.018932407702e-04}},
    {OO::MAE, {1.194087e-15, 1.192093e-07, 5.000e+00}, {4.130477e-16, 2.902679e-08, 3.719e+00}, {-6.108220773307e-06, -1.666155830590e-01, -1.577491872157e-04, +8.567408377505e-03, -1.741377650055e-04, -1.428228858177e-04}},
    {OO::MAE, {6.719602e-16, 1.192093e-07, 2.000e+00}, {8.101407e-19, 1.282607e-09, 2.286e-01}, {+4.729474149063e-07, -1.666719893124e-01, +2.284853138903e-05, +8.283338302401e-03, +6.155196630818e-05, -2.418485530068e-04, +1.661055808592e-05}},
};

const std::vector<Approximation> table_cos = {
    {OO::MULPE, {2.276243e-02, 2.105137e-01, 9.253e+06}, {2.276243e-02, 2.105137e-01, 7.524e+06}, {-6.366197723676e-01}},
    {OO::MULPE, {3.089581e-04, 2.892184e-02, 1.801e+16}, {3.089582e-04, 2.892181e-02, 7.524e+06}, {-1.441029299649e-01, -3.135459600976e-01}},
    {OO::MULPE, {2.548081e-06, 2.953053e-03, 1.801e+16}, {2.548079e-06, 2.953041e-03, 1.250e+08}, {+3.312196310922e-02, -6.140462688034e-01, +1.194778943761e-01}},
    {OO::MULPE, {1.951141e-05, 8.284628e-03, 9.253e+06}, {1.951141e-05, 8.284583e-03, 4.281e+07}, {-8.189231085253e-02, -2.536163961169e-01, -2.169971999075e-01, +9.780506718341e-02}},
    {OO::MULPE, {1.023701e-04, 1.874673e-02, 1.801e+16}, {1.023701e-04, 1.874672e-02, 1.417e+08}, {-1.521173257187e-01, -1.510713887340e-01, -1.314705908234e-01, -7.304860881907e-02, +5.918318867431e-02}},
    {OO::MULPE, {1.959405e-04, 2.594370e-02, 9.253e+06}, {1.959405e-04, 2.594363e-02, 1.099e+08}, {-1.861278204619e-01, -1.321187357827e-01, -9.068886348048e-02, -5.179246306684e-02, -1.212181630912e-02, +2.670054106341e-02}},
    {OO::MULPE, {2.240950e-04, 2.810407e-02, 1.801e+16}, {2.240950e-04, 2.810404e-02, 4.108e+07}, {-1.928906035399e-01, -1.345634269685e-01, -8.787746073041e-02, -4.506737843695e-02, -6.966534587430e-03, +1.656240670919e-02, +2.873674706121e-03}},
    {OO::MAE, {1.085189e-02, 1.503933e-01, 2.273e+22}, {1.085189e-02, 1.503933e-01, 2.273e+22}, {-5.408764162503e-01}},
    {OO::MAE, {1.372145e-04, 1.658595e-02, 2.506e+21}, {1.372146e-04, 1.658584e-02, 2.506e+21}, {-9.822959326102e-02, -3.494718229535e-01}},
    {OO::MAE, {1.315431e-06, 1.625538e-03, 2.456e+20}, {1.315443e-06, 1.625393e-03, 2.456e+20}, {+2.205602220946e-02, -5.908545646377e-01, +1.087790826002e-01}},
    {OO::MAE, {7.230527e-09, 1.203567e-04, 1.818e+19}, {7.230485e-09, 1.203719e-04, 1.819e+19}, {+2.265707262238e-03, -5.130134759667e-01, +2.221242274882e-02, +2.895513833467e-02}},
    {OO::MAE, {3.125576e-11, 8.083880e-06, 1.189e+18}, {3.124630e-11, 7.914517e-06, 1.196e+18}, {-2.366329814800e-04, -4.977949179874e-01, -6.710986589723e-03, +5.068706361291e-02, -5.640067624549e-03}},
    {OO::MAE, {9.408471e-14, 5.662441e-07, 7.206e+16}, {9.272007e-14, 4.310370e-07, 6.514e+16}, {-1.648673357311e-05, -4.998029333879e-01, -7.773550394129e-04, +4.304811209739e-02, -1.181406087206e-03, -9.672193414881e-04}},
    {OO::MAE, {1.866926e-15, 2.188608e-07, 1.801e+16}, {2.251632e-16, 2.124113e-08, 3.210e+15}, {+1.118560325307e-06, -5.000185284233e-01, +1.040242117099e-04, +4.138867602757e-02, +4.000857961978e-04, -1.709292005705e-03, +1.362367213477e-04}},
};

const std::vector<Approximation> table_tan = {
    {OO::MAE, {1.640665e-03, 2.146018e-01, 3.599e+06}, {1.640665e-03, 2.146018e-01, 3.599e+06}, {}},
    {OO::MAE, {6.374138e-06, 8.047462e-03, 2.061e+05}, {6.374134e-06, 8.047485e-03, 2.061e+05}, {+4.263484662030e-01}},
    {OO::MAE, {2.693489e-08, 4.668236e-04, 1.561e+04}, {2.693491e-08, 4.668653e-04, 1.561e+04}, {+3.165183759186e-01, +2.034160295095e-01}},
    {OO::MAE, {1.252944e-10, 3.004074e-05, 1.419e+03}, {1.252979e-10, 3.004007e-05, 1.418e+03}, {+3.357680513903e-01, +1.142710531210e-01, +9.629610370231e-02}},
    {OO::MAE, {6.090353e-13, 2.086163e-06, 1.270e+02}, {6.086800e-13, 2.016348e-06, 1.270e+02}, {+3.330252974321e-01, +1.371610371334e-01, +3.860001731201e-02, +4.530835106184e-02}},
    {OO::MAE, {3.227646e-15, 2.384186e-07, 1.000e+01}, {3.024020e-15, 1.382996e-07, 9.251e+00}, {+3.333689167114e-01, +1.326942025774e-01, +5.790873649254e-02, +1.119257919741e-02, +2.124572352724e-02}},
    {OO::MAE, {2.098896e-16, 1.192093e-07, 2.000e+00}, {1.521866e-17, 9.606112e-09, 6.651e-01}, {+3.333294838511e-01, +1.334274025985e-01, +5.315214886421e-02, +2.520186981760e-02, +2.052778499789e-03, +9.942571957455e-03}},
    {OO::MAE, {1.911248e-16, 1.192093e-07, 2.000e+00}, {7.720073e-20, 6.725871e-10, 6.013e-02}, {+3.333337296258e-01, +1.333207102116e-01, +5.411401746789e-02, +2.104584176521e-02, +1.137068809378e-02, -5.156394192922e-04, +4.647061343470e-03}},
    {OO::MAE, {1.953901e-16, 1.192093e-07, 2.000e+00}, {3.936538e-22, 4.734724e-11, 5.114e-03}, {+3.333332940905e-01, +1.333349113060e-01, +5.394492904191e-02, +2.204240167950e-02, +8.142891823917e-03, +5.336851705984e-03, -9.254086654847e-04, +2.170151051698e-03}},

    {OO::MULPE, {5.159290e-06, 1.103395e-02, 1.854e+05}, {5.159289e-06, 1.103401e-02, 1.854e+05}, {+4.201839882062e-01}},
    {OO::MULPE, {2.170889e-08, 7.248521e-04, 1.211e+04}, {2.170891e-08, 7.248743e-04, 1.211e+04}, {+3.197428832965e-01, +1.973253078134e-01}},
    {OO::MULPE, {1.348289e-10, 4.315376e-05, 7.350e+02}, {1.348307e-10, 4.313375e-05, 7.347e+02}, {+3.348595219454e-01, +1.180891605562e-01, +9.242309101434e-02}},
    {OO::MULPE, {5.249293e-13, 3.755093e-06, 6.300e+01}, {5.245885e-13, 3.667941e-06, 6.154e+01}, {+3.331570806230e-01, +1.359971067495e-01, +4.164380637066e-02, +4.285723811924e-02}},
    {OO::MULPE, {2.889157e-15, 2.980232e-07, 5.000e+00}, {2.665388e-15, 2.217360e-07, 3.720e+00}, {+3.333527971351e-01, +1.329080436773e-01, +5.698056422142e-02, +1.283061933440e-02, +2.022876099555e-02}},
    {OO::MULPE, {2.061869e-16, 1.192093e-07, 2.000e+00}, {1.306129e-17, 1.599526e-08, 3.017e-01}, {+3.333313624199e-01, +1.333938966167e-01, +5.336291228807e-02, +2.459317072063e-02, +2.877210610382e-03, +9.518051305408e-03}},
    {OO::MULPE, {1.943395e-16, 1.192093e-07, 2.000e+00}, {6.973325e-20, 1.113327e-09, 1.944e-02}, {+3.333334960206e-01, +1.333263410460e-01, +5.406416963375e-02, +2.125900184678e-02, +1.089632765911e-02, +1.344066651514e-05, +4.413312475957e-03}},

};

const std::vector<Approximation> table_expm1 = {
    {OO::MAE, {4.528305e-06, 3.017247e-03, 7.229e+05}, {4.528297e-06, 3.017278e-03, 7.229e+05}, {+9.540777804872e-01, +6.986456293130e-01}},
    {OO::MAE, {7.682157e-09, 1.242757e-04, 5.388e+04}, {7.682513e-09, 1.242120e-04, 5.388e+04}, {+1.003476082426e+00, +4.707538244825e-01, +2.346495265175e-01}},
    {OO::MAE, {8.689729e-12, 4.291534e-06, 2.821e+03}, {8.686324e-12, 4.175513e-06, 2.821e+03}, {+9.998143852183e-01, +5.025371047007e-01, +1.559966007238e-01, +5.883473590550e-02}},
    {OO::MAE, {7.715488e-15, 2.384186e-07, 1.120e+02}, {6.958417e-15, 1.181571e-07, 1.132e+02}, {+1.000007634619e+00, +4.998465967778e-01, +1.676630399584e-01, +3.887360056402e-02, +1.178285443998e-02}},
    {OO::MAE, {7.975938e-16, 1.192093e-07, 4.000e+00}, {4.142435e-18, 2.882449e-09, 3.673e+00}, {+9.999997450078e-01, +5.000070600280e-01, +1.666017367054e-01, +4.193976524445e-02, +7.759200702526e-03, +1.965152465148e-03}},
    {OO::MAE, {6.950561e-16, 1.192093e-07, 2.000e+00}, {1.901624e-21, 6.174972e-11, 9.973e-02}, {+1.000000007163e+00, +4.999997389022e-01, +1.666698813595e-01, +4.164795496705e-02, +8.391261860372e-03, +1.291462952971e-03, +2.808382464280e-04}},
    {OO::MAE, {1.002142e-15, 1.192093e-07, 2.000e+00}, {6.930708e-25, 1.178613e-12, 2.331e-03}, {+9.999999998265e-01, +5.000000080492e-01, +1.666665391523e-01, +4.166764195310e-02, +8.329219171555e-03, +1.398945417415e-03, +1.843178442063e-04, +3.511169669672e-05}},
    {OO::MAE, {6.969243e-16, 1.192093e-07, 2.000e+00}, {2.057985e-28, 2.065015e-14, 4.886e-05}, {+1.000000000004e+00, +4.999999997869e-01, +1.666666708803e-01, +4.166662585571e-02, +8.333556518133e-03, +1.388154090654e-03, +1.998944654500e-04, +2.302203910474e-05, +3.902108986233e-06}},

    {OO::MULPE, {2.515622e-05, 7.979155e-03, 6.688e+04}, {2.515623e-05, 7.979146e-03, 6.688e+04}, {+6.220663921554e-01}},
    {OO::MULPE, {2.798847e-08, 2.608299e-04, 2.185e+03}, {2.798855e-08, 2.609093e-04, 2.185e+03}, {+4.851354343802e-01, +2.207257873415e-01}},
    {OO::MULPE, {2.429739e-11, 7.629395e-06, 6.400e+01}, {2.428812e-11, 7.642552e-06, 6.394e+01}, {+5.011474243376e-01, +1.591453425300e-01, +5.661211928399e-02}},
    {OO::MULPE, {2.041378e-14, 3.576279e-07, 3.000e+00}, {1.689195e-14, 2.010388e-07, 1.680e+00}, {+4.999379508234e-01, +1.673045364769e-01, +3.944450578588e-02, +1.146363007420e-02}},
    {OO::MULPE, {3.596585e-15, 1.192093e-07, 1.000e+00}, {8.681018e-18, 4.622954e-09, 3.857e-02}, {+5.000027979250e-01, +1.666265919711e-01, +4.187404883990e-02, +7.839930184853e-03, +1.927684090112e-03}},
    {OO::MULPE, {3.563458e-15, 1.192093e-07, 1.000e+00}, {3.678312e-21, 8.945067e-11, 7.491e-04}, {+4.999999043172e-01, +1.666685240350e-01, +4.165326393899e-02, +8.380522643499e-03, +1.302313587217e-03, +2.765051450178e-04}},
    {OO::MULPE, {3.559877e-15, 1.192093e-07, 1.000e+00}, {1.265926e-24, 1.680878e-12, 1.410e-05}, {+5.000000028455e-01, +1.666665956230e-01, +4.166734057069e-02, +8.330099227474e-03, +1.397511229334e-03, +1.855425570009e-04, +3.468460539570e-05}},
    {OO::MULPE, {3.598376e-15, 1.192093e-07, 1.000e+00}, {3.505140e-28, 2.753353e-14, 2.310e-07}, {+4.999999999275e-01, +1.666666689361e-01, +4.166663936454e-02, +8.333503297949e-03, +1.388278350318e-03, +1.997241281281e-04, +2.314870705908e-05, +3.862673380142e-06}},
};

const std::vector<Approximation> table_exp = {

    {OO::MAE, {2.541256e-05, 7.843018e-03, 6.562e+04}, {2.541258e-05, 7.842941e-03, 6.562e+04}, {+6.223498867001e-01}},
    {OO::MAE, {2.822427e-08, 2.483130e-04, 2.079e+03}, {2.822512e-08, 2.483483e-04, 2.079e+03}, {+4.853163410439e-01, +2.205025122026e-01}},
    {OO::MAE, {2.476524e-11, 7.271767e-06, 6.100e+01}, {2.475303e-11, 7.224839e-06, 6.051e+01}, {+5.011302679738e-01, +1.591947347725e-01, +5.657837963864e-02}},
    {OO::MAE, {2.007422e-14, 3.576279e-07, 3.000e+00}, {1.673747e-14, 1.862743e-07, 1.561e+00}, {+4.999369066691e-01, +1.673104192758e-01, +3.943404912764e-02, +1.146969921166e-02}},
    {OO::MAE, {3.504141e-15, 1.192093e-07, 1.000e+00}, {8.824081e-18, 4.256409e-09, 3.567e-02}, {+5.000027412712e-01, +1.666270656926e-01, +4.187260905362e-02, +7.841805415562e-03, +1.926801683620e-03}},
    {OO::MAE, {3.490264e-15, 1.192093e-07, 1.000e+00}, {3.696417e-21, 8.685230e-11, 7.281e-04}, {+4.999999029477e-01, +1.666685437425e-01, +4.165316006701e-02, +8.380779979652e-03, +1.302010630328e-03, +2.766417313778e-04}},
    {OO::MAE, {3.497203e-15, 1.192093e-07, 1.000e+00}, {1.254134e-24, 1.596723e-12, 1.338e-05}, {+5.000000028912e-01, +1.666665947126e-01, +4.166734697143e-02, +8.330077545511e-03, +1.397549696317e-03, +1.855080537536e-04, +3.469697539741e-05}},

    {OO::MULPE, {2.534894e-05, 7.876754e-03, 6.569e+04}, {2.534892e-05, 7.876776e-03, 6.569e+04}, {+6.222794637228e-01}},
    {OO::MULPE, {2.812302e-08, 2.510548e-04, 2.080e+03}, {2.812340e-08, 2.510042e-04, 2.079e+03}, {+4.853324557138e-01, +2.204712884107e-01}},
    {OO::MULPE, {2.464515e-11, 7.390976e-06, 6.100e+01}, {2.463897e-11, 7.362430e-06, 6.045e+01}, {+5.011284571887e-01, +1.592029426165e-01, +5.656971107687e-02}},
    {OO::MULPE, {2.001871e-14, 3.576279e-07, 3.000e+00}, {1.664403e-14, 1.917460e-07, 1.558e+00}, {+4.999370391207e-01, +1.673093882463e-01, +3.943650192630e-02, +1.146787460297e-02}},
    {OO::MULPE, {3.531897e-15, 1.192093e-07, 1.000e+00}, {8.766359e-18, 4.433932e-09, 3.558e-02}, {+5.000027341639e-01, +1.666271487832e-01, +4.187227932863e-02, +7.842345341026e-03, +1.926488701034e-03}},
    {OO::MULPE, {3.476386e-15, 1.192093e-07, 1.000e+00}, {3.668730e-21, 9.172130e-11, 7.256e-04}, {+4.999999032470e-01, +1.666685388782e-01, +4.165318839546e-02, +8.380704038329e-03, +1.302106041753e-03, +2.765962183101e-04}},
    {OO::MULPE, {3.497203e-15, 1.192093e-07, 1.000e+00}, {1.243562e-24, 1.712408e-12, 1.333e-05}, {+5.000000028808e-01, +1.666665949343e-01, +4.166734520946e-02, +8.330084370908e-03, +1.397535839768e-03, +1.855222208987e-04, +3.469122002505e-05}},
};

const std::vector<Approximation> table_log = {
    {OO::MAE, {6.039341e-04, 5.664836e-02, 3.055e+06}, {6.039338e-04, 5.664835e-02, 3.055e+06}, {+9.241348814945e-01}},
    {OO::MAE, {7.881213e-06, 4.752398e-03, 4.314e+05}, {7.881191e-06, 4.752437e-03, 4.314e+05}, {+1.021621299694e+00, -4.403919155288e-01}},
    {OO::MAE, {9.896923e-08, 5.211532e-04, 7.352e+04}, {9.896824e-08, 5.211322e-04, 7.352e+04}, {+1.004022756409e+00, -5.136901956278e-01, +2.591752916980e-01}},
    {OO::MAE, {2.644694e-09, 7.894635e-05, 8.528e+03}, {2.644615e-09, 7.894714e-05, 8.526e+03}, {+9.998654671013e-01, -5.047998094532e-01, +3.441113116773e-01, -1.817679870862e-01}},
    {OO::MAE, {3.770277e-11, 9.149313e-06, 2.334e+03}, {3.770421e-11, 9.117364e-06, 2.334e+03}, {+9.998612360906e-01, -5.000937606045e-01, +3.403161405820e-01, -2.574482855195e-01, +1.317775312126e-01}},
    {OO::MAE, {1.005724e-12, 1.549721e-06, 2.670e+02}, {1.004323e-12, 1.511340e-06, 2.677e+02}, {+9.999906759786e-01, -4.998247182573e-01, +3.338519149306e-01, -2.572047114441e-01, +2.028946573619e-01, -1.006216684275e-01}},
    {OO::MAE, {2.147892e-14, 2.682209e-07, 5.100e+01}, {2.136047e-14, 2.190476e-07, 4.927e+01}, {+1.000002350298e+00, -4.999735649172e-01, +3.330719790109e-01, -2.509262023462e-01, +2.077808120808e-01, -1.668386797838e-01, +7.937758992445e-02}},
    {OO::MAE, {6.609521e-16, 8.940697e-08, 1.100e+01}, {4.352729e-16, 3.122212e-08, 1.024e+01}, {+1.000000596625e+00, -5.000031829201e-01, +3.332664821225e-01, -2.497141100827e-01, +2.015722089924e-01, -1.746315623781e-01, +1.395098951614e-01, -6.298585107024e-02}},

    {OO::MULPE, {8.897911e-04, 7.484427e-02, 2.517e+06}, {8.897910e-04, 7.484425e-02, 2.517e+06}, {+9.606187202200e-01}},
    {OO::MULPE, {7.248998e-06, 8.592486e-03, 2.892e+05}, {7.249020e-06, 8.592518e-03, 2.892e+05}, {+1.013511005187e+00, -4.395316481227e-01}},
    {OO::MULPE, {1.339595e-07, 1.093149e-03, 3.683e+04}, {1.339626e-07, 1.093141e-03, 3.683e+04}, {+1.001896219341e+00, -5.110798103699e-01, +2.670328819446e-01}},
    {OO::MULPE, {3.777146e-09, 1.402795e-04, 4.717e+03}, {3.777418e-09, 1.402689e-04, 4.718e+03}, {+9.999057104288e-01, -5.033330689777e-01, +3.437819919252e-01, -1.882791635116e-01}},
    {OO::MULPE, {6.839460e-11, 2.020597e-05, 6.840e+02}, {6.840038e-11, 2.020322e-05, 6.844e+02}, {+9.999592227826e-01, -5.000172243523e-01, +3.381722153635e-01, -2.567840722976e-01, +1.371989692472e-01}},
    {OO::MULPE, {1.445543e-12, 3.218651e-06, 1.090e+02}, {1.444882e-12, 3.207812e-06, 1.080e+02}, {+9.999976701400e-01, -4.998917836960e-01, +3.335938712712e-01, -2.558037906406e-01, +2.037032324729e-01, -1.050373742780e-01}},
    {OO::MULPE, {4.090354e-14, 5.066395e-07, 1.700e+01}, {4.037694e-14, 4.567539e-07, 1.540e+01}, {+1.000000790681e+00, -4.999903235096e-01, +3.331501600195e-01, -2.504942171869e-01, +2.065610843073e-01, -1.687791064061e-01, +8.409705376978e-02}},
    {OO::MULPE, {1.068516e-15, 1.192093e-07, 4.000e+00}, {8.500149e-16, 7.134804e-08, 2.412e+00}, {+1.000000125567e+00, -5.000018386416e-01, +3.332997067971e-01, -2.497808174615e-01, +2.010418497054e-01, -1.735431109011e-01, +1.412949850900e-01, -6.669884244006e-02}},
};

// clang-format on
}  // namespace

const Approximation *find_best_approximation(const std::vector<Approximation> &table,
                                             ApproximationPrecision precision, Type type,
                                             int num_omitted_terms_in_table = 0) {
#define DEBUG_APPROXIMATION_SEARCH 0
    const Approximation *best = nullptr;
    constexpr int term_cost = 20;
    constexpr int extra_term_cost = 200;
    double best_score = 0;
#if DEBUG_APPROXIMATION_SEARCH
    std::printf("Looking for min_terms=%d, max_absolute_error=%f\n",
                precision.constraint_min_poly_terms, precision.constraint_max_absolute_error);
#endif
    for (size_t i = 0; i < table.size(); ++i) {
        const Approximation &e = table[i];

        double penalty = 0.0;
        int obj_score = e.objective == precision.optimized_for ? 100 * term_cost : 0;

        int num_terms = int(e.coefficients.size() + num_omitted_terms_in_table);
        int term_count_score = (12 - num_terms) * term_cost;
        if (num_terms < precision.force_halide_polynomial) {
            penalty += (precision.force_halide_polynomial - num_terms) * extra_term_cost;
        }

        const Approximation::Metrics *metrics = nullptr;
        if (type == Float(32)) {
            metrics = &e.metrics_f32;
        } else if (type == Float(64)) {
            metrics = &e.metrics_f32;
        } else {
            internal_error << "Cannot find approximation for type " << type;
        }

        double precision_score = 0;
        // If we don't care about the maximum number of terms, we maximize precision.
        switch (precision.optimized_for) {
        case ApproximationPrecision::AUTO:
            internal_error << "Precision is not resolved (objective = AUTO).";
            break;
        case ApproximationPrecision::MAE:
            precision_score = -std::log(metrics->mae);
            break;
        case ApproximationPrecision::MULPE:
            precision_score = -std::log(metrics->mulpe);
            break;
        }

        if (precision.constraint_max_ulp_error != 0 &&
            precision.constraint_max_ulp_error < metrics->mulpe) {
            float error_ratio = float(metrics->mulpe) / precision.constraint_max_ulp_error;
            penalty += 20 * error_ratio * extra_term_cost;  // penalty for not getting the required precision.
        }

        if (precision.constraint_max_absolute_error > 0.0 &&
            precision.constraint_max_absolute_error < metrics->mae) {
            float error_ratio = metrics->mae / precision.constraint_max_absolute_error;
            penalty += 20 * error_ratio * extra_term_cost;  // penalty for not getting the required precision.
        }

        double score = obj_score + term_count_score + precision_score - penalty;
#if DEBUG_APPROXIMATION_SEARCH
        std::printf("Score for %zu (%d terms): %f = %d + %d + %f - penalty %f\n",
                    i, num_terms, score, obj_score, term_count_score,
                    precision_score, penalty);
#endif
        if (score > best_score || best == nullptr) {
            best = &e;
            best_score = score;
        }
    }
#if DEBUG_APPROXIMATION_SEARCH
    std::printf("Best score: %f\n", best_score);
#endif
    return best;
}

const Approximation *best_atan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_atan, precision, type);
}

const Approximation *best_sin_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_sin, precision, type, 1);
}

const Approximation *best_cos_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_cos, precision, type, 1);
}

const Approximation *best_tan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_tan, precision, type, 1);
}

const Approximation *best_exp_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_exp, precision, type, 2);
}

const Approximation *best_expm1_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_expm1, precision, type, 1);
}

const Approximation *best_log_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation(table_log, precision, type);
}

}  // namespace Internal
}  // namespace Halide
