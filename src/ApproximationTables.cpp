#include "ApproximationTables.h"

namespace Halide {
namespace Internal {

namespace {

using OO = ApproximationPrecision::OptimizationObjective;

// clang-format off
// Generate this table with:
//   python3 tools/polynomial_optimizer.py atan --order 1 2 3 4 5 6 7 8 --loss mulpe --formula
const std::vector<Approximation> table_atan = {
    { /* Polynomial degree 3: 0.989152711503 * x^1 + -0.214540976704 * x^3 */
      {2.110004e-05, 1.074219e-02, 2.400e+01},
      {2.104596e-05, 1.078647e-02, 1.819e+05},
      {2.104596e-05, 1.078643e-02, 9.764e+13},
         {0, +9.891527115034e-01, 0, -2.145409767037e-01}
    },
    { /* Polynomial degree 5: 0.998673679340 * x^1 + -0.303024325073 * x^3 + 0.091064165491 * x^5 */
      {4.172325e-07, 1.953125e-03, 4.000e+00},
      {3.587571e-07, 1.315355e-03, 2.222e+04},
      {3.587570e-07, 1.315356e-03, 1.193e+13},
         {0, +9.986736793399e-01, 0, -3.030243250734e-01, 0, +9.106416549109e-02}
    },
    { /* Polynomial degree 7: 0.999843238125 * x^1 + -0.326280891726 * x^3 + 0.156309320342 * x^5 + -0.044628150709 * x^7 */
      {5.960464e-08, 4.882812e-04, 2.000e+00},
      {6.491497e-09, 1.546741e-04, 2.624e+03},
      {6.491491e-09, 1.546474e-04, 1.409e+12},
         {0, +9.998432381246e-01, 0, -3.262808917256e-01, 0, +1.563093203417e-01, 0, -4.462815070926e-02}
    },
    { /* Polynomial degree 9: 0.999974266216 * x^1 + -0.331827712648 * x^3 + 0.185904504611 * x^5 + -0.093030129237 * x^7 + 0.024402588844 * x^9 */
      {0.000000e+00, 4.882812e-04, 1.000e+00},
      {1.320254e-10, 2.539158e-05, 4.310e+02},
      {1.320258e-10, 2.535439e-05, 2.312e+11},
         {0, +9.999742662159e-01, 0, -3.318277126482e-01, 0, +1.859045046114e-01, 0, -9.303012923653e-02, 0, +2.440258884386e-02}
    },
    { /* Polynomial degree 11: 0.999996414066 * x^1 + -0.333037199392 * x^3 + 0.195964332346 * x^5 + -0.122079738810 * x^7 + 0.058351422847 * x^9 + -0.013800595929 * x^11 */
      {0.000000e+00, 4.882812e-04, 1.000e+00},
      {3.017319e-12, 3.576279e-06, 6.100e+01},
      {3.017097e-12, 3.528269e-06, 3.221e+10},
         {0, +9.999964140662e-01, 0, -3.330371993915e-01, 0, +1.959643323456e-01, 0, -1.220797388097e-01, 0, +5.835142284692e-02, 0, -1.380059592946e-02}
    },
    { /* Polynomial degree 13: 0.999999502689 * x^1 + -0.333273515157 * x^3 + 0.198896413252 * x^5 + -0.135157535046 * x^7 + 0.084325420779 * x^9 + -0.037349378653 * x^11 + 0.007957743664 * x^13 */
      {0.000000e+00, 4.882812e-04, 1.000e+00},
      {6.399394e-14, 5.364418e-07, 9.000e+00},
      {6.355124e-14, 4.881316e-07, 4.466e+09},
         {0, +9.999995026893e-01, 0, -3.332735151572e-01, 0, +1.988964132523e-01, 0, -1.351575350457e-01, 0, +8.432542077879e-02, 0, -3.734937865278e-02, 0, +7.957743664400e-03}
    },
    { /* Polynomial degree 15: 0.999999922622 * x^1 + -0.333320864381 * x^3 + 0.199708846732 * x^5 + -0.140258459654 * x^7 + 0.099312857394 * x^9 + -0.059718315790 * x^11 + 0.024408586977 * x^13 + -0.004734486277 * x^15 */
      {0.000000e+00, 4.882812e-04, 1.000e+00},
      {1.774935e-15, 1.192093e-07, 3.000e+00},
      {1.371986e-15, 7.577352e-08, 6.949e+08},
         {0, +9.999999226221e-01, 0, -3.333208643812e-01, 0, +1.997088467321e-01, 0, -1.402584596538e-01, 0, +9.931285739445e-02, 0, -5.971831579034e-02, 0, +2.440858697735e-02, 0, -4.734486276706e-03}
    },
};

const std::vector<Approximation> table_sin = {
  { /* Polynomial degree 3: x^1 + -0.023393783998 * x^2 + -0.133397845804 * x^3 */
    /* f16 */ {4.231930e-06, 4.394531e-03, 9.000e+00},
    /* f32 */ {4.201336e-06, 3.946841e-03, 6.596e+04},
    /* f64 */ {4.201336e-06, 3.946836e-03, 3.555e+13},
    /* p */ {0, 1, -0x1.7f48a44cee11ap-6, -0x1.1132e3c8b0f3ep-3}
  },
  { /* Polynomial degree 4: x^1 + 0.005209218352 * x^2 + -0.187286497976 * x^3 + 0.023300820597 * x^4 */
    /* f16 */ {1.192093e-07, 9.765625e-04, 2.000e+00},
    /* f32 */ {4.939219e-08, 3.755689e-04, 6.270e+03},
    /* f64 */ {4.939212e-08, 3.755793e-04, 3.382e+12},
    /* p */ {0, 1, 0x1.55642e7521786p-8, -0x1.7f90103e54a0ep-3, 0x1.7dc2b99bbdfe8p-6}
  },
  { /* Polynomial degree 5: x^1 + 0.000372811802 * x^2 + -0.168739765652 * x^3 + 0.003437816302 * x^4 + 0.006417764631 * x^5 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {1.195595e-10, 2.074242e-05, 3.450e+02},
    /* f64 */ {1.195597e-10, 2.070269e-05, 1.864e+11},
    /* p */ {0, 1, 0x1.86ebe7f5cc6bcp-12, -0x1.59943bf810e2cp-3, 0x1.c299f92c20b20p-9, 0x1.a498393497600p-8}
  },
  { /* Polynomial degree 6: x^1 + -0.000039163517 * x^2 + -0.166301776579 * x^3 + -0.001083026911 * x^4 + 0.009740280623 * x^5 + -0.000845605328 * x^6 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {5.441571e-13, 1.311302e-06, 2.200e+01},
    /* f64 */ {5.434192e-13, 1.281310e-06, 1.154e+10},
    /* p */ {0, 1, -0x1.4887036395363p-15, -0x1.5496069d60ad6p-3, -0x1.1be8b4a60afe0p-10, 0x1.3f2b655d3ba00p-7, -0x1.bb5739d244600p-11}
  },
  { /* Polynomial degree 7: x^1 + -0.000002029347 * x^2 + -0.166642321455 * x^3 + -0.000095369792 * x^4 + 0.008500285780 * x^5 + -0.000140126854 * x^6 + -0.000149401417 * x^7 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {1.555547e-15, 1.192093e-07, 2.000e+00},
    /* f64 */ {9.362702e-16, 5.356663e-08, 4.822e+08},
    /* p */ {0, 1, -0x1.105fd24b46299p-19, -0x1.554891c63e3c0p-3, -0x1.900288d74e000p-14, 0x1.168990b76d130p-7, -0x1.25de082873c00p-13, -0x1.3951466685200p-13}
  },
  { /* Polynomial degree 8: x^1 + 0.000000150159 * x^2 + -0.166669092881 * x^3 + 0.000013294307 * x^4 + 0.008298652098 * x^5 + 0.000048695192 * x^6 + -0.000236406792 * x^7 + 0.000015693642 * x^8 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {5.794063e-16, 5.960464e-08, 2.000e+00},
    /* f64 */ {2.336845e-18, 2.751528e-09, 2.476e+07},
    /* p */ {0, 1, 0x1.4276c96bf8f14p-23, -0x1.55569af96bbcdp-3, 0x1.be1539a7b9000p-17, 0x1.0fee23ae17c90p-7, 0x1.987c211992800p-15, -0x1.efc7ee1ea8400p-13, 0x1.074badb742000p-16}
  },
  { /* Polynomial degree 9: x^1 + 0.000000005832 * x^2 + -0.166666788689 * x^3 + 0.000000840955 * x^4 + 0.008330579368 * x^5 + 0.000004910436 * x^6 + -0.000203395256 * x^7 + 0.000002786777 * x^8 + 0.000002045464 * x^9 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {5.775984e-16, 5.960464e-08, 1.000e+00},
    /* f64 */ {2.605378e-21, 8.879963e-11, 7.990e+05},
    /* p */ {0, 1, 0x1.90ca9be56f412p-28, -0x1.555565b5fe4e2p-3, 0x1.c37c063a58000p-21, 0x1.10f9f6f88e83ap-7, 0x1.4988a416be000p-18, -0x1.aa8cff160bf00p-13, 0x1.7608efb940000p-19, 0x1.1289973ab8000p-19}
  },
  { /* Polynomial degree 10: x^1 + -0.000000000302 * x^2 + -0.166666658765 * x^3 + -0.000000070522 * x^4 + 0.008333639269 * x^5 + -0.000000748758 * x^6 + -0.000197304334 * x^7 + -0.000001016032 * x^8 + 0.000003322862 * x^9 + -0.000000178608 * x^10 */
    /* f16 */ {5.960464e-08, 4.882812e-04, 1.000e+00},
    /* f32 */ {5.771298e-16, 5.960464e-08, 1.000e+00},
    /* f64 */ {4.219790e-24, 3.740119e-12, 3.365e+04},
    /* p */ {0, 1, -0x1.4c2871c9dac26p-32, -0x1.55555445d6d92p-3, -0x1.2ee3403e80000p-24, 0x1.1113a20f149ecp-7, -0x1.91fc8c3d00000p-21, -0x1.9dc6f52691c00p-13, -0x1.10bd2fe0e0000p-20, 0x1.bdfca8f4c0000p-19, -0x1.7f8e856580000p-23}
  },
};

const std::vector<Approximation> table_cos = {
    { /* Polynomial degree 2: x^0 + -0.098229593261 * x^1 + -0.349471822954 * x^2 */
      {1.372099e-04, 1.757812e-02, 1e100},
      {1.372146e-04, 1.658595e-02, 2.506e+21},
      {1.372146e-04, 1.658584e-02, 1.346e+30},
         {+1.000000000000e+00, -9.822959326102e-02, -3.494718229535e-01}
    },
    { /* Polynomial degree 3: x^0 + 0.022056022209 * x^1 + -0.590854564638 * x^2 + 0.108779082600 * x^3 */
      {1.370907e-06, 2.925873e-03, 3.472e+04},
      {1.315442e-06, 1.625419e-03, 2.456e+20},
      {1.315442e-06, 1.625393e-03, 1.319e+29},
         {+1.000000000000e+00, +2.205602220946e-02, -5.908545646377e-01, +1.087790826002e-01}
    },
    { /* Polynomial degree 4: x^0 + 0.002265707262 * x^1 + -0.513013475967 * x^2 + 0.022212422749 * x^3 + 0.028955138335 * x^4 */
      {5.960464e-08, 1.159668e-03, 2.038e+03},
      {7.230478e-09, 1.203716e-04, 1.819e+19},
      {7.230483e-09, 1.203719e-04, 9.766e+27},
         {+1.000000000000e+00, +2.265707262237e-03, -5.130134759667e-01, +2.221242274883e-02, +2.895513833467e-02}
    },
    { /* Polynomial degree 5: x^0 + -0.000236632981 * x^1 + -0.497794917987 * x^2 + -0.006710986590 * x^3 + 0.050687063613 * x^4 + -0.005640067625 * x^5 */
      {5.960464e-08, 1.220703e-03, 2.038e+03},
      {3.124762e-11, 8.046627e-06, 1.189e+18},
      {3.124630e-11, 7.914517e-06, 6.421e+26},
         {+1.000000000000e+00, -2.366329814803e-04, -4.977949179874e-01, -6.710986589723e-03, +5.068706361291e-02, -5.640067624550e-03}
    },
    { /* Polynomial degree 6: x^0 + -0.000016486734 * x^1 + -0.499802933388 * x^2 + -0.000777355039 * x^3 + 0.043048112097 * x^4 + -0.001181406087 * x^5 + -0.000967219341 * x^6 */
      {5.960464e-08, 1.220703e-03, 2.038e+03},
      {9.391294e-14, 5.662441e-07, 7.206e+16},
      {9.272005e-14, 4.310370e-07, 3.497e+25},
         {+1.000000000000e+00, -1.648673357299e-05, -4.998029333879e-01, -7.773550394160e-04, +4.304811209739e-02, -1.181406087208e-03, -9.672193414875e-04}
    },
    { /* Polynomial degree 7: x^0 + 0.000001118560 * x^1 + -0.500018528423 * x^2 + 0.000104024212 * x^3 + 0.041388676028 * x^4 + 0.000400085796 * x^5 + -0.001709292006 * x^6 + 0.000136236721 * x^7 */
      {5.960464e-08, 1.220703e-03, 2.038e+03},
      {1.424424e-15, 1.676381e-07, 1.801e+16},
      {2.251632e-16, 2.124113e-08, 1.723e+24},
         {+1.000000000000e+00, +1.118560327057e-06, -5.000185284233e-01, +1.040242117400e-04, +4.138867602751e-02, +4.000857962529e-04, -1.709292005733e-03, +1.362367213534e-04}
    },
    { /* Polynomial degree 8: x^0 + 0.000000058423 * x^1 + -0.500001181021 * x^2 + 0.000008136939 * x^3 + 0.041639710914 * x^4 + 0.000048869802 * x^5 + -0.001439417401 * x^6 + 0.000028818952 * x^7 + 0.000017309827 * x^8 */
      {5.960464e-08, 1.220703e-03, 2.038e+03},
      {1.048715e-15, 1.490116e-07, 9.253e+06},
      {4.137053e-19, 9.104357e-10, 7.386e+22},
         {+1.000000000000e+00, +5.842255458036e-08, -5.000011810210e-01, +8.136938905480e-06, +4.163971091426e-02, +4.886980155981e-05, -1.439417401220e-03, +2.881895222481e-05, +1.730982727471e-05}
    },
};

const std::vector<Approximation> table_tan = {
#if 0
  { /* Polynomial degree 3: x^1 + 0.420134333070 * x^3 */
    /* f16 */ {1.686811e-05, 1.171875e-02, 2.400e+01},
    /* f32 */ {1.682620e-05, 1.105803e-02, 1.855e+05},
    /* f64 */ {1.682620e-05, 1.105807e-02, 9.960e+13},
    /* p */ {0, 1, 0, 0x1.ae37b1d1d7ed5p-2}
  },
  { /* Polynomial degree 5: x^1 + 0.333333333333 * x^3 + 0.172975929259 * x^5 */
    /* f16 */ {5.364418e-07, 1.953125e-03, 4.000e+00},
    /* f32 */ {4.771360e-07, 1.417398e-03, 2.378e+04},
    /* f64 */ {4.771356e-07, 1.417414e-03, 1.277e+13},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.624134394f49fp-3}
  },
  { /* Polynomial degree 7: x^1 + 0.333333333333 * x^3 + 0.126024661749 * x^5 + 0.083310625422 * x^7 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {1.305968e-09, 9.083748e-05, 1.524e+03},
    /* f64 */ {1.305953e-09, 9.085654e-05, 8.184e+11},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.021937c59f91ap-3, 0, 0x1.553d85b99104bp-4}
  },
  { /* Polynomial degree 9: x^1 + 0.333333333333 * x^3 + 0.134537899289 * x^5 + 0.045242058539 * x^7 + 0.040096840154 * x^9 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {5.044108e-12, 4.947186e-06, 8.300e+01},
    /* f64 */ {5.042561e-12, 4.893054e-06, 4.407e+10},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.13889b2c224e0p-3, 0, 0x1.729f793a76abap-5, 0, 0x1.48792b243f53cp-5}
  },
  { /* Polynomial degree 11: x^1 + 0.333333333333 * x^3 + 0.133158092967 * x^5 + 0.055923357582 * x^7 + 0.014655941545 * x^9 + 0.019116054779 * x^11 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {2.208783e-14, 4.172325e-07, 7.000e+00},
    /* f64 */ {2.114972e-14, 2.925084e-07, 2.635e+09},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.10b530b3ebcefp-3, 0, 0x1.ca1fc7fcae6d8p-5, 0, 0x1.e03ef2d065232p-7, 0, 0x1.39328b86bd654p-6}
  },
  { /* Polynomial degree 13: x^1 + 0.333333333333 * x^3 + 0.133353336311 * x^5 + 0.053644390816 * x^7 + 0.023729815105 * x^9 + 0.004088537070 * x^11 + 0.008881982183 * x^13 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {8.708782e-16, 1.192093e-07, 2.000e+00},
    /* f64 */ {9.811783e-17, 2.269055e-08, 2.044e+08},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.111b8dd22742ep-3, 0, 0x1.b77471055b5d8p-5, 0, 0x1.84ca0ef4430bcp-6, 0, 0x1.0bf24500aed56p-8, 0, 0x1.230b777fd2e74p-7}
  },
  { /* Polynomial degree 15: x^1 + 0.333333333333 * x^3 + 0.133331072721 * x^5 + 0.054018444752 * x^7 + 0.021463615440 * x^9 + 0.010429199626 * x^11 + 0.000542587778 * x^13 + 0.004177162430 * x^15 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {7.640290e-16, 1.192093e-07, 2.000e+00},
    /* f64 */ {4.783922e-19, 1.485537e-09, 1.338e+07},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.110fe1a700e08p-3, 0, 0x1.ba84e3b2f2cb4p-5, 0, 0x1.5fa8ed97a733ap-6, 0, 0x1.55be77a86d698p-7, 0, 0x1.1c78e6186f790p-11, 0, 0x1.11c12806aa443p-8}
  },
  { /* Polynomial degree 17: x^1 + 0.333333333333 * x^3 + 0.133333599079 * x^5 + 0.053960775261 * x^7 + 0.021948273250 * x^9 + 0.008448957540 * x^11 + 0.004781147904 * x^13 + -0.000396422144 * x^15 + 0.001964401113 * x^17 */
    /* f16 */ {5.960464e-08, 9.765625e-04, 2.000e+00},
    /* f32 */ {7.633352e-16, 1.192093e-07, 2.000e+00},
    /* f64 */ {2.067093e-21, 1.017313e-10, 9.163e+05},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.111134bc06481p-3, 0, 0x1.ba0bf2a05845cp-5, 0, 0x1.6799baf3fa13ap-6, 0, 0x1.14dafe28aa3e0p-7, 0, 0x1.395659e24ab35p-8, 0, -0x1.9fadc24a3a0f0p-12, 0, 0x1.017a5d128e512p-9}
  },
#endif


#if 1
    { /* Padé order 1/0: (1.000000000000 * x^1)/(x^0) */
      {5.759997e-03, 2.148438e-01, 4.390e+02},
      {5.759967e-03, 2.146018e-01, 3.600e+06},
      {5.759966e-03, 2.146018e-01, 1.933e+15},
        {0, +1.000000000000e+00},
        {+1.000000000000e+00}
    },
    { /* Padé order 1/2: (1.000000000000 * x^1)/(x^0 + -0.333333333333 * x^2) */
      {9.835754e-06, 1.176238e-02, 2.409e+01},
      {9.819094e-06, 1.131070e-02, 1.898e+05},
      {9.819086e-06, 1.131074e-02, 1.019e+14},
        {0, +1.000000000000e+00},
        {+1.000000000000e+00, 0, -3.333333333333e-01}
    },
    { /* Padé order 3/4: (1.000000000000 * x^1 + -0.095238090334 * x^3)/(x^0 + -0.428571423667 * x^2 + 0.009523807886 * x^4) */
      {4.432758e-08, 1.133561e-03, 2.322e+00},
      {2.114650e-13, 2.264977e-06, 3.800e+01},
      {2.110761e-13, 2.169209e-06, 1.954e+10},
        {0, +1.000000000000e+00, 0, -9.523809033396e-02},
        {+1.000000000000e+00, 0, -4.285714236673e-01, 0, +9.523807886161e-03}
    },
    { /* Padé order 5/6: (1.000000000000 * x^1 + -0.118135917805 * x^3 + 0.001727126606 * x^5)/(x^0 + -0.451469251138 * x^2 + 0.018883543649 * x^4 + -0.000066868258 * x^6) */
      {4.418470e-08, 1.067817e-03, 2.187e+00},
      {9.154536e-16, 1.788139e-07, 3.000e+00},
      {1.210724e-16, 4.449406e-08, 4.008e+08},
        {0, +1.000000000000e+00, 0, -1.181359178050e-01, 0, +1.727126605523e-03},
        {+1.000000000000e+00, 0, -4.514692511383e-01, 0, +1.888354364869e-02, 0, -6.686825797322e-05}
    },
    { /* Padé order 7/8: (1.000000000000 * x^1 + 6.230689747211 * x^3 + -0.776264357859 * x^5 + 0.013628762492 * x^7)/(x^0 + 5.897356413878 * x^2 + -2.875383162487 * x^4 + 0.131807374258 * x^6 + -0.000690888557 * x^8) */
      {5.477093e-08, 1.450300e-03, 2.970e+00},
      {1.134047e-15, 1.788139e-07, 3.000e+00},
      {1.528526e-16, 3.409812e-08, 5.312e+08},
        {0, +1.000000000000e+00, 0, +6.230689747211e+00, 0, -7.762643578586e-01, 0, +1.362876249164e-02},
        {+1.000000000000e+00, 0, +5.897356413878e+00, 0, -2.875383162487e+00, 0, +1.318073742582e-01, 0, -6.908885574863e-04}
    },
    { /* Padé order 9/10: (1.000000000000 * x^1 + 7.697730702886 * x^3 + 19.527724859352 * x^5 + -2.443970972571 * x^7 + 0.039274406216 * x^9)/(x^0 + 7.364397369553 * x^2 + 16.939592402832 * x^4 + -9.126389676671 * x^6 + 0.403478820480 * x^8 + -0.001760033048 * x^10) */
      {5.256437e-08, 1.331270e-03, 2.726e+00},
      {1.111773e-15, 2.384186e-07, 4.000e+00},
      {1.854090e-16, 5.177120e-08, 5.311e+08},
        {0, +1.000000000000e+00, 0, +7.697730702886e+00, 0, +1.952772485935e+01, 0, -2.443970972571e+00, 0, +3.927440621564e-02},
        {+1.000000000000e+00, 0, +7.364397369553e+00, 0, +1.693959240283e+01, 0, -9.126389676671e+00, 0, +4.034788204796e-01, 0, -1.760033048098e-03}
    },
#endif
};

const std::vector<Approximation> table_exp = {
    { /* Polynomial degree 1: x^0 + x^1 */
      {1.733398e-02, 3.066406e-01, 3.140e+02},
      {1.734092e-02, 3.068528e-01, 2.574e+06},
      {1.734092e-02, 3.068528e-01, 1.382e+15},
         {+1.000000000000e+00, +1.000000000000e+00}
    },
    { /* Polynomial degree 2: x^0 + x^1 + 0.622356019920 * x^2 */
      {2.568960e-05, 8.789062e-03, 9.000e+00},
      {2.541555e-05, 7.839918e-03, 6.576e+04},
      {2.541555e-05, 7.839994e-03, 3.531e+13},
         {+1.000000000000e+00, +1.000000000000e+00, +6.223560199204e-01}
    },
    { /* Polynomial degree 3: x^0 + x^1 + 0.485317140984 * x^2 + 0.220500897177 * x^3 */
      {2.980232e-07, 1.953125e-03, 2.000e+00},
      {2.821793e-08, 2.485514e-04, 2.085e+03},
      {2.821792e-08, 2.485018e-04, 1.119e+12},
         {+1.000000000000e+00, +1.000000000000e+00, +4.853171409836e-01, +2.205008971767e-01}
    },
    { /* Polynomial degree 4: x^0 + x^1 + 0.501130083198 * x^2 + 0.159195523296 * x^3 + 0.056577569000 * x^4 */
      {2.980232e-07, 1.953125e-03, 2.000e+00},
      {2.474795e-11, 7.390976e-06, 6.200e+01},
      {2.474214e-11, 7.238141e-06, 3.259e+10},
         {+1.000000000000e+00, +1.000000000000e+00, +5.011300831977e-01, +1.591955232955e-01, +5.657756899983e-02}
    },
    { /* Polynomial degree 5: x^0 + x^1 + 0.499936924064 * x^2 + 0.167310294100 * x^3 + 0.039434332885 * x^4 + 0.011469494268 * x^5 */
      {2.980232e-07, 1.953125e-03, 2.000e+00},
      {2.088456e-14, 3.576279e-07, 3.000e+00},
      {1.672773e-14, 1.868940e-07, 8.414e+08},
         {+1.000000000000e+00, +1.000000000000e+00, +4.999369240642e-01, +1.673102940995e-01, +3.943433288492e-02, +1.146949426763e-02}
    },
    { /* Polynomial degree 6: x^0 + x^1 + 0.500002740210 * x^2 + 0.166627077107 * x^3 + 0.041872566214 * x^4 + 0.007841872942 * x^5 + 0.001926763556 * x^6 */
      {2.980232e-07, 1.953125e-03, 2.000e+00},
      {4.149499e-15, 2.384186e-07, 2.000e+00},
      {8.817839e-18, 4.277942e-09, 1.926e+07},
         {+1.000000000000e+00, +1.000000000000e+00, +5.000027402101e-01, +1.666270771074e-01, +4.187256621377e-02, +7.841872941651e-03, +1.926763555808e-03}
    },
    { /* Polynomial degree 7: x^0 + x^1 + 0.499999902995 * x^2 + 0.166668543040 * x^3 + 0.041653163923 * x^4 + 0.008380770078 * x^5 + 0.001302022686 * x^6 + 0.000276636112 * x^7 */
      {2.980232e-07, 1.953125e-03, 2.000e+00},
      {4.150069e-15, 2.384186e-07, 2.000e+00},
      {3.693457e-21, 8.744605e-11, 3.935e+05},
         {+1.000000000000e+00, +1.000000000000e+00, +4.999999029948e-01, +1.666685430396e-01, +4.165316392280e-02, +8.380770077838e-03, +1.302022686146e-03, +2.766361124312e-04}
    },
};

const std::vector<Approximation> table_log = {
    /* MAE optimized: */
    { /* Polynomial degree 2: 1.021630855241 * x^1 + -0.440399093215 * x^2 */
      {7.867813e-06, 4.882812e-03, 5.400e+01},
      {7.878410e-06, 4.749447e-03, 4.323e+05},
      {7.878410e-06, 4.749454e-03, 2.321e+14},
         {0, +1.021630855241e+00, -4.403990932151e-01}
    },
    { /* Polynomial degree 3: 1.004021472213 * x^1 + -0.513696413368 * x^2 + 0.259192803298 * x^3 */
      {1.192093e-07, 7.324219e-04, 1.000e+01},
      {9.896164e-08, 5.207956e-04, 7.352e+04},
      {9.896161e-08, 5.207910e-04, 3.947e+13},
         {0, +1.004021472213e+00, -5.136964133683e-01, +2.591928032976e-01}
    },
    { /* Polynomial degree 4: 0.999865228346 * x^1 + -0.504799955796 * x^2 + 0.344116030813 * x^3 + -0.181774525847 * x^4 */
      {0.000000e+00, 2.441406e-04, 2.000e+00},
      {2.643775e-09, 7.891655e-05, 8.547e+03},
      {2.643777e-09, 7.889841e-05, 4.589e+12},
         {0, +9.998652283457e-01, -5.047999557955e-01, +3.441160308133e-01, -1.817745258468e-01}
    },
    { /* Polynomial degree 5: 0.999861230905 * x^1 + -0.500093709824 * x^2 + 0.340316325485 * x^3 + -0.257449211052 * x^4 + 0.131778232214 * x^5 */
      {0.000000e+00, 2.441406e-04, 2.000e+00},
      {3.768703e-11, 9.119511e-06, 2.343e+03},
      {3.768704e-11, 9.114640e-06, 1.257e+12},
         {0, +9.998612309049e-01, -5.000937098240e-01, +3.403163254845e-01, -2.574492110521e-01, +1.317782322142e-01}
    },
    { /* Polynomial degree 6: 0.999990684308 * x^1 + -0.499824678457 * x^2 + 0.333851505223 * x^3 + -0.257205080254 * x^4 + 0.202899435721 * x^5 + -0.100627375241 * x^6 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {1.004252e-12, 1.549721e-06, 2.680e+02},
      {1.004152e-12, 1.510647e-06, 1.437e+11},
         {0, +9.999906843079e-01, -4.998246784565e-01, +3.338515052232e-01, -2.572050802543e-01, +2.028994357215e-01, -1.006273752406e-01}
    },
    { /* Polynomial degree 7: 1.000002350993 * x^1 + -0.499973566668 * x^2 + 0.333071926642 * x^3 + -0.250926050770 * x^4 + 0.207781348998 * x^5 + -0.166840932667 * x^6 + 0.079379582846 * x^7 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {2.143405e-14, 2.384186e-07, 5.100e+01},
      {2.135113e-14, 2.189788e-07, 2.658e+10},
         {0, +1.000002350993e+00, -4.999735666682e-01, +3.330719266418e-01, -2.509260507703e-01, +2.077813489980e-01, -1.668409326671e-01, +7.937958284645e-02}
    },
    { /* Polynomial degree 8: 1.000000596361 * x^1 + -0.500003185788 * x^2 + 0.333266499185 * x^3 + -0.249714001540 * x^4 + 0.201571736399 * x^5 + -0.174632284483 * x^6 + 0.139514355671 * x^7 + -0.062990170364 * x^8 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {5.171050e-16, 5.960464e-08, 1.100e+01},
      {4.352149e-16, 3.121341e-08, 5.619e+09},
         {0, +1.000000596361e+00, -5.000031857881e-01, +3.332664991847e-01, -2.497140015398e-01, +2.015717363986e-01, -1.746322844830e-01, +1.395143556710e-01, -6.299017036397e-02}
    },

    /* MULPE optimized: */
    { /* Polynomial degree 2: 1.013504640711 * x^1 + -0.439563178442 * x^2 */
      {7.271767e-06, 8.789062e-03, 3.700e+01},
      {7.253393e-06, 8.603573e-03, 2.891e+05},
      {7.253393e-06, 8.603582e-03, 1.552e+14},
         {0, +1.013504640711e+00, -4.395631784420e-01}
    },
    { /* Polynomial degree 3: 1.001891969942 * x^1 + -0.511078000968 * x^2 + 0.267057841899 * x^3 */
      {1.192093e-07, 1.220703e-03, 6.000e+00},
      {1.341201e-07, 1.093954e-03, 3.678e+04},
      {1.341201e-07, 1.093926e-03, 1.974e+13},
         {0, +1.001891969942e+00, -5.110780009681e-01, +2.670578418988e-01}
    },
    { /* Polynomial degree 4: 0.999905308993 * x^1 + -0.503329326932 * x^2 + 0.343796877880 * x^3 + -0.188320244917 * x^4 */
      {0.000000e+00, 4.882812e-04, 2.000e+00},
      {3.791202e-09, 1.402199e-04, 4.711e+03},
      {3.791206e-09, 1.402101e-04, 2.529e+12},
         {0, +9.999053089925e-01, -5.033293269317e-01, +3.437968778800e-01, -1.883202449166e-01}
    },
    { /* Polynomial degree 5: 0.999959483802 * x^1 + -0.500016661140 * x^2 + 0.338167324054 * x^3 + -0.256792383719 * x^4 + 0.137226386160 * x^5 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {6.870449e-11, 2.020597e-05, 6.810e+02},
      {6.870326e-11, 2.019035e-05, 3.655e+11},
         {0, +9.999594838019e-01, -5.000166611404e-01, +3.381673240544e-01, -2.567923837186e-01, +1.372263861599e-01}
    },
    { /* Polynomial degree 6: 0.999997682914 * x^1 + -0.499891896404 * x^2 + 0.333593489790 * x^3 + -0.255801543172 * x^4 + 0.203706401656 * x^5 + -0.105048297801 * x^6 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {1.448225e-12, 3.218651e-06, 1.090e+02},
      {1.448188e-12, 3.206552e-06, 5.788e+10},
         {0, +9.999976829142e-01, -4.998918964042e-01, +3.335934897896e-01, -2.558015431719e-01, +2.037064016563e-01, -1.050482978013e-01}
    },
    { /* Polynomial degree 7: 1.000000788212 * x^1 + -0.499990367926 * x^2 + 0.333150237916 * x^3 + -0.250492802565 * x^4 + 0.206559674786 * x^5 + -0.168790703049 * x^6 + 0.084114884240 * x^7 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {4.060637e-14, 4.768372e-07, 1.700e+01},
      {4.051390e-14, 4.563606e-07, 8.236e+09},
         {0, +1.000000788212e+00, -4.999903679258e-01, +3.331502379161e-01, -2.504928025653e-01, +2.065596747862e-01, -1.687907030490e-01, +8.411488423953e-02}
    },
    { /* Polynomial degree 8: 1.000000124735 * x^1 + -0.500001842945 * x^2 + 0.333299795236 * x^3 + -0.249780673915 * x^4 + 0.201039733211 * x^5 + -0.173542979028 * x^6 + 0.141310340263 * x^7 + -0.066717896329 * x^8 */
      {0.000000e+00, 2.441406e-04, 1.000e+00},
      {9.385329e-16, 8.940697e-08, 4.000e+00},
      {8.529045e-16, 7.133710e-08, 1.291e+09},
         {0, +1.000000124735e+00, -5.000018429448e-01, +3.332997952365e-01, -2.497806739153e-01, +2.010397332111e-01, -1.735429790276e-01, +1.413103402634e-01, -6.671789632936e-02}
    },

};

// clang-format on
}  // namespace

const Approximation *find_best_approximation(const char *name, const std::vector<Approximation> &table,
                                             ApproximationPrecision precision, Type type) {
    // We will find the approximation that is as fast as possible, while satisfying the constraints.
    // Speed is determined by the number of terms. There might be more than one approximation that has
    // a certain number of terms, but is optimized for a different loss.
    // We will try to select the approximation that scores best on the metric the user wants to minimize.

    Approximation::Metrics Approximation::*metrics_ptr = nullptr;
    if (type == Float(16)) {
        metrics_ptr = &Approximation::metrics_f16;
    } else if (type == Float(32)) {
        metrics_ptr = &Approximation::metrics_f32;
    } else if (type == Float(64)) {
        metrics_ptr = &Approximation::metrics_f64;
    } else {
        internal_error << "Cannot find approximation for type " << type;
    }

    const Approximation *best = nullptr;

    for (int search_pass = 0; search_pass < 3; ++search_pass) {
        // Search pass 0 attempts to satisfy everything.
        // Pass 1 will ignore the metrics.
        // Pass 2 will also ignore the number of terms.
        best = nullptr;
        for (size_t i = 0; i < table.size(); ++i) {
            const Approximation &e = table[i];

            int num_num = 0;
            int num_denom = 0;
            for (double c : e.p) {
                num_num += c != 0.0;
            }
            for (double c : e.q) {
                num_denom += c != 0.0;
            }

            int num_constraints = 0;
            int num_constraints_satisfied = 0;

            int num_terms = int(num_num + num_denom);
            num_constraints++;
            if (num_terms >= precision.force_halide_polynomial) {
                num_constraints_satisfied++;
            }

            const Approximation::Metrics &metrics = e.*metrics_ptr;

            // Check if precision is satisfactory.
            if (precision.constraint_max_absolute_error != 0) {
                num_constraints++;
                if (metrics.mae <= precision.constraint_max_absolute_error) {
                    num_constraints_satisfied++;
                }
            }
            if (precision.constraint_max_ulp_error != 0) {
                num_constraints++;
                if (metrics.mulpe <= precision.constraint_max_ulp_error) {
                    num_constraints_satisfied++;
                }
            }

            if (num_constraints_satisfied + search_pass >= num_constraints) {
                if (best == nullptr) {
                    debug(4) << "first best = " << i << "\n";
                    best = &e;
                } else {
                    // Figure out if we found better for the same number of terms (or less).
                    if (best->p.size() >= e.p.size()) {
                        const Approximation::Metrics &best_metrics = best->*metrics_ptr;
                        if (precision.optimized_for == OO::MULPE) {
                            if (best_metrics.mulpe > metrics.mulpe) {
                                debug(4) << "better mulpe best = " << i << "\n";
                                best = &e;
                            }
                        } else if (precision.optimized_for == OO::MAE) {
                            if (best_metrics.mae > metrics.mae) {
                                debug(4) << "better mae best = " << i << "\n";
                                best = &e;
                            }
                        }
                    }
                }
            }
        }

        if (best) {
            if (search_pass == 0) {
                return best;
            } else {
                // Report warning below and return it.
                break;
            }
        }
    }

    if (!best) {
        best = &table.back();
    }
    const Approximation::Metrics &best_metrics = best->*metrics_ptr;

    auto warn = user_warning;
    warn << "Could not find an approximation for fast_" << name << " that satisfies constraints:";
    if (precision.force_halide_polynomial > int(best->p.size())) {
        warn << " [NumTerms " << best->p.size() << " < requested " << precision.force_halide_polynomial << "]";
    }
    if (precision.constraint_max_absolute_error > 0.0 && best_metrics.mae > precision.constraint_max_absolute_error) {
        warn << " [MAE " << best_metrics.mae << " > requested " << precision.constraint_max_absolute_error << "]";
    }
    if (precision.constraint_max_ulp_error > 0.0 && best_metrics.mulpe > precision.constraint_max_ulp_error) {
        warn << " [MULPE " << best_metrics.mulpe << " > requested " << precision.constraint_max_ulp_error << "]";
    }
    return best;
}

const Approximation *best_atan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("atan", table_atan, precision, type);
}

const Approximation *best_sin_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("sin", table_sin, precision, type);
}

const Approximation *best_cos_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("cos", table_cos, precision, type);
}

const Approximation *best_tan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("tan", table_tan, precision, type);
}

const Approximation *best_exp_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("exp", table_exp, precision, type);
}

const Approximation *best_log_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("log", table_log, precision, type);
}

}  // namespace Internal
}  // namespace Halide
