#include "ApproximationTables.h"

namespace Halide {
namespace Internal {

namespace ApproximationTables {

using OO = ApproximationPrecision::OptimizationObjective;

constexpr double nan = std::numeric_limits<double>::quiet_NaN();

// clang-format off
// Generate this table with:
//   python3 tools/polynomial_optimizer.py atan --order 1 2 3 4 5 6 7 8 --loss mulpe --formula
const std::vector<Approximation> table_atan = {
  /* MULPE optimized */
  { /* Polynomial degree 3: 0.9891527115034*x + -0.2145409767037*x^3 */
    /* f16 */ {2.110004e-05, nan, 0},
    /* f32 */ {2.104596e-05, 0x1.6173p-7, 181987},
    /* f64 */ {2.104596e-05, nan, 0},
    /* p */ {0, 0x1.fa7239655037ep-1, 0, -0x1.b7614274c12d5p-3},
  },
  { /* Polynomial degree 5: 0.9986736793399*x + -0.3030243250734*x^3 + 0.0910641654911*x^5 */
    /* f16 */ {4.172325e-07, nan, 0},
    /* f32 */ {3.587571e-07, 0x1.58dp-10, 22252},
    /* f64 */ {3.587570e-07, nan, 0},
    /* p */ {0, 0x1.ff52281048131p-1, 0, -0x1.364c023854af6p-2, 0, 0x1.74ffb2c9f2b6p-4},
  },
  { /* Polynomial degree 7: 0.9998432381246*x + -0.3262808917256*x^3 + 0.1563093203417*x^5 + -0.0446281507093*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {6.491497e-09, 0x1.448p-13, 2630},
    /* f64 */ {6.491491e-09, nan, 0},
    /* p */ {0, 0x1.ffeb73f1be4d9p-1, 0, -0x1.4e1c93fd15dp-2, 0, 0x1.401f19d76bbb1p-3, 0, -0x1.6d9803f8def74p-5},
  },
  { /* Polynomial degree 9: 0.9999742662159*x + -0.3318277126482*x^3 + 0.1859045046114*x^5 + -0.0930301292365*x^7 + 0.0244025888439*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.320254e-10, 0x1.abp-16, 432},
    /* f64 */ {1.320258e-10, nan, 0},
    /* p */ {0, 0x1.fffca0847a507p-1, 0, -0x1.53caa4d6ebe7ep-2, 0, 0x1.7cbb803be13cp-3, 0, -0x1.7d0d2929d11d8p-4, 0, 0x1.8fcfe0416a4ep-6},
  },
  { /* Polynomial degree 11: 0.9999964140662*x + -0.3330371993915*x^3 + 0.1959643323456*x^5 + -0.1220797388097*x^7 + 0.0583514228469*x^9 + -0.0138005959295*x^11 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.017319e-12, 0x1.e8p-19, 61},
    /* f64 */ {3.017097e-12, nan, 0},
    /* p */ {0, 0x1.ffff87ad103eep-1, 0, -0x1.5507b41ef3c94p-2, 0, 0x1.9155bf74daab9p-3, 0, -0x1.f409e25b1223ap-4, 0, 0x1.de03cd99aec8ep-5, 0, -0x1.c437ca1756d58p-7},
  },
  { /* Polynomial degree 13: 0.9999995026893*x + -0.3332735151572*x^3 + 0.1988964132523*x^5 + -0.1351575350457*x^7 + 0.0843254207788*x^9 + -0.0373493786528*x^11 + 0.0079577436644*x^13 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.399394e-14, 0x1.4p-21, 10},
    /* f64 */ {6.355124e-14, nan, 0},
    /* p */ {0, 0x1.ffffef502238dp-1, 0, -0x1.5545a700e4794p-2, 0, 0x1.975700b1ae748p-3, 0, -0x1.14cd7946a2735p-3, 0, 0x1.59659cc776125p-4, 0, -0x1.31f752fade0dap-5, 0, 0x1.04c26464ef24p-7},
  },
  { /* Polynomial degree 15: 0.9999999226221*x + -0.3333208643812*x^3 + 0.1997088467321*x^5 + -0.1402584596538*x^7 + 0.0993128573944*x^9 + -0.0597183157903*x^11 + 0.0244085869774*x^13 + -0.0047344862767*x^15 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.774935e-15, 0x1p-22, 3},
    /* f64 */ {1.371986e-15, nan, 0},
    /* p */ {0, 0x1.fffffd675435ap-1, 0, -0x1.5552108e5dc8p-2, 0, 0x1.9900f3ab7d2dep-3, 0, -0x1.1f3fd3c99ab9cp-3, 0, 0x1.96c914294db3dp-4, 0, -0x1.e93662a9558bap-5, 0, 0x1.8fe908b3cb6f4p-6, 0, -0x1.36477fb8c89ep-8},
  },
  { /* Polynomial degree 17: 0.9999999883993*x + -0.3333309442523*x^3 + 0.1999289575140*x^5 + -0.1420533230637*x^7 + 0.1064628382635*x^9 + -0.0751361258616*x^11 + 0.0427812622785*x^13 + -0.0161132533390*x^15 + 0.0028587747946*x^17 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.933690e-16, 0x1p-22, 3},
    /* f64 */ {3.129950e-17, nan, 0},
    /* p */ {0, 0x1.ffffff9c59cf5p-1, 0, -0x1.5554b5013bccep-2, 0, 0x1.99745a705e3f5p-3, 0, -0x1.22ecda46c660cp-3, 0, 0x1.b41260894c198p-4, 0, -0x1.33c1f0352e976p-4, 0, 0x1.5e76cf4bc43fap-5, 0, -0x1.07ffe207e126p-6, 0, 0x1.76b4907fc42ep-9},
  },

  /* MAE optimized */
  { /* Polynomial degree 5: 0.9953585782797*x + -0.2886936958137*x^3 + 0.0793424783865*x^5 */
    /* f16 */ {2.384186e-07, nan, 0},
    /* f32 */ {1.840520e-07, 0x1.3f68p-11, 77870},
    /* f64 */ {1.840520e-07, nan, 0},
    /* p */ {0, 0x1.fd9fa3bb02543p-1, 0, -0x1.279f51f85352p-2, 0, 0x1.44fc9e5da882ep-4},
  },
  { /* Polynomial degree 7: 0.9992138985791*x + -0.3211758739582*x^3 + 0.1462666546487*x^5 + -0.0389879615513*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.298478e-09, 0x1.56p-14, 13189},
    /* f64 */ {3.298482e-09, nan, 0},
    /* p */ {0, 0x1.ff98f6d03641ap-1, 0, -0x1.48e2540ba88aep-2, 0, 0x1.2b8dda11b17e6p-3, 0, -0x1.3f63ae799e93cp-5},
  },
  { /* Polynomial degree 9: 0.9998663421985*x + -0.3303050010784*x^3 + 0.1801602181228*x^5 + -0.0851577596552*x^7 + 0.0208458122131*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.526191e-11, 0x1.84p-17, 2242},
    /* f64 */ {6.526091e-11, nan, 0},
    /* p */ {0, 0x1.ffee7b303a411p-1, 0, -0x1.523b7965592dep-2, 0, 0x1.70f7d72705c2bp-3, 0, -0x1.5cce620b83acep-4, 0, 0x1.5589ac6daca18p-6},
  },
  { /* Polynomial degree 11: 0.9999772210489*x + -0.3326228765956*x^3 + 0.1935406963478*x^5 + -0.1164273130115*x^7 + 0.0526482733623*x^9 + -0.0117195014619*x^11 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.379712e-12, 0x1.ep-20, 382},
    /* f64 */ {1.379310e-12, nan, 0},
    /* p */ {0, 0x1.fffd03aa4cep-1, 0, -0x1.549b176384b6p-2, 0, 0x1.8c5f108a1214cp-3, 0, -0x1.dce2e2dbee7f9p-4, 0, 0x1.af4b6e8904efep-5, 0, -0x1.80064dc08ebe8p-7},
  },
  { /* Polynomial degree 13: 0.9999961118624*x + -0.3331736911804*x^3 + 0.1980782544424*x^5 + -0.1323338029797*x^7 + 0.0796243757853*x^9 + -0.0336048328460*x^11 + 0.0068119958930*x^13 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.095169e-14, 0x1.8p-22, 66},
    /* f64 */ {3.056060e-14, nan, 0},
    /* p */ {0, 0x1.ffff7d89270f9p-1, 0, -0x1.552b7bee07be7p-2, 0, 0x1.95aa0d4707df4p-3, 0, -0x1.0f05065f9fc88p-3, 0, 0x1.4624359f64b47p-4, 0, -0x1.134a7141f3414p-5, 0, 0x1.be6e5394b10dp-8},
  },
  { /* Polynomial degree 15: 0.9999993356292*x + -0.3332986101098*x^3 + 0.1994656846774*x^5 + -0.1390864458974*x^7 + 0.0964223779615*x^9 + -0.0559129018186*x^11 + 0.0218633695217*x^13 + -0.0040546840704*x^15 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.146915e-15, 0x1p-22, 12},
    /* f64 */ {7.015179e-16, nan, 0},
    /* p */ {0, 0x1.ffffe9b519131p-1, 0, -0x1.554c3b18e5432p-2, 0, 0x1.98817702e8bf2p-3, 0, -0x1.1cd95ac39193ap-3, 0, 0x1.8af230ff284a2p-4, 0, -0x1.ca09da9786aa6p-5, 0, 0x1.66359e44e0aa8p-6, 0, -0x1.09ba4f7a5294p-8},
  },
  { /* Polynomial degree 17: 0.9999998863914*x + -0.3333259707609*x^3 + 0.1998590753365*x^5 + -0.1416123457556*x^7 + 0.1049896574862*x^9 + -0.0723489762960*x^11 + 0.0397816881508*x^13 + -0.0144016400792*x^15 + 0.0024567946843*x^17 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.702275e-16, 0x1p-22, 3},
    /* f64 */ {1.655318e-17, nan, 0},
    /* p */ {0, 0x1.fffffc301c1d6p-1, 0, -0x1.5553673d4d30bp-2, 0, 0x1.994fb70308acep-3, 0, -0x1.2205a74dd6fcfp-3, 0, 0x1.ae09a29524f17p-4, 0, -0x1.2857667172acdp-4, 0, 0x1.45e43f32cb83ep-5, 0, -0x1.d7e9b69310b78p-7, 0, 0x1.420459a4f1fp-9},
  },



};

const std::vector<Approximation> table_sin = {
  /* MULPE optimized */
#if 0 // Disabled poly-1 to get cos and sin closer together in worst-case accuracy
  { /* Polynomial degree 2: 1*x + -0.2049090779222*x^2 */
    /* f16 */ {1.100540e-03, nan, 0},
    /* f32 */ {1.100234e-03, 0x1.0b12cp-4, 1093143},
    /* f64 */ {1.100234e-03, nan, 0},
    /* p */ {0, 1, -0x1.a3a75ee2a2f0ep-3},
  },
#endif
  { /* Polynomial degree 3: 1*x + -0.0233937839982*x^2 + -0.1333978458043*x^3 */
    /* f16 */ {4.231930e-06, nan, 0},
    /* f32 */ {4.201336e-06, 0x1.02aap-8, 66218},
    /* f64 */ {4.201336e-06, nan, 0},
    /* p */ {0, 1, -0x1.7f48a44cee11ap-6, -0x1.1132e3c8b0f3ep-3},
  },
  { /* Polynomial degree 4: 1*x + 0.0052092183515*x^2 + -0.1872864979765*x^3 + 0.0233008205969*x^4 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {4.939219e-08, 0x1.89ep-12, 6302},
    /* f64 */ {4.939212e-08, nan, 0},
    /* p */ {0, 1, 0x1.55642e7521786p-8, -0x1.7f90103e54a0ep-3, 0x1.7dc2b99bbdfe8p-6},
  },
  { /* Polynomial degree 5: 1*x + 0.0003728118021*x^2 + -0.1687397656516*x^3 + 0.0034378163019*x^4 + 0.0064177646314*x^5 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.195595e-10, 0x1.5ep-16, 346},
    /* f64 */ {1.195597e-10, nan, 0},
    /* p */ {0, 1, 0x1.86ebe7f5cc6bcp-12, -0x1.59943bf810e2cp-3, 0x1.c299f92c20b2p-9, 0x1.a4983934976p-8},
  },
  { /* Polynomial degree 6: 1*x + -0.0000391635174*x^2 + -0.1663017765787*x^3 + -0.0010830269107*x^4 + 0.0097402806227*x^5 + -0.0008456053277*x^6 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.441571e-13, 0x1.9p-20, 24},
    /* f64 */ {5.434192e-13, nan, 0},
    /* p */ {0, 1, -0x1.4887036395363p-15, -0x1.5496069d60ad6p-3, -0x1.1be8b4a60afep-10, 0x1.3f2b655d3bap-7, -0x1.bb5739d2446p-11},
  },
  { /* Polynomial degree 7: 1*x + -0.0000020293467*x^2 + -0.1666423214554*x^3 + -0.0000953697921*x^4 + 0.0085002857803*x^5 + -0.0001401268539*x^6 + -0.0001494014170*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.555547e-15, 0x1p-22, 4},
    /* f64 */ {9.362702e-16, nan, 0},
    /* p */ {0, 1, -0x1.105fd24b46299p-19, -0x1.554891c63e3cp-3, -0x1.900288d74ep-14, 0x1.168990b76d13p-7, -0x1.25de082873cp-13, -0x1.39514666852p-13},
  },
  { /* Polynomial degree 8: 1*x + 0.0000001501590*x^2 + -0.1666690928809*x^3 + 0.0000132943067*x^4 + 0.0082986520976*x^5 + 0.0000486951923*x^6 + -0.0002364067922*x^7 + 0.0000156936419*x^8 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.794063e-16, 0x1.8p-23, 3},
    /* f64 */ {2.336845e-18, nan, 0},
    /* p */ {0, 1, 0x1.4276c96bf8f14p-23, -0x1.55569af96bbcdp-3, 0x1.be1539a7b9p-17, 0x1.0fee23ae17c9p-7, 0x1.987c2119928p-15, -0x1.efc7ee1ea84p-13, 0x1.074badb742p-16},
  },
  { /* Polynomial degree 9: 1*x + 0.0000000058323*x^2 + -0.1666667886891*x^3 + 0.0000008409554*x^4 + 0.0083305793679*x^5 + 0.0000049104356*x^6 + -0.0002033952557*x^7 + 0.0000027867772*x^8 + 0.0000020454635*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.775984e-16, 0x1.8p-23, 3},
    /* f64 */ {2.605378e-21, nan, 0},
    /* p */ {0, 1, 0x1.90ca9be56f412p-28, -0x1.555565b5fe4e2p-3, 0x1.c37c063a58p-21, 0x1.10f9f6f88e83ap-7, 0x1.4988a416bep-18, -0x1.aa8cff160bfp-13, 0x1.7608efb94p-19, 0x1.1289973ab8p-19},
  },

  /* MAE optimized */
#if 0 // Disabled poly-1 to get cos and sin closer together in worst-case accuracy
  { /* Polynomial degree 2: 1.1366110631132*x + -0.3112038398032*x^2 */
    /* f16 */ {1.521111e-04, nan, 0},
    /* f32 */ {1.521013e-04, 0x1.1f0cp-6, 2016480},
    /* f64 */ {1.521012e-04, nan, 0},
    /* p */ {0, 0x1.22f8f15057cfcp+0, -0x1.3eac382960b01p-2},
  },
#endif
  { /* Polynomial degree 3: 1.0181010190573*x + -0.0615167021202*x^2 + -0.1158500796985*x^3 */
    /* f16 */ {1.251698e-06, nan, 0},
    /* f32 */ {1.225425e-06, 0x1.9adp-10, 298285},
    /* f64 */ {1.225424e-06, nan, 0},
    /* p */ {0, 0x1.04a244b4e00f4p+0, -0x1.f7f1dff8737cp-5, -0x1.da859cf8b39cep-4},
  },
  { /* Polynomial degree 4: 0.9974141754579*x + 0.0167153227967*x^2 + -0.2006099769751*x^3 + 0.0278281374774*x^4 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.607782e-09, 0x1.034p-13, 43383},
    /* f64 */ {7.607764e-09, nan, 0},
    /* p */ {0, 0x1.fead12205135bp-1, 0x1.11dd25303d448p-6, -0x1.9ad96752e048p-3, 0x1.c7efab17edb94p-6},
  },
  { /* Polynomial degree 5: 0.9997847592756*x + 0.0018495318264*x^2 + -0.1717343529796*x^3 + 0.0057750648149*x^4 + 0.0057964761852*x^5 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {3.008127e-11, 0x1.08p-17, 3611},
    /* f64 */ {3.008054e-11, nan, 0},
    /* p */ {0, 0x1.ffe3c9b841859p-1, 0x1.e4d7fad423cap-10, -0x1.5fb642ad2cfbp-3, 0x1.7a79828319fecp-8, 0x1.7be0bba5b74dcp-8},
  },
  { /* Polynomial degree 6: 1.0000177053715*x + -0.0002245908315*x^2 + -0.1657149185418*x^3 + -0.0018665599069*x^4 + 0.0102070333559*x^5 + -0.0009480620636*x^6 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.605934e-14, 0x1.8p-21, 298},
    /* f64 */ {9.548779e-14, nan, 0},
    /* p */ {0, 0x1.0001290bfdd92p+0, -0x1.d70048d8e42p-13, -0x1.536257dcc5295p-3, -0x1.e94eb706234d8p-10, 0x1.4e76cd39f2d0ap-7, -0x1.f10ebc762ca2p-11},
  },
  { /* Polynomial degree 7: 1.0000010580313*x + -0.0000167452242*x^2 + -0.1665774642401*x^3 + -0.0002229930999*x^4 + 0.0086252323498*x^5 + -0.0001997574663*x^6 + -0.0001383333524*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.631155e-16, 0x1p-22, 19},
    /* f64 */ {2.199563e-16, nan, 0},
    /* p */ {0, 0x1.000011c035ac5p+0, -0x1.18f030c3ddcp-16, -0x1.552690c94bd7dp-3, -0x1.d3a68248ce0ap-13, 0x1.1aa1b16e737bep-7, -0x1.a2ebf91f1074p-13, -0x1.221b272ee49p-13},
  },
  { /* Polynomial degree 8: 0.9999999389115*x + 0.0000012803075*x^2 + -0.1666758510647*x^3 + 0.0000319438302*x^4 + 0.0082716065940*x^5 + 0.0000700023478*x^6 + -0.0002450391806*x^7 + 0.0000171026039*x^8 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {4.968831e-16, 0x1.8p-23, 3},
    /* f64 */ {4.216572e-19, nan, 0},
    /* p */ {0, 0x1.fffffdf341035p-1, 0x1.57ae0fcbfp-20, -0x1.555a260ad9297p-3, 0x1.0bf6da617d04p-15, 0x1.0f0b43e743924p-7, 0x1.259c72d65574p-14, -0x1.00f1344546p-12, 0x1.1eef1fe72d2p-16},
  },
  { /* Polynomial degree 9: 0.9999999971693*x + 0.0000000711040*x^2 + -0.1666672805773*x^3 + 0.0000025894203*x^4 + 0.0083271934795*x^5 + 0.0000086945545*x^6 + -0.0002058333603*x^7 + 0.0000036279373*x^8 + 0.0000019251135*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {4.963947e-16, 0x1.8p-23, 3},
    /* f64 */ {6.317959e-22, nan, 0},
    /* p */ {0, 0x1.ffffffe7af2fap-1, 0x1.3163af522p-24, -0x1.5555a7bb240bp-3, 0x1.5b8bcd89d3p-19, 0x1.10dd8fd4b37acp-7, 0x1.23bda78681p-17, -0x1.afa9f1a1e9e6p-13, 0x1.e6eef9a971p-19, 0x1.026265ad9ep-19},
  },


};

const std::vector<Approximation> table_cos = {
  // No MULPE-optimized terms as the optimizer goes haywire on the zero at pi/2.

  /* MAE-optimized */
  { /* Polynomial degree 2: 1 + -0.0982295932610*x + -0.3494718229535*x^2 */
    /* f16 */ {1.372099e-04, nan, 0},
    /* f32 */ {1.372146e-04, 0x1.0fbeaep-6, 149166958},
    /* f64 */ {1.372146e-04, nan, 0},
    /* p */ {1, -0x1.925931a8e3288p-4, -0x1.65dbf109d5eb7p-2},
  },
  { /* Polynomial degree 3: 1 + 0.0220560222095*x + -0.5908545646377*x^2 + 0.1087790826002*x^3 */
    /* f16 */ {1.370907e-06, nan, 0},
    /* f32 */ {1.315442e-06, 0x1.aa22eep-10, 986650243},
    /* f64 */ {1.315442e-06, nan, 0},
    /* p */ {1, 0x1.695da984724e9p-6, -0x1.2e847d4f9f3efp-1, 0x1.bd8f22a41b338p-4},
  },
  { /* Polynomial degree 4: 1 + 0.0022657072622*x + -0.5130134759667*x^2 + 0.0222124227488*x^3 + 0.0289551383347*x^4 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.230478e-09, 0x1.f92efp-14, 96502482},
    /* f64 */ {7.230483e-09, nan, 0},
    /* p */ {1, 0x1.28f8852feee58p-9, -0x1.06a9b3cb5e62bp-1, 0x1.6beda7515a35p-6, 0x1.da66a70cb579p-6},
  },
  { /* Polynomial degree 5: 1 + -0.0002366329815*x + -0.4977949179874*x^2 + -0.0067109865897*x^3 + 0.0506870636129*x^4 + -0.0056400676245*x^5 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {3.124762e-11, 0x1.0e8p-17, 63390418},
    /* f64 */ {3.124630e-11, nan, 0},
    /* p */ {1, -0x1.f0415d54e432cp-13, -0x1.fdbdf3737bcc8p-2, -0x1.b7cfabed3feap-8, 0x1.9f3a7a118715p-5, -0x1.71a0a1fea2ap-8},
  },
  { /* Polynomial degree 6: 1 + -0.0000164867336*x + -0.4998029333879*x^2 + -0.0007773550394*x^3 + 0.0430481120974*x^4 + -0.0011814060872*x^5 + -0.0009672193415*x^6 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.391294e-14, 0x1.3p-21, 26493997},
    /* f64 */ {9.272005e-14, nan, 0},
    /* p */ {1, -0x1.1499fb447e12ep-16, -0x1.ffcc571562537p-2, -0x1.978ed3c5fc4p-11, 0x1.60a66f339c5b4p-5, -0x1.35b2d2080acp-10, -0x1.fb19fb849a6p-11},
  },
  { /* Polynomial degree 7: 1 + 0.0000011185603*x + -0.5000185284233*x^2 + 0.0001040242117*x^3 + 0.0413886760275*x^4 + 0.0004000857963*x^5 + -0.0017092920057*x^6 + 0.0001362367214*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.424424e-15, 0x1.abp-23, 2236777},
    /* f64 */ {2.251632e-16, nan, 0},
    /* p */ {1, 0x1.2c42e1601fbf8p-20, -0x1.00026db5f1ba4p-1, 0x1.b44f259836cp-14, 0x1.530e583ed01dp-5, 0x1.a385369168ap-12, -0x1.c014a50e455p-10, 0x1.1db5886843p-13},
  },
  { /* Polynomial degree 8: 1 + 0.0000000584226*x + -0.5000011810210*x^2 + 0.0000081369389*x^3 + 0.0416397109143*x^4 + 0.0000488698016*x^5 + -0.0014394174012*x^6 + 0.0000288189522*x^7 + 0.0000173098273*x^8 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.048715e-15, 0x1.58p-23, 6151831},
    /* f64 */ {4.137053e-19, nan, 0},
    /* p */ {1, 0x1.f5d88e613859fp-25, -0x1.000027a0e4928p-1, 0x1.1107c5e1d5p-17, 0x1.551ccd92eebacp-5, 0x1.99f31987f38p-15, -0x1.7955aaa775p-10, 0x1.e38075124ep-16, 0x1.2269245d04p-16},
  },
  { /* Polynomial degree 9: 1 + -0.0000000029362*x + -0.4999999240501*x^2 + -0.0000006771479*x^3 + 0.0416696314897*x^4 + -0.0000073632203*x^5 + -0.0013777967533*x^6 + -0.0000103667387*x^7 + 0.0000307117102*x^8 + -0.0000019064507*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.044908e-15, 0x1.91p-23, 2236777},
    /* f64 */ {6.418498e-22, nan, 0},
    /* p */ {1, -0x1.938d08e5f0978p-29, -0x1.fffffae730e21p-2, -0x1.6b8a7df3dp-21, 0x1.555b8d0f8204dp-5, -0x1.ee23293cfp-18, -0x1.692e5ffbcf64p-10, -0x1.5bd99b61f4p-17, 0x1.01a0e540f8p-15, -0x1.ffc24c258p-20},
  },


#if 0
  { /* MULPE_MAE Polynomial degree 2: x^0 + -0.103192331902 * x^1 + -0.344289847901 * x^2 */
    /* f16 */ {1.580715e-04},
    /* f32 */ {1.580714e-04},
    /* f64 */ {1.580714e-04},
    /* p */ {1, -0x1.a6ad00ab71332p-4, -0x1.608d849450f2fp-2}
  },
  { /* MULPE_MAE Polynomial degree 3: x^0 + 0.023084277738 * x^1 + -0.593222223440 * x^2 + 0.110014859783 * x^3 */
    /* f16 */ {1.490116e-06},
    /* f32 */ {1.421455e-06},
    /* f64 */ {1.421455e-06},
    /* p */ {1, 0x1.7a367a7bfd56bp-6, -0x1.2fbad2c1df710p-1, 0x1.c29ef10d78354p-4}
  },
  { /* MULPE_MAE Polynomial degree 4: x^0 + 0.002368902897 * x^1 + -0.513420340205 * x^2 + 0.022693369236 * x^3 + 0.028779954584 * x^4 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {7.832619e-09},
    /* f64 */ {7.832622e-09},
    /* p */ {1, 0x1.367f30efa5f82p-9, -0x1.06df07e491134p-1, 0x1.73cee3acff2e0p-6, 0x1.d787e0ee10260p-6}
  },
  { /* MULPE_MAE Polynomial degree 5: x^0 + -0.000249487270 * x^1 + -0.497719204369 * x^2 + -0.006856835288 * x^3 + 0.050800822656 * x^4 + -0.005671130090 * x^5 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {3.272695e-11},
    /* f64 */ {3.272492e-11},
    /* p */ {1, -0x1.059b3a9efdf4ap-12, -0x1.fdaa1a656d882p-2, -0x1.c15e9b50644a0p-8, 0x1.a0290bfd54adcp-5, -0x1.73a9c6448df40p-8}
  },
  { /* MULPE_MAE Polynomial degree 6: x^0 + -0.000017341076 * x^1 + -0.499796084411 * x^2 + -0.000796473905 * x^3 + 0.043072365254 * x^4 + -0.001195727666 * x^5 + -0.000964022485 * x^6 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {9.848403e-14},
    /* f64 */ {9.721548e-14},
    /* p */ {1, -0x1.22ef5b1f14e74p-16, -0x1.ffca8b74da477p-2, -0x1.a194eafc2e700p-11, 0x1.60d94c0403544p-5, -0x1.3973ece3c3b00p-10, -0x1.f96ce8601b000p-11}
  },
  { /* MULPE_MAE Polynomial degree 7: x^0 + 0.000001189191 * x^1 + -0.500019301419 * x^2 + 0.000107000744 * x^3 + 0.041383232833 * x^4 + 0.000405226651 * x^5 + -0.001711716159 * x^6 + 0.000136688488 * x^7 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.433102e-15},
    /* f64 */ {2.311972e-16},
    /* p */ {1, 0x1.3f389b9c901b6p-20, -0x1.000287a5ec52fp-1, 0x1.c0cb2c6da2c00p-14, 0x1.5302edf3eb122p-5, 0x1.a8e9336c54600p-12, -0x1.c0b753b2ca080p-10, 0x1.1ea812b16e800p-13}
  },
  { /* MULPE_MAE Polynomial degree 8: x^0 + 0.000000061952 * x^1 + -0.500001229091 * x^2 + 0.000008373245 * x^3 + 0.041639137479 * x^4 + 0.000049635045 * x^5 + -0.001439990144 * x^6 + 0.000029044531 * x^7 + 0.000017273421 * x^8 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.049173e-15},
    /* f64 */ {4.251312e-19},
    /* p */ {1, 0x1.0a157636083b0p-24, -0x1.0000293dd0b45p-1, 0x1.18f5a083a2000p-17, 0x1.551b99b69e610p-5, 0x1.a05e727bf8000p-15, -0x1.797c1a4efda80p-10, 0x1.e7494f5024000p-16, 0x1.21ccc7646c000p-16}
  },
  { /* MULPE_MAE Polynomial degree 9: x^0 + -0.000000003148 * x^1 + -0.499999920324 * x^2 + -0.000000700803 * x^3 + 0.041669706501 * x^4 + -0.000007497726 * x^5 + -0.001377653943 * x^6 + -0.000010455772 * x^7 + 0.000030741841 * x^8 + -0.000001910724 * x^9 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.044969e-15},
    /* f64 */ {6.501772e-22},
    /* p */ {1, -0x1.b0a81ca8e5b95p-29, -0x1.fffffaa72ce3cp-2, -0x1.783da68640000p-21, 0x1.555bb55506b79p-5, -0x1.f729f4f3e8000p-18, -0x1.6924ca85f0c40p-10, -0x1.5ed666cfe0000p-17, 0x1.01e199f795000p-15, -0x1.0073f76540000p-19}
  },
#endif
};

const std::vector<Approximation> table_tan = {
  // We prefer Padé approximants for tan, as we also rely on tan(x) = 1/tan(pi/2-x).
  // As such, we can simply swap the numerator and denominator for higher precision.

  /* MULPE optimized */
  { /* Polynomial degree 3: 1*x + 0.4201343330696*x^3 */
    /* f16 */ {1.686811e-05, nan, 0},
    /* f32 */ {1.682620e-05, 0x1.6a5ap-7, 185524},
    /* f64 */ {1.682620e-05, nan, 0},
    /* p */ {0, 1, 0, 0x1.ae37b1d1d7ed5p-2},
  },
  { /* Polynomial degree 5: 1*x + 0.3333333333333*x^3 + 0.1729759292593*x^5 */
    /* f16 */ {5.364418e-07, nan, 0},
    /* f32 */ {4.771360e-07, 0x1.7394p-10, 23781},
    /* f64 */ {4.771356e-07, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.624134394f49fp-3},
  },
  { /* Polynomial degree 7: 1*x + 0.3333333333333*x^3 + 0.1260246617493*x^5 + 0.0833106254223*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.305968e-09, 0x1.7d4p-14, 1525},
    /* f64 */ {1.305953e-09, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.021937c59f91ap-3, 0, 0x1.553d85b99104bp-4},
  },
  { /* Polynomial degree 9: 1*x + 0.3333333333333*x^3 + 0.1345378992885*x^5 + 0.0452420585386*x^7 + 0.0400968401536*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.044108e-12, 0x1.4cp-18, 83},
    /* f64 */ {5.042561e-12, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.13889b2c224ep-3, 0, 0x1.729f793a76abap-5, 0, 0x1.48792b243f53cp-5},
  },
  { /* Polynomial degree 11: 1*x + 0.3333333333333*x^3 + 0.1331580929668*x^5 + 0.0559233575818*x^7 + 0.0146559415451*x^9 + 0.0191160547792*x^11 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.208783e-14, 0x1.cp-22, 7},
    /* f64 */ {2.114972e-14, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.10b530b3ebcefp-3, 0, 0x1.ca1fc7fcae6d8p-5, 0, 0x1.e03ef2d065232p-7, 0, 0x1.39328b86bd654p-6},
  },
  { /* Polynomial degree 13: 1*x + 0.3333333333333*x^3 + 0.1333533363112*x^5 + 0.0536443908157*x^7 + 0.0237298151051*x^9 + 0.0040885370697*x^11 + 0.0088819821828*x^13 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {8.708782e-16, 0x1p-23, 2},
    /* f64 */ {9.811783e-17, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.111b8dd22742ep-3, 0, 0x1.b77471055b5d8p-5, 0, 0x1.84ca0ef4430bcp-6, 0, 0x1.0bf24500aed56p-8, 0, 0x1.230b777fd2e74p-7},
  },
  { /* Polynomial degree 15: 1*x + 0.3333333333333*x^3 + 0.1333310727206*x^5 + 0.0540184447524*x^7 + 0.0214636154402*x^9 + 0.0104291996257*x^11 + 0.0005425877780*x^13 + 0.0041771624298*x^15 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.640290e-16, 0x1p-23, 2},
    /* f64 */ {4.783922e-19, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.110fe1a700e08p-3, 0, 0x1.ba84e3b2f2cb4p-5, 0, 0x1.5fa8ed97a733ap-6, 0, 0x1.55be77a86d698p-7, 0, 0x1.1c78e6186f79p-11, 0, 0x1.11c12806aa443p-8},
  },
  { /* Polynomial degree 17: 1*x + 0.3333333333333*x^3 + 0.1333335990792*x^5 + 0.0539607752605*x^7 + 0.0219482732499*x^9 + 0.0084489575396*x^11 + 0.0047811479038*x^13 + -0.0003964221438*x^15 + 0.0019644011129*x^17 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.633352e-16, 0x1p-23, 2},
    /* f64 */ {2.067093e-21, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.111134bc06481p-3, 0, 0x1.ba0bf2a05845cp-5, 0, 0x1.6799baf3fa13ap-6, 0, 0x1.14dafe28aa3ep-7, 0, 0x1.395659e24ab35p-8, 0, -0x1.9fadc24a3a0fp-12, 0, 0x1.017a5d128e512p-9},
  },

  /* MAE optimized */
  { /* Polynomial degree 3: 1*x + 0.4263788311384*x^3 */
    /* f16 */ {2.074242e-05, nan, 0},
    /* f32 */ {2.074255e-05, 0x1.07388p-7, 202113},
    /* f64 */ {2.074255e-05, nan, 0},
    /* p */ {0, 1, 0, 0x1.b49ca6fdc8dap-2},
  },
  { /* Polynomial degree 5: 1*x + 0.3333333333333*x^3 + 0.1729882701624*x^5 */
    /* f16 */ {5.364418e-07, nan, 0},
    /* f32 */ {4.778658e-07, 0x1.729cp-10, 23719},
    /* f64 */ {4.778654e-07, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.6247ac97837c4p-3},
  },
  { /* Polynomial degree 7: 1*x + 0.3333333333333*x^3 + 0.1248942688574*x^5 + 0.0852700341798*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.392081e-09, 0x1.1b4p-14, 2027},
    /* f64 */ {1.392078e-09, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.ff91220335136p-4, 0, 0x1.5d441c821963p-4},
  },
  { /* Polynomial degree 9: 1*x + 0.3333333333333*x^3 + 0.1348022268806*x^5 + 0.0442041742797*x^7 + 0.0410940496864*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.061830e-12, 0x1.08p-18, 130},
    /* f64 */ {5.059507e-12, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.1413309f0abefp-3, 0, 0x1.6a1edf5c17345p-5, 0, 0x1.50a477eed313fp-5},
  },
  { /* Polynomial degree 11: 1*x + 0.3333333333333*x^3 + 0.1331102964960*x^5 + 0.0562387057374*x^7 + 0.0139849100851*x^9 + 0.0195795709085*x^11 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.148175e-14, 0x1.8p-22, 9},
    /* f64 */ {2.058935e-14, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.109c2191b06b6p-3, 0, 0x1.ccb51d3d2c326p-5, 0, 0x1.ca41edba01ec2p-7, 0, 0x1.40caac2e2eed4p-6},
  },
  { /* Polynomial degree 13: 1*x + 0.3333333333333*x^3 + 0.1333639957256*x^5 + 0.0535295111756*x^7 + 0.0241602831020*x^9 + 0.0034091139002*x^11 + 0.0092681076632*x^13 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {8.571490e-16, 0x1p-23, 2},
    /* f64 */ {8.945591e-17, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.11212480d74c7p-3, 0, 0x1.b683857bd7f2bp-5, 0, 0x1.8bd792724343p-6, 0, 0x1.bed6e16b65d04p-9, 0, 0x1.2fb285a78eebap-7},
  },
  { /* Polynomial degree 15: 1*x + 0.3333333333333*x^3 + 0.1333294254963*x^5 + 0.0540426425826*x^7 + 0.0213325257993*x^9 + 0.0107639031810*x^11 + 0.0001343295731*x^13 + 0.0043692126049*x^15 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.629680e-16, 0x1p-23, 2},
    /* f64 */ {4.050970e-19, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.110f0490cf6d4p-3, 0, 0x1.bab7a2cf6afb6p-5, 0, 0x1.5d8319298a079p-6, 0, 0x1.60b62a11e832ap-7, 0, 0x1.19b5a3f2f168p-13, 0, 0x1.1e57393f577cap-8},
  },
  { /* Polynomial degree 17: 1*x + 0.3333333333333*x^3 + 0.1333338024907*x^5 + 0.0539568247371*x^7 + 0.0219776725132*x^9 + 0.0083396629140*x^11 + 0.0049980602122*x^13 + -0.0006164260367*x^15 + 0.0020541295107*x^17 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.633352e-16, 0x1p-23, 2},
    /* f64 */ {1.886373e-21, nan, 0},
    /* p */ {0, 1, 0, 0x1.5555555555555p-2, 0, 0x1.111150093094dp-3, 0, 0x1.ba03a9b489dddp-5, 0, 0x1.68150a2bebc57p-6, 0, 0x1.114629bcd6d86p-7, 0, 0x1.478d89279f8abp-8, 0, -0x1.432f4d57cd748p-11, 0, 0x1.0d3d2623dd724p-9},
  },
  { /* Padé approximant 1/0: (1.0000000000000*x)/(1) */
    /* f16 */ {5.760193e-03, nan, 0},
    /* f32 */ {5.759967e-03, 0x1.b78128p-3, 3600421},
    /* f64 */ {5.759966e-03, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0},
    /* q */ {1},
  },
  { /* Padé approximant 1/2: (1.0000000000000*x)/(1 + -0.3333333333333*x^2) */
    /* f16 */ {9.834766e-06, nan, 0},
    /* f32 */ {9.819094e-06, 0x1.72a2p-7, 189764},
    /* f64 */ {9.819087e-06, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0},
    /* q */ {1, 0, -0x1.55555555552b8p-2},
  },
  { /* Padé approximant 3/2: (1.0000000000000*x + -0.0666666666755*x^3)/(1 + -0.4000000000088*x^2) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.593063e-09, 0x1.bd8p-13, 3564},
    /* f64 */ {2.593019e-09, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, -0x1.11111111ac014p-4},
    /* q */ {1, 0, -0x1.99999999c02bbp-2},
  },
  { /* Padé approximant 3/4: (1.0000000000000*x + -0.0952380903340*x^3)/(1 + -0.4285714236673*x^2 + 0.0095238078862*x^4) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.114650e-13, 0x1.3p-19, 38},
    /* f64 */ {2.109280e-13, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, -0x1.8618603515eb8p-4},
    /* q */ {1, 0, -0x1.b6db6d629aa63p-2, 0, 0x1.38137db3c4f4cp-7},
  },
  { /* Padé approximant 5/4: (1.0000000000000*x + -0.1111147495105*x^3 + 0.0010584439452*x^5)/(1 + -0.4444480828438*x^2 + 0.0158744715569*x^4) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.208108e-16, 0x1.8p-23, 3},
    /* f64 */ {6.573432e-18, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, -0x1.c72042740326p-4, 0, 0x1.1576f88491ap-10},
    /* q */ {1, 0, -0x1.c71d65f255f4dp-2, 0, 0x1.04165c0b67d79p-6},
  },
  { /* Padé approximant 5/6: (1.0000000000000*x + -0.1181359178050*x^3 + 0.0017271266055*x^5)/(1 + -0.4514692511383*x^2 + 0.0188835436487*x^4 + -0.0000668682580*x^6) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.154536e-16, 0x1.8p-23, 3},
    /* f64 */ {5.251302e-19, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, -0x1.e3e27cf74924cp-4, 0, 0x1.c4c18125a7d8p-10},
    /* q */ {1, 0, -0x1.ce4df49327748p-2, 0, 0x1.35635299d689ep-6, 0, -0x1.18773ecaec6dep-14},
  },
  { /* Padé approximant 7/6: (1.0000000000000*x + -4.1013957356444*x^3 + 0.4443260434999*x^5 + -0.0042160572365*x^7)/(1 + -4.4347290689777*x^2 + 1.7892357331561*x^4 + -0.0632990129400*x^6) */
    /* f16 */ {1.490116e-06, nan, 0},
    /* f32 */ {5.356191e-09, 0x1.2fe902p-2, 9168478},
    /* f64 */ {3.103925e-14, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, -0x1.067d448a22fbcp+2, 0, 0x1.c6fd68065f828p-2, 0, -0x1.144db3f2eb2p-8},
    /* q */ {1, 0, -0x1.1bd299df784dfp+2, 0, 0x1.ca0b5a5ebd6fdp+0, 0, -0x1.0345d3672539p-4},
  },
  { /* Padé approximant 7/8: (1.0000000000000*x + 6.2306897472110*x^3 + -0.7762643578586*x^5 + 0.0136287624916*x^7)/(1 + 5.8973564138777*x^2 + -2.8753831624872*x^4 + 0.1318073742582*x^6 + -0.0006908885575*x^8) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.134047e-15, 0x1.4p-22, 5},
    /* f64 */ {3.417897e-20, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, 0x1.8ec39eedf2ca1p+2, 0, -0x1.8d72859c1b28ep-1, 0, 0x1.be965897e02cp-7},
    /* q */ {1, 0, 0x1.796e49989d769p+2, 0, -0x1.700c8e332cf9fp+1, 0, 0x1.0df1064e7c868p-3, 0, -0x1.6a397e13a1049p-11},
  },
  { /* Padé approximant 9/8: (1.0000000000000*x + 5.1502387390740*x^3 + 3.6550927993753*x^5 + -0.4664437591369*x^7 + 0.0045552432914*x^9)/(1 + 4.8169054057407*x^2 + 1.9161243307924*x^4 + -1.8013741773752*x^6 + 0.0677005937859*x^8) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.066064e-15, 0x1.4p-22, 5},
    /* f64 */ {1.852388e-19, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, 0x1.499d82f1ba8f4p+2, 0, 0x1.d3da14b294c0fp+1, 0, -0x1.dda36ecbaa6dep-2, 0, 0x1.2a884cf648ap-8},
    /* q */ {1, 0, 0x1.34482d9c653bep+2, 0, 0x1.ea871fc7d2b87p+0, 0, -0x1.cd26dbabaf82ap+0, 0, 0x1.154d37c3aea89p-4},
  },
  { /* Padé approximant 9/10: (1.0000000000000*x + 7.6977307028862*x^3 + 19.5277248593520*x^5 + -2.4439709725710*x^7 + 0.0392744062156*x^9)/(1 + 7.3643973695529*x^2 + 16.9395924028317*x^4 + -9.1263896766709*x^6 + 0.4034788204796*x^8 + -0.0017600330481*x^10) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.111773e-15, 0x1.4p-22, 5},
    /* f64 */ {7.849896e-21, nan, 0},
    /* p */ {0, 0x1.0000000000008p+0, 0, 0x1.eca79ead93eedp+2, 0, 0x1.38718f9f433f9p+4, 0, -0x1.38d40a73c86c8p+1, 0, 0x1.41bc66488302p-5},
    /* q */ {1, 0, 0x1.d75249583e9b2p+2, 0, 0x1.0f08920b1bb6ep+4, 0, -0x1.240b625cfb508p+3, 0, 0x1.9d298d4a5ac8ap-2, 0, -0x1.cd61d1869d334p-10},
  },
};

const std::vector<Approximation> table_exp = {
  /* MULPE optimized (with fixed x⁰ and x¹ coefficients 1 and 1). */
  { /* Polynomial degree 1: 1 + 1*x */
    /* f16 */ {1.733398e-02, nan, 0},
    /* f32 */ {1.734092e-02, 0x1.3a3798p-2, 2574067},
    /* f64 */ {1.734092e-02, nan, 0},
    /* p */ {1, 1},
  },
  { /* Polynomial degree 2: 1 + 1*x + 0.6223560199204*x^2 */
    /* f16 */ {2.568960e-05, nan, 0},
    /* f32 */ {2.541555e-05, 0x1.00e7p-7, 65767},
    /* f64 */ {2.541555e-05, nan, 0},
    /* p */ {1, 1, 0x1.3ea572c00dbfdp-1},
  },
  { /* Polynomial degree 3: 1 + 1*x + 0.4853171409836*x^2 + 0.2205008971767*x^3 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.821793e-08, 0x1.04ap-12, 2085},
    /* f64 */ {2.821792e-08, nan, 0},
    /* p */ {1, 1, 0x1.f0f6fa02da0c1p-2, 0x1.c395f970e6989p-3},
  },
  { /* Polynomial degree 4: 1 + 1*x + 0.5011300831977*x^2 + 0.1591955232955*x^3 + 0.0565775689998*x^4 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.474795e-11, 0x1.fp-18, 62},
    /* f64 */ {2.474214e-11, nan, 0},
    /* p */ {1, 1, 0x1.00941f4cc0849p-1, 0x1.46084d71ca91bp-3, 0x1.cf7bc311538a9p-5},
  },
  { /* Polynomial degree 5: 1 + 1*x + 0.4999369240642*x^2 + 0.1673102940995*x^3 + 0.0394343328849*x^4 + 0.0114694942676*x^5 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.088456e-14, 0x1.8p-22, 3},
    /* f64 */ {1.672773e-14, nan, 0},
    /* p */ {1, 1, 0x1.ffef770bac6e3p-2, 0x1.56a6c78b8853ap-3, 0x1.430bca4291d4cp-5, 0x1.77d51763fbffcp-7},
  },
  { /* Polynomial degree 6: 1 + 1*x + 0.5000027402101*x^2 + 0.1666270771074*x^3 + 0.0418725662138*x^4 + 0.0078418729417*x^5 + 0.0019267635558*x^6 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {4.149499e-15, 0x1p-22, 2},
    /* f64 */ {8.817839e-18, nan, 0},
    /* p */ {1, 1, 0x1.00005bf239d0bp-1, 0x1.554093b66f7a3p-3, 0x1.570522cf9b804p-5, 0x1.00f665e9718a4p-7, 0x1.f916e9d65864p-10},
  },
  { /* Polynomial degree 7: 1 + 1*x + 0.4999999029948*x^2 + 0.1666685430396*x^3 + 0.0416531639228*x^4 + 0.0083807700778*x^5 + 0.0013020226861*x^6 + 0.0002766361124*x^7 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {4.150069e-15, 0x1p-22, 2},
    /* f64 */ {3.693457e-21, nan, 0},
    /* p */ {1, 1, 0x1.fffff97d7670cp-2, 0x1.5556512d04ap-3, 0x1.5539041a5907ep-5, 0x1.129efeb32668p-7, 0x1.5551436c2edap-10, 0x1.2212f0e47e7p-12},
  },
  { /* Polynomial degree 8: 1 + 1*x + 0.5000000028893*x^2 + 0.1666665947501*x^3 + 0.0416673466895*x^4 + 0.0083300785933*x^5 + 0.0013975476366*x^6 + 0.0001855101066*x^7 + 0.0000346961584*x^8 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {4.150151e-15, 0x1p-22, 2},
    /* f64 */ {1.252916e-24, nan, 0},
    /* p */ {1, 1, 0x1.00000018d195p-1, 0x1.55554bae4c515p-3, 0x1.5556c26af522ap-5, 0x1.10f5c390cfcfcp-7, 0x1.6e5bd5934d42p-10, 0x1.850afae758c8p-13, 0x1.230d6ecd45ep-15},
  },

  /* MULPE optimized (with free x⁰ and x¹ coefficients). */
  { /* Polynomial degree 1: 0.9569413394686 + 1.4426555918033*x */
    /* f16 */ {8.625984e-04, nan, 0},
    /* f32 */ {8.622903e-04, 0x1.60bc8p-4, 722404},
    /* f64 */ {8.622903e-04, nan, 0},
    /* p */ {0x1.e9f4371a6a87fp-1, 0x1.7151e07a2fcd4p+0},
  },
  { /* Polynomial degree 2: 1.0024776535843 + 0.9392656456982*x + 0.7159748614258*x^2 */
    /* f16 */ {3.159046e-06, nan, 0},
    /* f32 */ {2.974522e-06, 0x1.44cp-8, 20810},
    /* f64 */ {2.974522e-06, nan, 0},
    /* p */ {0x1.00a260211d7c5p+0, 0x1.e0e76d3d0f548p-1, 0x1.6e9441cd2a0b9p-1},
  },
  { /* Polynomial degree 3: 0.9998929013626 + 1.0047753222249*x + 0.4669349116667*x^2 + 0.2378271550308*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {5.631534e-09, 0x1.c14p-13, 1797},
    /* f64 */ {5.631515e-09, nan, 0},
    /* p */ {0x1.fff1f65db5bcdp-1, 0x1.0138f49cc8af9p+0, 0x1.de242f7be02edp-2, 0x1.e711ec67aa685p-3},
  },
  { /* Polynomial degree 4: 1.0000037061635 + 0.9997388156740*x + 0.5029382866971*x^2 + 0.1552163880300*x^3 + 0.0593381804271*x^4 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {6.788475e-12, 0x1.fp-18, 33},
    /* f64 */ {6.785291e-12, nan, 0},
    /* p */ {0x1.00003e2dd9cffp+0, 0x1.ffddc41bb9088p-1, 0x1.0181208a8a6c4p-1, 0x1.3de216f323079p-3, 0x1.e6192f0ad6544p-5},
  },
  { /* Polynomial degree 5: 0.9999998930669 + 1.0000109224802*x + 0.4998193828058*x^2 + 0.1677538797281*x^3 + 0.0387416220615*x^4 + 0.0118523976086*x^5 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {8.389835e-15, 0x1.8p-22, 3},
    /* f64 */ {5.666366e-15, nan, 0},
    /* p */ {0x1.fffffc6973b3p-1, 0x1.0000b73fb205cp+0, 0x1.ffd0a6fc3b671p-2, 0x1.578f5899ac7a7p-3, 0x1.3d5f11f7f1f6p-5, 0x1.84611e0ddda1p-7},
  },
  { /* Polynomial degree 6: 1.0000000026452 + 0.9999996307328*x + 0.5000084135449*x^2 + 0.1665949531374*x^3 + 0.0419562013009*x^4 + 0.0077401396566*x^5 + 0.0019736405951*x^6 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.508406e-15, 0x1p-22, 2},
    /* f64 */ {3.474184e-18, nan, 0},
    /* p */ {0x1.0000000b5c6acp+0, 0x1.fffff39c04e8cp-1, 0x1.00011a4fccf68p-1, 0x1.552fbc1b3ae58p-3, 0x1.57b4880e7483p-5, 0x1.fb41feb0fcbep-8, 0x1.02b0639ea63p-9},
  },
  { /* Polynomial degree 7: 0.9999999999428 + 1.0000000104689*x + 0.4999996859800*x^2 + 0.1666702499783*x^3 + 0.0416466445366*x^4 + 0.0083937492428*x^5 + 0.0012890626959*x^6 + 0.0002817637138*x^7 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.481057e-15, 0x1p-22, 2},
    /* f64 */ {1.630160e-21, nan, 0},
    /* p */ {0x1.ffffffff821cep-1, 0x1.0000002cf6b22p+0, 0x1.ffffeaed2d679p-2, 0x1.55573646fc39p-3, 0x1.552b5808bbfc4p-5, 0x1.130bdf3e86aa8p-7, 0x1.51eb887c178cp-10, 0x1.27735efa4c48p-12},
  },
  { /* Polynomial degree 8: 1.0000000000011 + 0.9999999997445*x + 0.5000000097516*x^2 + 0.1666665234881*x^3 + 0.0416677179237*x^4 + 0.0083290108300*x^5 + 0.0013992701965*x^6 + 0.0001840495283*x^7 + 0.0000352028974*x^8 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.479755e-15, 0x1p-22, 2},
    /* f64 */ {6.040824e-25, nan, 0},
    /* p */ {0x1.0000000001362p+0, 0x1.fffffffdce35ap-1, 0x1.00000053c3fe5p-1, 0x1.5555421dc168cp-3, 0x1.555789b9013d4p-5, 0x1.10ecce8fb5828p-7, 0x1.6ecf6eeddcb4p-10, 0x1.81fad68cbap-13, 0x1.274da5840e8p-15},
  },

  /* MAE optimized */
  { /* Polynomial degree 1: 0.9569349019734 + 1.4426907049938*x */
    /* f16 */ {8.625984e-04, nan, 0},
    /* f32 */ {8.624856e-04, 0x1.60cap-4, 722512},
    /* f64 */ {8.624856e-04, nan, 0},
    /* p */ {0x1.e9f35f18c0e4ep-1, 0x1.71542d9431049p+0},
  },
  { /* Polynomial degree 2: 1.0024781789634 + 0.9392568082868*x + 0.7159916207610*x^2 */
    /* f16 */ {3.159046e-06, nan, 0},
    /* f32 */ {2.975584e-06, 0x1.44dp-8, 20790},
    /* f64 */ {2.975584e-06, nan, 0},
    /* p */ {0x1.00a268f19a02fp+0, 0x1.e0e644b44635ep-1, 0x1.6e967426c1dcdp-1},
  },
  { /* Polynomial degree 3: 0.9998928719302 + 1.0047763235003*x + 0.4669301460091*x^2 + 0.2378326177575*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {5.634258e-09, 0x1.c14p-13, 1797},
    /* f64 */ {5.634241e-09, nan, 0},
    /* p */ {0x1.fff1f560e32dbp-1, 0x1.013905693a8c5p+0, 0x1.de22efaa80b34p-2, 0x1.e714c99986104p-3},
  },
  { /* Polynomial degree 4: 1.0000037076339 + 0.9997387405317*x + 0.5029389182980*x^2 + 0.1552147115463*x^3 + 0.0593395501801*x^4 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {6.792436e-12, 0x1.fp-18, 33},
    /* f64 */ {6.789357e-12, nan, 0},
    /* p */ {0x1.00003e342a9b7p+0, 0x1.ffddc19641826p-1, 0x1.018135bbf36fp-1, 0x1.3de135ef98a3ap-3, 0x1.e61c0e6c40b1p-5},
  },
  { /* Polynomial degree 5: 0.9999998930225 + 1.0000109262828*x + 0.4998193319356*x^2 + 0.1677541135013*x^3 + 0.0387411899364*x^4 + 0.0118526739354*x^5 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {8.393172e-15, 0x1.8p-22, 3},
    /* f64 */ {5.670680e-15, nan, 0},
    /* p */ {0x1.fffffc6911eb4p-1, 0x1.0000b750070a6p+0, 0x1.ffd0a392499cp-2, 0x1.578f77fa0f232p-3, 0x1.3d5e29f91eddp-5, 0x1.84636f761fea8p-7},
  },
  { /* Polynomial degree 6: 1.0000000026464 + 0.9999996305902*x + 0.5000084162730*x^2 + 0.1665949343207*x^3 + 0.0419562592931*x^4 + 0.0077400580541*x^5 + 0.0019736833172*x^6 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.508406e-15, 0x1p-22, 2},
    /* f64 */ {3.477070e-18, nan, 0},
    /* p */ {0x1.0000000b5db98p+0, 0x1.fffff39acb516p-1, 0x1.00011a673c029p-1, 0x1.552fb994b1c33p-3, 0x1.57b4a730d6cecp-5, 0x1.fb40a0361f57p-8, 0x1.02b1d2998fdep-9},
  },
  { /* Polynomial degree 7: 0.9999999999427 + 1.0000000104743*x + 0.4999996858451*x^2 + 0.1666702512492*x^3 + 0.0416466388425*x^4 + 0.0083937622842*x^5 + 0.0012890479542*x^6 + 0.0002817702305*x^7 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.481057e-15, 0x1p-22, 2},
    /* f64 */ {1.631757e-21, nan, 0},
    /* p */ {0x1.ffffffff82033p-1, 0x1.0000002cfcaa5p+0, 0x1.ffffeaeadc356p-2, 0x1.55573672a6bd9p-3, 0x1.552b54fa241fp-5, 0x1.130bfb401ea58p-7, 0x1.51ea8b39d3ap-10, 0x1.27751eccfccp-12},
  },
  { /* Polynomial degree 8: 1.0000000000011 + 0.9999999997443*x + 0.5000000097573*x^2 + 0.1666665234249*x^3 + 0.0416677182912*x^4 + 0.0083290096272*x^5 + 0.0013992724148*x^6 + 0.0001840473866*x^7 + 0.0000352037366*x^8 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.479755e-15, 0x1p-22, 2},
    /* f64 */ {6.048914e-25, nan, 0},
    /* p */ {0x1.000000000137p+0, 0x1.fffffffdcdb4cp-1, 0x1.00000053d092fp-1, 0x1.5555421b95344p-3, 0x1.555789eb8166cp-5, 0x1.10eccbfa7e2f8p-7, 0x1.6ecf950a178cp-10, 0x1.81f9b033357p-13, 0x1.274f72e3072p-15},
  },


};

const std::vector<Approximation> table_log = {
  /* MAE optimized */
  { /* Polynomial degree 2: 1.0216308552414*x + -0.4403990932151*x^2 */
    /* f16 */ {7.867813e-06, nan, 0},
    /* f32 */ {7.878410e-06, 0x1.37438p-8, 8388608},
    /* f64 */ {7.878410e-06, nan, 0},
    /* p */ {0, 0x1.05899987d8a2ap+0, -0x1.c2f7fada2fdb6p-2},
  },
  { /* Polynomial degree 3: 1.0040214722126*x + -0.5136964133683*x^2 + 0.2591928032976*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {9.896164e-08, 0x1.110cp-11, 73207},
    /* f64 */ {9.896161e-08, nan, 0},
    /* p */ {0, 0x1.01078d1ba287ep+0, -0x1.0703375efa97cp-1, 0x1.0969d696163f8p-2},
  },
  { /* Polynomial degree 4: 0.9998652283457*x + -0.5047999557955*x^2 + 0.3441160308133*x^3 + -0.1817745258468*x^4 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {2.643775e-09, 0x1.4b2p-14, 8548},
    /* f64 */ {2.643777e-09, nan, 0},
    /* p */ {0, 0x1.ffee55d04e0cep-1, -0x1.027523ca53ef9p-1, 0x1.605ff3e97d5a2p-2, -0x1.744633de10743p-3},
  },
  { /* Polynomial degree 5: 0.9998612309049*x + -0.5000937098240*x^2 + 0.3403163254845*x^3 + -0.2574492110521*x^4 + 0.1317782322142*x^5 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.768703e-11, 0x1.34p-17, 2343},
    /* f64 */ {3.768704e-11, nan, 0},
    /* p */ {0, 0x1.ffedcfae8cbe3p-1, -0x1.000c486142559p-1, 0x1.5c7be20100fefp-2, -0x1.07a0c41766617p-2, 0x1.0de1beed7aa52p-3},
  },
  { /* Polynomial degree 6: 0.9999906843079*x + -0.4998246784565*x^2 + 0.3338515052232*x^3 + -0.2572050802543*x^4 + 0.2028994357215*x^5 + -0.1006273752406*x^6 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.004252e-12, 0x1.a8p-20, 269},
    /* f64 */ {1.004152e-12, nan, 0},
    /* p */ {0, 0x1.fffec76ad05eep-1, -0x1.ffd20a5ed176p-2, 0x1.55dd2b429d8a6p-2, -0x1.0760c4c03a6f4p-2, 0x1.9f89bd46676d4p-3, -0x1.9c2b735bda8dp-4},
  },
  { /* Polynomial degree 7: 1.0000023509926*x + -0.4999735666682*x^2 + 0.3330719266418*x^3 + -0.2509260507703*x^4 + 0.2077813489980*x^5 + -0.1668409326671*x^6 + 0.0793795828465*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {2.143405e-14, 0x1.4p-22, 52},
    /* f64 */ {2.135113e-14, nan, 0},
    /* p */ {0, 0x1.000027716fa5ap+0, -0x1.fff91216d16d9p-2, 0x1.5510cea09179ep-2, -0x1.00f2c23717672p-2, 0x1.a9894495528ebp-3, -0x1.55b0b2eb83888p-3, 0x1.45238684baef7p-4},
  },
  { /* Polynomial degree 8: 1.0000005963608*x + -0.5000031857881*x^2 + 0.3332664991847*x^3 + -0.2497140015398*x^4 + 0.2015717363986*x^5 + -0.1746322844830*x^6 + 0.1395143556710*x^7 + -0.0629901703640*x^8 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {5.171050e-16, 0x1p-23, 12},
    /* f64 */ {4.352149e-16, nan, 0},
    /* p */ {0, 0x1.00000a0159ad5p+0, -0x1.00006ae5b6204p-1, 0x1.5543d02b670d2p-2, -0x1.ff6a0defbbaddp-3, 0x1.9cd1a47d0a30cp-3, -0x1.65a59c7570f71p-3, 0x1.1db9b3d76f239p-3, -0x1.0201fb1aec5dfp-4},
  },
  { /* Polynomial degree 9: 0.9999999933992*x + -0.5000013121144*x^2 + 0.3333358313586*x^3 + -0.2499001505031*x^4 + 0.1997395364835*x^5 + -0.1686874562823*x^6 + 0.1504963368882*x^7 + -0.1191501560897*x^8 + 0.0516012771696*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {8.999421e-17, 0x1.8p-24, 3},
    /* f64 */ {1.240326e-17, nan, 0},
    /* p */ {0, 0x1.ffffffc74cacfp-1, -0x1.00002c06fa2ccp-1, 0x1.5555fcf9146fp-2, -0x1.ffcba66d68b24p-3, 0x1.99110ac7518e8p-3, -0x1.5978cf1fd263ap-3, 0x1.34376c68d221fp-3, -0x1.e809fe7b7ec12p-4, 0x1.a6b7b8bc0117cp-5},
  },

  /* MULPE optimized: */
  { /* Polynomial degree 2: 1.0135046407108*x + -0.4395631784420*x^2 */
    /* f16 */ {7.271767e-06, nan, 0},
    /* f32 */ {7.253393e-06, 0x1.19eccp-7, 8388608},
    /* f64 */ {7.253393e-06, nan, 0},
    /* p */ {0, 0x1.03750a46327f4p+0, -0x1.c21cd98fbcb02p-2},
  },
  { /* Polynomial degree 3: 1.0018919699421*x + -0.5110780009681*x^2 + 0.2670578418988*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.341201e-07, 0x1.1ec6p-10, 36721},
    /* f64 */ {1.341201e-07, nan, 0},
    /* p */ {0, 0x1.007bfdfd06c02p+0, -0x1.05ac0407b9ef6p-1, 0x1.11779c6461eeap-2},
  },
  { /* Polynomial degree 4: 0.9999053089925*x + -0.5033293269317*x^2 + 0.3437968778800*x^3 + -0.1883202449166*x^4 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.791202e-09, 0x1.262p-13, 4711},
    /* f64 */ {3.791206e-09, nan, 0},
    /* p */ {0, 0x1.fff396b27082cp-1, -0x1.01b461ac94154p-1, 0x1.600c49ebd890ap-2, -0x1.81ae0b68bb5f4p-3},
  },
  { /* Polynomial degree 5: 0.9999594838019*x + -0.5000166611404*x^2 + 0.3381673240544*x^3 + -0.2567923837186*x^4 + 0.1372263861599*x^5 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.870449e-11, 0x1.538p-16, 681},
    /* f64 */ {6.870326e-11, nan, 0},
    /* p */ {0, 0x1.fffab08082241p-1, -0x1.00022f0e1b2bfp-1, 0x1.5a4888f58ef5p-2, -0x1.06f49527bb871p-2, 0x1.190a25c5a3bbdp-3},
  },
  { /* Polynomial degree 6: 0.9999976829142*x + -0.4998918964042*x^2 + 0.3335934897896*x^3 + -0.2558015431719*x^4 + 0.2037064016563*x^5 + -0.1050482978013*x^6 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.448225e-12, 0x1.b4p-19, 110},
    /* f64 */ {1.448188e-12, nan, 0},
    /* p */ {0, 0x1.ffffb2406256ep-1, -0x1.ffe3a94a5dd7fp-2, 0x1.5599882338448p-2, -0x1.05f0d6f8c251ep-2, 0x1.a130d268cc1b9p-3, -0x1.ae471fb8e96a9p-4},
  },
  { /* Polynomial degree 7: 1.0000007882122*x + -0.4999903679258*x^2 + 0.3331502379161*x^3 + -0.2504928025653*x^4 + 0.2065596747862*x^5 + -0.1687907030490*x^6 + 0.0841148842395*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {4.060637e-14, 0x1.2p-21, 18},
    /* f64 */ {4.051390e-14, nan, 0},
    /* p */ {0, 0x1.00000d395885cp+0, -0x1.fffd799a39d02p-2, 0x1.552556020477ep-2, -0x1.00812f6b9b29cp-2, 0x1.a708c23f085d2p-3, -0x1.59aef0abb6b1dp-3, 0x1.5888d94ea65c4p-4},
  },
  { /* Polynomial degree 8: 1.0000001247350*x + -0.5000018429448*x^2 + 0.3332997952365*x^3 + -0.2497806739153*x^4 + 0.2010397332111*x^5 + -0.1735429790276*x^6 + 0.1413103402634*x^7 + -0.0667178963294*x^8 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {9.385329e-16, 0x1.4p-23, 5},
    /* f64 */ {8.529045e-16, nan, 0},
    /* p */ {0, 0x1.00000217bb97dp+0, -0x1.00003dd6c661cp-1, 0x1.554c8aa137753p-2, -0x1.ff8d028d1cbe3p-3, 0x1.9bbab83ab4f41p-3, -0x1.636a805afd7a2p-3, 0x1.216750d02529dp-3, -0x1.1146c8ecae1fbp-4},
  },
  { /* Polynomial degree 9: 0.9999999934829*x + -0.5000005686764*x^2 + 0.3333359657656*x^3 + -0.2499362239022*x^4 + 0.1997623172316*x^5 + -0.1681922420328*x^6 + 0.1498525603875*x^7 + -0.1208399185246*x^8 + 0.0542830142049*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.003515e-16, 0x1.8p-24, 3},
    /* f64 */ {1.930021e-17, nan, 0},
    /* p */ {0, 0x1.ffffffc804d31p-1, -0x1.00001314e4b25p-1, 0x1.555605fe2d132p-2, -0x1.ffde901df6dep-3, 0x1.991cfc5bdcbdcp-3, -0x1.58752c97c6047p-3, 0x1.32e5e630b0701p-3, -0x1.eef5d6a1d578ap-4, 0x1.bcafbb57a185fp-5},
  },
};

// clang-format on

const Approximation *find_best_approximation(const char *name, const std::vector<Approximation> &table,
                                             ApproximationPrecision precision, Type type) {
    // We will find the approximation that is as fast as possible, while satisfying the constraints.
    // Speed is determined by the number of terms. There might be more than one approximation that has
    // a certain number of terms, but is optimized for a different loss.
    // We will try to select the approximation that scores best on the metric the user wants to minimize.

    Approximation::Metrics Approximation::*metrics_ptr = nullptr;
    if (type == Float(16)) {
        metrics_ptr = &Approximation::metrics_f16;
    } else if (type == Float(32)) {
        metrics_ptr = &Approximation::metrics_f32;
    } else if (type == Float(64)) {
        metrics_ptr = &Approximation::metrics_f64;
    } else {
        internal_error << "Cannot find approximation for type " << type;
    }

    if ((precision.force_halide_polynomial >> 31) & 1) {
        size_t slot = precision.force_halide_polynomial & 0xfff;
        internal_assert(slot < table.size());
        return &table[slot];
    }

    const Approximation *best = nullptr;

    int force_num = precision.force_halide_polynomial;
    int force_denom = 0;
    if ((force_num >> 30) & 1) {
        force_num = force_num & 0xff;
        force_denom = (force_num >> 16) & 0xff;
    }

    for (int search_pass = 0; search_pass < 3; ++search_pass) {
        // Search pass 0 attempts to satisfy everything.
        // Pass 1 will ignore the metrics.
        // Pass 2 will also ignore the number of terms.
        best = nullptr;
        for (size_t i = 0; i < table.size(); ++i) {
            const Approximation &e = table[i];

            int num_num = 0;
            int num_denom = 0;
            for (double c : e.p) {
                num_num += c != 0.0;
            }
            for (double c : e.q) {
                num_denom += c != 0.0;
            }

            int num_constraints = 0;
            int num_constraints_satisfied = 0;

            num_constraints++;
            if (num_num >= force_num) {
                num_constraints_satisfied++;
            }
            num_constraints++;
            if (num_denom >= force_denom) {
                num_constraints_satisfied++;
            }

            const Approximation::Metrics &metrics = e.*metrics_ptr;

            // Check if precision is satisfactory.
            if (precision.constraint_max_absolute_error != 0) {
                num_constraints++;
                if (metrics.mae <= precision.constraint_max_absolute_error) {
                    num_constraints_satisfied++;
                }
            }
            if (precision.constraint_max_ulp_error != 0) {
                num_constraints++;
                if (metrics.mulpe <= precision.constraint_max_ulp_error) {
                    num_constraints_satisfied++;
                }
            }

            if (num_constraints_satisfied + search_pass >= num_constraints) {
                if (best == nullptr) {
                    debug(4) << "first best = " << i << "\n";
                    best = &e;
                } else {
                    // Figure out if we found better for the same number of terms (or less).
                    if (best->p.size() + best->q.size() >= e.p.size() + e.q.size()) {
                        const Approximation::Metrics &best_metrics = best->*metrics_ptr;
                        if (precision.optimized_for == OO::MULPE) {
                            if (best_metrics.mulpe > metrics.mulpe) {
                                debug(4) << "better mulpe best = " << i << "\n";
                                best = &e;
                            }
                        } else if (precision.optimized_for == OO::MAE) {
                            if (best_metrics.mae > metrics.mae) {
                                debug(4) << "better mae best = " << i << "\n";
                                best = &e;
                            }
                        }
                    }
                }
            }
        }

        if (best) {
            if (search_pass == 0) {
                return best;
            } else {
                // Report warning below and return it.
                break;
            }
        }
    }

    if (!best) {
        best = &table.back();
    }
    const Approximation::Metrics &best_metrics = best->*metrics_ptr;

    auto warn = user_warning;
    warn << "Could not find an approximation for fast_" << name << " that satisfies constraints:";
    if (precision.force_halide_polynomial > int(best->p.size())) {
        warn << " [NumTerms " << best->p.size() << " < requested " << precision.force_halide_polynomial << "]";
    }
    if (precision.constraint_max_absolute_error > 0.0 && best_metrics.mae > precision.constraint_max_absolute_error) {
        warn << " [MAE " << best_metrics.mae << " > requested " << precision.constraint_max_absolute_error << "]";
    }
    if (precision.constraint_max_ulp_error > 0.0 && best_metrics.mulpe > precision.constraint_max_ulp_error) {
        warn << " [MULPE " << best_metrics.mulpe << " > requested " << precision.constraint_max_ulp_error << "]";
    }
    return best;
}

const Approximation *best_atan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("atan", table_atan, precision, type);
}

const Approximation *best_sin_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("sin", table_sin, precision, type);
}

const Approximation *best_cos_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("cos", table_cos, precision, type);
}

const Approximation *best_tan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("tan", table_tan, precision, type);
}

const Approximation *best_exp_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("exp", table_exp, precision, type);
}

const Approximation *best_log_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("log", table_log, precision, type);
}

}  // namespace ApproximationTables
}  // namespace Internal
}  // namespace Halide
