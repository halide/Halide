#include "ApproximationTables.h"

namespace Halide {
namespace Internal {

namespace ApproximationTables {

using OO = ApproximationPrecision::OptimizationObjective;

constexpr double nan = std::numeric_limits<double>::quiet_NaN();

// clang-format off
// Generate this table with:
//   python3 tools/polynomial_optimizer.py atan --order 1 2 3 4 5 6 7 8 --loss mulpe --formula
const std::vector<Approximation> table_atan = {
  { /* Polynomial degree 1: 0.8925007504445*x */
    /* f16 */ {1.364708e-03, nan, 0},
    /* f32 */ {1.364275e-03, 0x1.b6b1p-4, 1803538},
    /* f64 */ {1.364275e-03, nan, 0},
    /* p */ {0, 0x1.c8f5dbbep-1},
  },
  { /* Polynomial degree 3: 0.9891527115034*x + -0.2145409767037*x^3 */
    /* f16 */ {2.110004e-05, nan, 0},
    /* f32 */ {2.104596e-05, 0x1.6173p-7, 181987},
    /* f64 */ {2.104596e-05, nan, 0},
    /* p */ {0, 0x1.fa723965p-1, 0, -0x1.b7614275p-3},
  },
  { /* Polynomial degree 5: 0.9986736793399*x + -0.3030243250734*x^3 + 0.0910641654911*x^5 */
    /* f16 */ {4.172325e-07, nan, 0},
    /* f32 */ {3.587571e-07, 0x1.58d0p-10, 22252},
    /* f64 */ {3.587570e-07, nan, 0},
    /* p */ {0, 0x1.ff522810p-1, 0, -0x1.364c0238p-2, 0, 0x1.74ffb2cap-4},
  },
  { /* Polynomial degree 7: 0.9998432381246*x + -0.3262808917256*x^3 + 0.1563093203417*x^5 + -0.0446281507093*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {6.491497e-09, 0x1.4460p-13, 2630},
    /* f64 */ {6.491491e-09, nan, 0},
    /* p */ {0, 0x1.ffeb73f2p-1, 0, -0x1.4e1c93fdp-2, 0, 0x1.401f19d7p-3, 0, -0x1.6d9803f9p-5},
  },
  { /* Polynomial degree 9: 0.9999742662159*x + -0.3318277126482*x^3 + 0.1859045046114*x^5 + -0.0930301292365*x^7 + 0.0244025888439*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.320254e-10, 0x1.ab00p-16, 432},
    /* f64 */ {1.320258e-10, nan, 0},
    /* p */ {0, 0x1.fffca084p-1, 0, -0x1.53caa4d7p-2, 0, 0x1.7cbb803cp-3, 0, -0x1.7d0d292ap-4, 0, 0x1.8fcfe041p-6},
  },
  { /* Polynomial degree 11: 0.9999964140662*x + -0.3330371993915*x^3 + 0.1959643323456*x^5 + -0.1220797388097*x^7 + 0.0583514228469*x^9 + -0.0138005959295*x^11 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.017319e-12, 0x1.e800p-19, 61},
    /* f64 */ {3.017097e-12, nan, 0},
    /* p */ {0, 0x1.ffff87adp-1, 0, -0x1.5507b41fp-2, 0, 0x1.9155bf75p-3, 0, -0x1.f409e25bp-4, 0, 0x1.de03cd9ap-5, 0, -0x1.c437ca17p-7},
  },
  { /* Polynomial degree 13: 0.9999995026893*x + -0.3332735151572*x^3 + 0.1988964132523*x^5 + -0.1351575350457*x^7 + 0.0843254207788*x^9 + -0.0373493786528*x^11 + 0.0079577436644*x^13 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.399394e-14, 0x1.4000p-21, 10},
    /* f64 */ {6.355124e-14, nan, 0},
    /* p */ {0, 0x1.ffffef50p-1, 0, -0x1.5545a701p-2, 0, 0x1.975700b2p-3, 0, -0x1.14cd7947p-3, 0, 0x1.59659cc7p-4, 0, -0x1.31f752fbp-5, 0, 0x1.04c26465p-7},
  },
  { /* Polynomial degree 15: 0.9999999226221*x + -0.3333208643812*x^3 + 0.1997088467321*x^5 + -0.1402584596538*x^7 + 0.0993128573944*x^9 + -0.0597183157903*x^11 + 0.0244085869774*x^13 + -0.0047344862767*x^15 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.774935e-15, 0x1.0000p-22, 3},
    /* f64 */ {1.371986e-15, nan, 0},
    /* p */ {0, 0x1.fffffd67p-1, 0, -0x1.5552108ep-2, 0, 0x1.9900f3abp-3, 0, -0x1.1f3fd3cap-3, 0, 0x1.96c91429p-4, 0, -0x1.e93662a9p-5, 0, 0x1.8fe908b4p-6, 0, -0x1.36477fb9p-8},
  },
  { /* Polynomial degree 17: 0.9999999883993*x + -0.3333309442523*x^3 + 0.1999289575140*x^5 + -0.1420533230637*x^7 + 0.1064628382635*x^9 + -0.0751361258616*x^11 + 0.0427812622785*x^13 + -0.0161132533390*x^15 + 0.0028587747946*x^17 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.933690e-16, 0x1.0000p-22, 2},
    /* f64 */ {3.129950e-17, nan, 0},
    /* p */ {0, 0x1.ffffff9cp-1, 0, -0x1.5554b501p-2, 0, 0x1.99745a70p-3, 0, -0x1.22ecda47p-3, 0, 0x1.b4126089p-4, 0, -0x1.33c1f035p-4, 0, 0x1.5e76cf4cp-5, 0, -0x1.07ffe208p-6, 0, 0x1.76b49080p-9},
  },


  { /* Polynomial degree 1: 0.8333258868924*x */
    /* f16 */ {1.099586e-03, nan, 0},
    /* f32 */ {1.099193e-03, 0x1.88a0p-5, 2796328},
    /* f64 */ {1.099193e-03, nan, 0},
    /* p */ {0, 0x1.aaa9b0cep-1},
  },
  { /* Polynomial degree 3: 0.9723991839457*x + -0.1919582540297*x^3 */
    /* f16 */ {1.209974e-05, nan, 0},
    /* f32 */ {1.210615e-05, 0x1.44e1p-8, 463065},
    /* f64 */ {1.210615e-05, nan, 0},
    /* p */ {0, 0x1.f1de4e4bp-1, 0, -0x1.892168bap-3},
  },
  { /* Polynomial degree 5: 0.9953585782797*x + -0.2886936958137*x^3 + 0.0793424783865*x^5 */
    /* f16 */ {2.384186e-07, nan, 0},
    /* f32 */ {1.840520e-07, 0x1.3f68p-11, 77870},
    /* f64 */ {1.840520e-07, nan, 0},
    /* p */ {0, 0x1.fd9fa3bbp-1, 0, -0x1.279f51f8p-2, 0, 0x1.44fc9e5ep-4},
  },
  { /* Polynomial degree 7: 0.9992138985791*x + -0.3211758739582*x^3 + 0.1462666546487*x^5 + -0.0389879615513*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.298478e-09, 0x1.5600p-14, 13189},
    /* f64 */ {3.298482e-09, nan, 0},
    /* p */ {0, 0x1.ff98f6d0p-1, 0, -0x1.48e2540cp-2, 0, 0x1.2b8dda12p-3, 0, -0x1.3f63ae7ap-5},
  },
  { /* Polynomial degree 9: 0.9998663421985*x + -0.3303050010784*x^3 + 0.1801602181228*x^5 + -0.0851577596552*x^7 + 0.0208458122131*x^9 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.526191e-11, 0x1.8400p-17, 2242},
    /* f64 */ {6.526091e-11, nan, 0},
    /* p */ {0, 0x1.ffee7b30p-1, 0, -0x1.523b7965p-2, 0, 0x1.70f7d727p-3, 0, -0x1.5cce620cp-4, 0, 0x1.5589ac6ep-6},
  },
  { /* Polynomial degree 11: 0.9999772210489*x + -0.3326228765956*x^3 + 0.1935406963478*x^5 + -0.1164273130115*x^7 + 0.0526482733623*x^9 + -0.0117195014619*x^11 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.379712e-12, 0x1.e000p-20, 382},
    /* f64 */ {1.379310e-12, nan, 0},
    /* p */ {0, 0x1.fffd03aap-1, 0, -0x1.549b1764p-2, 0, 0x1.8c5f108ap-3, 0, -0x1.dce2e2dcp-4, 0, 0x1.af4b6e89p-5, 0, -0x1.80064dc1p-7},
  },
  { /* Polynomial degree 13: 0.9999961118624*x + -0.3331736911804*x^3 + 0.1980782544424*x^5 + -0.1323338029797*x^7 + 0.0796243757853*x^9 + -0.0336048328460*x^11 + 0.0068119958930*x^13 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.095169e-14, 0x1.8000p-22, 66},
    /* f64 */ {3.056060e-14, nan, 0},
    /* p */ {0, 0x1.ffff7d89p-1, 0, -0x1.552b7beep-2, 0, 0x1.95aa0d47p-3, 0, -0x1.0f050660p-3, 0, 0x1.4624359fp-4, 0, -0x1.134a7142p-5, 0, 0x1.be6e5395p-8},
  },
  { /* Polynomial degree 15: 0.9999993356292*x + -0.3332986101098*x^3 + 0.1994656846774*x^5 + -0.1390864458974*x^7 + 0.0964223779615*x^9 + -0.0559129018186*x^11 + 0.0218633695217*x^13 + -0.0040546840704*x^15 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.146915e-15, 0x1.8000p-23, 12},
    /* f64 */ {7.015179e-16, nan, 0},
    /* p */ {0, 0x1.ffffe9b5p-1, 0, -0x1.554c3b19p-2, 0, 0x1.98817703p-3, 0, -0x1.1cd95ac4p-3, 0, 0x1.8af230ffp-4, 0, -0x1.ca09da98p-5, 0, 0x1.66359e45p-6, 0, -0x1.09ba4f7ap-8},
  },
  { /* Polynomial degree 17: 0.9999998863914*x + -0.3333259707609*x^3 + 0.1998590753365*x^5 + -0.1416123457556*x^7 + 0.1049896574862*x^9 + -0.0723489762960*x^11 + 0.0397816881508*x^13 + -0.0144016400792*x^15 + 0.0024567946843*x^17 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.702275e-16, 0x1.0000p-22, 3},
    /* f64 */ {1.655318e-17, nan, 0},
    /* p */ {0, 0x1.fffffc30p-1, 0, -0x1.5553673dp-2, 0, 0x1.994fb703p-3, 0, -0x1.2205a74ep-3, 0, 0x1.ae09a295p-4, 0, -0x1.28576671p-4, 0, 0x1.45e43f33p-5, 0, -0x1.d7e9b693p-7, 0, 0x1.420459a5p-9},
  },
};

const std::vector<Approximation> table_sin = {
  { /* Polynomial degree 3: 1*x + -0.0233937839982*x^2 + -0.1333978458043*x^3 */
    /* f16 */ {4.231930e-06, nan, 0},
    /* f32 */ {4.201336e-06, 0x1.02a9p-8, 66217},
    /* f64 */ {4.201336e-06, nan, 0},
    /* p */ {0, 1, -0x1.7f48a44dp-6, -0x1.1132e3c9p-3},
  },
  { /* Polynomial degree 4: 1*x + 0.0052092183515*x^2 + -0.1872864979765*x^3 + 0.0233008205969*x^4 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {4.939219e-08, 0x1.89e0p-12, 6302},
    /* f64 */ {4.939212e-08, nan, 0},
    /* p */ {0, 1, 0x1.55642e75p-8, -0x1.7f90103ep-3, 0x1.7dc2b99cp-6},
  },
  { /* Polynomial degree 5: 1*x + 0.0003728118021*x^2 + -0.1687397656516*x^3 + 0.0034378163019*x^4 + 0.0064177646314*x^5 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.195595e-10, 0x1.5c00p-16, 345},
    /* f64 */ {1.195597e-10, nan, 0},
    /* p */ {0, 1, 0x1.86ebe7f6p-12, -0x1.59943bf8p-3, 0x1.c299f92cp-9, 0x1.a4983935p-8},
  },
  { /* Polynomial degree 6: 1*x + -0.0000391635174*x^2 + -0.1663017765787*x^3 + -0.0010830269107*x^4 + 0.0097402806227*x^5 + -0.0008456053277*x^6 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.441571e-13, 0x1.8000p-20, 23},
    /* f64 */ {5.434192e-13, nan, 0},
    /* p */ {0, 1, -0x1.48870364p-15, -0x1.5496069dp-3, -0x1.1be8b4a6p-10, 0x1.3f2b655dp-7, -0x1.bb5739d2p-11},
  },
  { /* Polynomial degree 7: 1*x + -0.0000020293467*x^2 + -0.1666423214554*x^3 + -0.0000953697921*x^4 + 0.0085002857803*x^5 + -0.0001401268539*x^6 + -0.0001494014170*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.555547e-15, 0x1.8000p-23, 3},
    /* f64 */ {9.362702e-16, nan, 0},
    /* p */ {0, 1, -0x1.105fd24bp-19, -0x1.554891c6p-3, -0x1.900288d7p-14, 0x1.168990b7p-7, -0x1.25de0828p-13, -0x1.39514667p-13},
  },
  { /* Polynomial degree 8: 1*x + 0.0000001501590*x^2 + -0.1666690928809*x^3 + 0.0000132943067*x^4 + 0.0082986520976*x^5 + 0.0000486951923*x^6 + -0.0002364067922*x^7 + 0.0000156936419*x^8 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.794063e-16, 0x1.8000p-23, 2},
    /* f64 */ {2.336845e-18, nan, 0},
    /* p */ {0, 1, 0x1.4276c96cp-23, -0x1.55569af9p-3, 0x1.be1539a8p-17, 0x1.0fee23aep-7, 0x1.987c211ap-15, -0x1.efc7ee1fp-13, 0x1.074badb7p-16},
  },
  { /* Polynomial degree 9: 1*x + 0.0000000058323*x^2 + -0.1666667886891*x^3 + 0.0000008409554*x^4 + 0.0083305793679*x^5 + 0.0000049104356*x^6 + -0.0002033952557*x^7 + 0.0000027867772*x^8 + 0.0000020454635*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.775984e-16, 0x1.0000p-23, 2},
    /* f64 */ {2.605378e-21, nan, 0},
    /* p */ {0, 1, 0x1.90ca9be5p-28, -0x1.555565b6p-3, 0x1.c37c063ap-21, 0x1.10f9f6f9p-7, 0x1.4988a417p-18, -0x1.aa8cff16p-13, 0x1.7608efb9p-19, 0x1.1289973bp-19},
  },
  { /* Polynomial degree 10: 1*x + -0.0000000003021*x^2 + -0.1666666587651*x^3 + -0.0000000705215*x^4 + 0.0083336392692*x^5 + -0.0000007487582*x^6 + -0.0001973043338*x^7 + -0.0000010160320*x^8 + 0.0000033228617*x^9 + -0.0000001786075*x^10 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.771298e-16, 0x1.0000p-23, 2},
    /* f64 */ {4.219790e-24, nan, 0},
    /* p */ {0, 1, -0x1.4c2871cap-32, -0x1.55555446p-3, -0x1.2ee3403ep-24, 0x1.1113a20fp-7, -0x1.91fc8c3dp-21, -0x1.9dc6f527p-13, -0x1.10bd2fe1p-20, 0x1.bdfca8f5p-19, -0x1.7f8e8566p-23},
  },

  { /* Polynomial degree 2: 1.1366110631132*x + -0.3112038398032*x^2 */
    /* f16 */ {1.521111e-04, nan, 0},
    /* f32 */ {1.521013e-04, 0x1.1f0cp-6, 2016480},
    /* f64 */ {1.521012e-04, nan, 0},
    /* p */ {0, 0x1.22f8f150p+0, -0x1.3eac3829p-2},
  },
  { /* Polynomial degree 3: 1.0181010190573*x + -0.0615167021202*x^2 + -0.1158500796985*x^3 */
    /* f16 */ {1.251698e-06, nan, 0},
    /* f32 */ {1.225425e-06, 0x1.9ad0p-10, 298285},
    /* f64 */ {1.225424e-06, nan, 0},
    /* p */ {0, 0x1.04a244b5p+0, -0x1.f7f1dff8p-5, -0x1.da859cf9p-4},
  },
  { /* Polynomial degree 4: 0.9974141754579*x + 0.0167153227967*x^2 + -0.2006099769751*x^3 + 0.0278281374774*x^4 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.607782e-09, 0x1.0340p-13, 43383},
    /* f64 */ {7.607764e-09, nan, 0},
    /* p */ {0, 0x1.fead1220p-1, 0x1.11dd2530p-6, -0x1.9ad96753p-3, 0x1.c7efab18p-6},
  },
  { /* Polynomial degree 5: 0.9997847592756*x + 0.0018495318264*x^2 + -0.1717343529796*x^3 + 0.0057750648149*x^4 + 0.0057964761852*x^5 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {3.008127e-11, 0x1.0800p-17, 3611},
    /* f64 */ {3.008054e-11, nan, 0},
    /* p */ {0, 0x1.ffe3c9b8p-1, 0x1.e4d7fad4p-10, -0x1.5fb642adp-3, 0x1.7a798283p-8, 0x1.7be0bba6p-8},
  },
  { /* Polynomial degree 6: 1.0000177053715*x + -0.0002245908315*x^2 + -0.1657149185418*x^3 + -0.0018665599069*x^4 + 0.0102070333559*x^5 + -0.0009480620636*x^6 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.605934e-14, 0x1.6000p-21, 298},
    /* f64 */ {9.548779e-14, nan, 0},
    /* p */ {0, 0x1.0001290cp+0, -0x1.d70048d9p-13, -0x1.536257ddp-3, -0x1.e94eb706p-10, 0x1.4e76cd3ap-7, -0x1.f10ebc76p-11},
  },
  { /* Polynomial degree 7: 1.0000010580313*x + -0.0000167452242*x^2 + -0.1665774642401*x^3 + -0.0002229930999*x^4 + 0.0086252323498*x^5 + -0.0001997574663*x^6 + -0.0001383333524*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.631155e-16, 0x1.8000p-23, 19},
    /* f64 */ {2.199563e-16, nan, 0},
    /* p */ {0, 0x1.000011c0p+0, -0x1.18f030c4p-16, -0x1.552690c9p-3, -0x1.d3a68249p-13, 0x1.1aa1b16ep-7, -0x1.a2ebf91fp-13, -0x1.221b272fp-13},
  },
  { /* Polynomial degree 8: 0.9999999389115*x + 0.0000012803075*x^2 + -0.1666758510647*x^3 + 0.0000319438302*x^4 + 0.0082716065940*x^5 + 0.0000700023478*x^6 + -0.0002450391806*x^7 + 0.0000171026039*x^8 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {4.968831e-16, 0x1.8000p-23, 3},
    /* f64 */ {4.216572e-19, nan, 0},
    /* p */ {0, 0x1.fffffdf3p-1, 0x1.57ae0fccp-20, -0x1.555a260bp-3, 0x1.0bf6da61p-15, 0x1.0f0b43e7p-7, 0x1.259c72d6p-14, -0x1.00f13445p-12, 0x1.1eef1fe7p-16},
  },
  { /* Polynomial degree 9: 0.9999999971693*x + 0.0000000711040*x^2 + -0.1666672805773*x^3 + 0.0000025894203*x^4 + 0.0083271934795*x^5 + 0.0000086945545*x^6 + -0.0002058333603*x^7 + 0.0000036279373*x^8 + 0.0000019251135*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {4.963947e-16, 0x1.8000p-23, 2},
    /* f64 */ {6.317959e-22, nan, 0},
    /* p */ {0, 0x1.ffffffe8p-1, 0x1.3163af52p-24, -0x1.5555a7bbp-3, 0x1.5b8bcd8ap-19, 0x1.10dd8fd5p-7, 0x1.23bda787p-17, -0x1.afa9f1a2p-13, 0x1.e6eef9a9p-19, 0x1.026265aep-19},
  },
};

const std::vector<Approximation> table_cos = {
  // No MULPE-optimized terms as the optimizer goes haywire on the zero at pi/2.

  /* MAE-optimized */
  { /* Polynomial degree 2: x^0 + -0.098229593261 * x^1 + -0.349471822954 * x^2 mae */
    /* f16 */ {1.372099e-04},
    /* f32 */ {1.372146e-04},
    /* f64 */ {1.372146e-04},
    /* p */ {1, -0x1.925931a8e3288p-4, -0x1.65dbf109d5eb7p-2}
  },
  { /* Polynomial degree 3: x^0 + 0.022056022209 * x^1 + -0.590854564638 * x^2 + 0.108779082600 * x^3 mae */
    /* f16 */ {1.370907e-06},
    /* f32 */ {1.315442e-06},
    /* f64 */ {1.315442e-06},
    /* p */ {1, 0x1.695da984724e9p-6, -0x1.2e847d4f9f3efp-1, 0x1.bd8f22a41b338p-4}
  },
  { /* Polynomial degree 4: x^0 + 0.002265707262 * x^1 + -0.513013475967 * x^2 + 0.022212422749 * x^3 + 0.028955138335 * x^4 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {7.230478e-09},
    /* f64 */ {7.230483e-09},
    /* p */ {1, 0x1.28f8852feee58p-9, -0x1.06a9b3cb5e62bp-1, 0x1.6beda7515a350p-6, 0x1.da66a70cb5790p-6}
  },
  { /* Polynomial degree 5: x^0 + -0.000236632981 * x^1 + -0.497794917987 * x^2 + -0.006710986590 * x^3 + 0.050687063613 * x^4 + -0.005640067625 * x^5 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {3.124762e-11},
    /* f64 */ {3.124630e-11},
    /* p */ {1, -0x1.f0415d54e432cp-13, -0x1.fdbdf3737bcc8p-2, -0x1.b7cfabed3fea0p-8, 0x1.9f3a7a1187150p-5, -0x1.71a0a1fea2a00p-8}
  },
  { /* Polynomial degree 6: x^0 + -0.000016486734 * x^1 + -0.499802933388 * x^2 + -0.000777355039 * x^3 + 0.043048112097 * x^4 + -0.001181406087 * x^5 + -0.000967219341 * x^6 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {9.391294e-14},
    /* f64 */ {9.272005e-14},
    /* p */ {1, -0x1.1499fb447e12ep-16, -0x1.ffcc571562537p-2, -0x1.978ed3c5fc400p-11, 0x1.60a66f339c5b4p-5, -0x1.35b2d2080ac00p-10, -0x1.fb19fb849a600p-11}
  },
  { /* Polynomial degree 7: x^0 + 0.000001118560 * x^1 + -0.500018528423 * x^2 + 0.000104024212 * x^3 + 0.041388676028 * x^4 + 0.000400085796 * x^5 + -0.001709292006 * x^6 + 0.000136236721 * x^7 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.424424e-15},
    /* f64 */ {2.251632e-16},
    /* p */ {1, 0x1.2c42e1601fbf8p-20, -0x1.00026db5f1ba4p-1, 0x1.b44f259836c00p-14, 0x1.530e583ed01d0p-5, 0x1.a385369168a00p-12, -0x1.c014a50e45500p-10, 0x1.1db5886843000p-13}
  },
  { /* Polynomial degree 8: x^0 + 0.000000058423 * x^1 + -0.500001181021 * x^2 + 0.000008136939 * x^3 + 0.041639710914 * x^4 + 0.000048869802 * x^5 + -0.001439417401 * x^6 + 0.000028818952 * x^7 + 0.000017309827 * x^8 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.048715e-15},
    /* f64 */ {4.137053e-19},
    /* p */ {1, 0x1.f5d88e613859fp-25, -0x1.000027a0e4928p-1, 0x1.1107c5e1d5000p-17, 0x1.551ccd92eebacp-5, 0x1.99f31987f3800p-15, -0x1.7955aaa775000p-10, 0x1.e38075124e000p-16, 0x1.2269245d04000p-16}
  },
  { /* Polynomial degree 9: x^0 + -0.000000002936 * x^1 + -0.499999924050 * x^2 + -0.000000677148 * x^3 + 0.041669631490 * x^4 + -0.000007363220 * x^5 + -0.001377796753 * x^6 + -0.000010366739 * x^7 + 0.000030711710 * x^8 + -0.000001906451 * x^9 mae */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.044908e-15},
    /* f64 */ {6.418498e-22},
    /* p */ {1, -0x1.938d08e5f0978p-29, -0x1.fffffae730e21p-2, -0x1.6b8a7df3d0000p-21, 0x1.555b8d0f8204dp-5, -0x1.ee23293cf0000p-18, -0x1.692e5ffbcf640p-10, -0x1.5bd99b61f4000p-17, 0x1.01a0e540f8000p-15, -0x1.ffc24c2580000p-20}
  },

#if 0
  { /* MULPE_MAE Polynomial degree 2: x^0 + -0.103192331902 * x^1 + -0.344289847901 * x^2 */
    /* f16 */ {1.580715e-04},
    /* f32 */ {1.580714e-04},
    /* f64 */ {1.580714e-04},
    /* p */ {1, -0x1.a6ad00ab71332p-4, -0x1.608d849450f2fp-2}
  },
  { /* MULPE_MAE Polynomial degree 3: x^0 + 0.023084277738 * x^1 + -0.593222223440 * x^2 + 0.110014859783 * x^3 */
    /* f16 */ {1.490116e-06},
    /* f32 */ {1.421455e-06},
    /* f64 */ {1.421455e-06},
    /* p */ {1, 0x1.7a367a7bfd56bp-6, -0x1.2fbad2c1df710p-1, 0x1.c29ef10d78354p-4}
  },
  { /* MULPE_MAE Polynomial degree 4: x^0 + 0.002368902897 * x^1 + -0.513420340205 * x^2 + 0.022693369236 * x^3 + 0.028779954584 * x^4 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {7.832619e-09},
    /* f64 */ {7.832622e-09},
    /* p */ {1, 0x1.367f30efa5f82p-9, -0x1.06df07e491134p-1, 0x1.73cee3acff2e0p-6, 0x1.d787e0ee10260p-6}
  },
  { /* MULPE_MAE Polynomial degree 5: x^0 + -0.000249487270 * x^1 + -0.497719204369 * x^2 + -0.006856835288 * x^3 + 0.050800822656 * x^4 + -0.005671130090 * x^5 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {3.272695e-11},
    /* f64 */ {3.272492e-11},
    /* p */ {1, -0x1.059b3a9efdf4ap-12, -0x1.fdaa1a656d882p-2, -0x1.c15e9b50644a0p-8, 0x1.a0290bfd54adcp-5, -0x1.73a9c6448df40p-8}
  },
  { /* MULPE_MAE Polynomial degree 6: x^0 + -0.000017341076 * x^1 + -0.499796084411 * x^2 + -0.000796473905 * x^3 + 0.043072365254 * x^4 + -0.001195727666 * x^5 + -0.000964022485 * x^6 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {9.848403e-14},
    /* f64 */ {9.721548e-14},
    /* p */ {1, -0x1.22ef5b1f14e74p-16, -0x1.ffca8b74da477p-2, -0x1.a194eafc2e700p-11, 0x1.60d94c0403544p-5, -0x1.3973ece3c3b00p-10, -0x1.f96ce8601b000p-11}
  },
  { /* MULPE_MAE Polynomial degree 7: x^0 + 0.000001189191 * x^1 + -0.500019301419 * x^2 + 0.000107000744 * x^3 + 0.041383232833 * x^4 + 0.000405226651 * x^5 + -0.001711716159 * x^6 + 0.000136688488 * x^7 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.433102e-15},
    /* f64 */ {2.311972e-16},
    /* p */ {1, 0x1.3f389b9c901b6p-20, -0x1.000287a5ec52fp-1, 0x1.c0cb2c6da2c00p-14, 0x1.5302edf3eb122p-5, 0x1.a8e9336c54600p-12, -0x1.c0b753b2ca080p-10, 0x1.1ea812b16e800p-13}
  },
  { /* MULPE_MAE Polynomial degree 8: x^0 + 0.000000061952 * x^1 + -0.500001229091 * x^2 + 0.000008373245 * x^3 + 0.041639137479 * x^4 + 0.000049635045 * x^5 + -0.001439990144 * x^6 + 0.000029044531 * x^7 + 0.000017273421 * x^8 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.049173e-15},
    /* f64 */ {4.251312e-19},
    /* p */ {1, 0x1.0a157636083b0p-24, -0x1.0000293dd0b45p-1, 0x1.18f5a083a2000p-17, 0x1.551b99b69e610p-5, 0x1.a05e727bf8000p-15, -0x1.797c1a4efda80p-10, 0x1.e7494f5024000p-16, 0x1.21ccc7646c000p-16}
  },
  { /* MULPE_MAE Polynomial degree 9: x^0 + -0.000000003148 * x^1 + -0.499999920324 * x^2 + -0.000000700803 * x^3 + 0.041669706501 * x^4 + -0.000007497726 * x^5 + -0.001377653943 * x^6 + -0.000010455772 * x^7 + 0.000030741841 * x^8 + -0.000001910724 * x^9 */
    /* f16 */ {5.960464e-08},
    /* f32 */ {1.044969e-15},
    /* f64 */ {6.501772e-22},
    /* p */ {1, -0x1.b0a81ca8e5b95p-29, -0x1.fffffaa72ce3cp-2, -0x1.783da68640000p-21, 0x1.555bb55506b79p-5, -0x1.f729f4f3e8000p-18, -0x1.6924ca85f0c40p-10, -0x1.5ed666cfe0000p-17, 0x1.01e199f795000p-15, -0x1.0073f76540000p-19}
  },
#endif
};

const std::vector<Approximation> table_tan = {
  // We prefer Padé approximants for tan, as we also rely on tan(x) = 1/tan(pi/2-x).
  // As such, we can simply swap the numerator and denominator for higher precision.

  { /* Polynomial degree 3: 1*x + 0.4201343330787*x^3 */
    /* f16 */ {1.686811e-05, nan, 0},
    /* f32 */ {1.682620e-05, 0x1.6a5ap-7, 185524},
    /* f64 */ {1.682620e-05, nan, 0},
    /* p */ {0, 1, 0, 0x1.ae37b1d2p-2},
  },
  { /* Polynomial degree 5: 1*x + 0.3333333333139*x^3 + 0.1729759292502*x^5 */
    /* f16 */ {5.364418e-07, nan, 0},
    /* f32 */ {4.771360e-07, 0x1.7394p-10, 23781},
    /* f64 */ {4.771356e-07, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.62413439p-3},
  },
  { /* Polynomial degree 7: 1*x + 0.3333333333139*x^3 + 0.1260246617603*x^5 + 0.0833106254286*x^7 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {1.305968e-09, 0x1.7d40p-14, 1525},
    /* f64 */ {1.305953e-09, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.021937c6p-3, 0, 0x1.553d85bap-4},
  },
  { /* Polynomial degree 9: 1*x + 0.3333333333139*x^3 + 0.1345378992846*x^5 + 0.0452420585352*x^7 + 0.0400968401518*x^9 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {5.044108e-12, 0x1.4c00p-18, 83},
    /* f64 */ {5.042561e-12, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.13889b2cp-3, 0, 0x1.729f793ap-5, 0, 0x1.48792b24p-5},
  },
  { /* Polynomial degree 11: 1*x + 0.3333333333139*x^3 + 0.1331580929691*x^5 + 0.0559233575841*x^7 + 0.0146559415443*x^9 + 0.0191160547802*x^11 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.208783e-14, 0x1.8000p-22, 6},
    /* f64 */ {2.114972e-14, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.10b530b4p-3, 0, 0x1.ca1fc7fdp-5, 0, 0x1.e03ef2d0p-7, 0, 0x1.39328b87p-6},
  },
  { /* Polynomial degree 13: 1*x + 0.3333333333139*x^3 + 0.1333533363068*x^5 + 0.0536443908131*x^7 + 0.0237298151042*x^9 + 0.0040885370699*x^11 + 0.0088819821831*x^13 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {8.708782e-16, 0x1.0000p-23, 2},
    /* f64 */ {9.811783e-17, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.111b8dd2p-3, 0, 0x1.b7747105p-5, 0, 0x1.84ca0ef4p-6, 0, 0x1.0bf24501p-8, 0, 0x1.230b7780p-7},
  },
  { /* Polynomial degree 15: 1*x + 0.3333333333139*x^3 + 0.1333310727205*x^5 + 0.0540184447527*x^7 + 0.0214636154415*x^9 + 0.0104291996249*x^11 + 0.0005425877780*x^13 + 0.0041771624301*x^15 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.640290e-16, 0x1.0000p-23, 2},
    /* f64 */ {4.783922e-19, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.110fe1a7p-3, 0, 0x1.ba84e3b3p-5, 0, 0x1.5fa8ed98p-6, 0, 0x1.55be77a8p-7, 0, 0x1.1c78e618p-11, 0, 0x1.11c12807p-8},
  },
  { /* Polynomial degree 17: 1*x + 0.3333333333139*x^3 + 0.1333335990785*x^5 + 0.0539607752580*x^7 + 0.0219482732500*x^9 + 0.0084489575402*x^11 + 0.0047811479035*x^13 + -0.0003964221438*x^15 + 0.0019644011131*x^17 */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {7.633352e-16, 0x1.0000p-23, 2},
    /* f64 */ {2.067093e-21, nan, 0},
    /* p */ {0, 1, 0, 0x1.55555555p-2, 0, 0x1.111134bcp-3, 0, 0x1.ba0bf2a0p-5, 0, 0x1.6799baf4p-6, 0, 0x1.14dafe29p-7, 0, 0x1.395659e2p-8, 0, -0x1.9fadc24ap-12, 0, 0x1.017a5d13p-9},
  },
  { /* Padé approximant 1/0: (1*x)/(1) */
    /* f16 */ {5.760193e-03, nan, 0},
    /* f32 */ {5.759967e-03, 0x1.b781p-3, 3600421},
    /* f64 */ {5.759966e-03, nan, 0},
    /* p */ {0, 1},
    /* q */ {1},
  },
  { /* Padé approximant 1/2: (1*x)/(1 + -0.3333333333139*x^2) */
    /* f16 */ {9.834766e-06, nan, 0},
    /* f32 */ {9.819094e-06, 0x1.72a2p-7, 189763},
    /* f64 */ {9.819087e-06, nan, 0},
    /* p */ {0, 1},
    /* q */ {1, 0, -0x1.55555555p-2},
  },
  { /* Padé approximant 3/2: (1*x + -0.0666666666802*x^3)/(1 + -0.4000000000233*x^2) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.593063e-09, 0x1.bd80p-13, 3564},
    /* f64 */ {2.593019e-09, nan, 0},
    /* p */ {0, 1, 0, -0x1.11111112p-4},
    /* q */ {1, 0, -0x1.9999999ap-2},
  },
  { /* Padé approximant 3/4: (1*x + -0.0952380903327*x^3)/(1 + -0.4285714236903*x^2 + 0.0095238078866*x^4) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {2.114650e-13, 0x1.3000p-19, 38},
    /* f64 */ {2.109280e-13, nan, 0},
    /* p */ {0, 1, 0, -0x1.86186035p-4},
    /* q */ {1, 0, -0x1.b6db6d63p-2, 0, 0x1.38137db4p-7},
  },
  { /* Padé approximant 5/4: (1*x + -0.1111147495103*x^3 + 0.0010584439453*x^5)/(1 + -0.4444480828242*x^2 + 0.0158744715554*x^4) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.208108e-16, 0x1.8000p-23, 3},
    /* f64 */ {6.573432e-18, nan, 0},
    /* p */ {0, 1, 0, -0x1.c7204274p-4, 0, 0x1.1576f885p-10},
    /* q */ {1, 0, -0x1.c71d65f2p-2, 0, 0x1.04165c0bp-6},
  },
  { /* Padé approximant 5/6: (1*x + -0.1181359178008*x^3 + 0.0017271266056*x^5)/(1 + -0.4514692511293*x^2 + 0.0188835436493*x^4 + -0.0000668682580*x^6) */
    /* f16 */ {5.960464e-08, nan, 0},
    /* f32 */ {9.154536e-16, 0x1.8000p-23, 3},
    /* f64 */ {5.251302e-19, nan, 0},
    /* p */ {0, 1, 0, -0x1.e3e27cf7p-4, 0, 0x1.c4c18126p-10},
    /* q */ {1, 0, -0x1.ce4df493p-2, 0, 0x1.3563529ap-6, 0, -0x1.18773ecbp-14},
  },
};

const std::vector<Approximation> table_exp = {
  { /* Polynomial degree 1: 1 + 1*x */
    /* f16 */ {1.733398e-02, nan, 0},
    /* f32 */ {1.734092e-02, 0x1.3a38p-2, 2574067},
    /* f64 */ {1.734092e-02, nan, 0},
    /* p */ {1, 1},
  },
  { /* Polynomial degree 2: 1 + 1*x + 0.6223560199204*x^2 */
    /* f16 */ {2.568960e-05, nan, 0},
    /* f32 */ {2.541555e-05, 0x1.00e7p-7, 65767},
    /* f64 */ {2.541555e-05, nan, 0},
    /* p */ {1, 1, 0x1.3ea572c0p-1},
  },
  { /* Polynomial degree 3: 1 + 1*x + 0.4853171409836*x^2 + 0.2205008971767*x^3 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.821793e-08, 0x1.04a0p-12, 2085},
    /* f64 */ {2.821792e-08, nan, 0},
    /* p */ {1, 1, 0x1.f0f6fa03p-2, 0x1.c395f971p-3},
  },
  { /* Polynomial degree 4: 1 + 1*x + 0.5011300831977*x^2 + 0.1591955232955*x^3 + 0.0565775689998*x^4 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.474795e-11, 0x1.f000p-18, 62},
    /* f64 */ {2.474214e-11, nan, 0},
    /* p */ {1, 1, 0x1.00941f4dp-1, 0x1.46084d72p-3, 0x1.cf7bc311p-5},
  },
  { /* Polynomial degree 5: 1 + 1*x + 0.4999369240642*x^2 + 0.1673102940995*x^3 + 0.0394343328849*x^4 + 0.0114694942676*x^5 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {2.088456e-14, 0x1.8000p-22, 3},
    /* f64 */ {1.672773e-14, nan, 0},
    /* p */ {1, 1, 0x1.ffef770cp-2, 0x1.56a6c78cp-3, 0x1.430bca43p-5, 0x1.77d51764p-7},
  },
  { /* Polynomial degree 6: 1 + 1*x + 0.5000027402101*x^2 + 0.1666270771074*x^3 + 0.0418725662138*x^4 + 0.0078418729417*x^5 + 0.0019267635558*x^6 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {4.149499e-15, 0x1.0000p-23, 1},
    /* f64 */ {8.817839e-18, nan, 0},
    /* p */ {1, 1, 0x1.00005bf2p-1, 0x1.554093b6p-3, 0x1.570522d0p-5, 0x1.00f665e9p-7, 0x1.f916e9d6p-10},
  },
  { /* Polynomial degree 7: 1 + 1*x + 0.4999999029948*x^2 + 0.1666685430396*x^3 + 0.0416531639228*x^4 + 0.0083807700778*x^5 + 0.0013020226861*x^6 + 0.0002766361124*x^7 */
    /* f16 */ {2.980232e-07, nan, 0},
    /* f32 */ {4.150069e-15, 0x1.0000p-23, 1},
    /* f64 */ {3.693457e-21, nan, 0},
    /* p */ {1, 1, 0x1.fffff97dp-2, 0x1.5556512dp-3, 0x1.5539041ap-5, 0x1.129efeb3p-7, 0x1.5551436cp-10, 0x1.2212f0e4p-12},
  },
};

const std::vector<Approximation> table_log = {
  /* MAE optimized: */
  { /* Polynomial degree 2: 1.0216308552410*x + -0.4403990932151*x^2 */
    /* f16 */ {7.867813e-06, nan, 0},
    /* f32 */ {7.878410e-06, 0x1.3742p-8, 421793},
    /* f64 */ {7.878410e-06, nan, 0},
    /* p */ {0, 0x1.05899988p+0, -0x1.c2f7fadap-2},
  },
  { /* Polynomial degree 3: 1.0040214722130*x + -0.5136964133683*x^2 + 0.2591928032976*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {9.896164e-08, 0x1.110cp-11, 73207},
    /* f64 */ {9.896161e-08, nan, 0},
    /* p */ {0, 0x1.01078d1cp+0, -0x1.0703375fp-1, 0x1.0969d696p-2},
  },
  { /* Polynomial degree 4: 0.9998652283457*x + -0.5047999557955*x^2 + 0.3441160308133*x^3 + -0.1817745258468*x^4 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {2.643775e-09, 0x1.4b00p-14, 8548},
    /* f64 */ {2.643777e-09, nan, 0},
    /* p */ {0, 0x1.ffee55d0p-1, -0x1.027523cap-1, 0x1.605ff3e9p-2, -0x1.744633dep-3},
  },
  { /* Polynomial degree 5: 0.9998612309049*x + -0.5000937098240*x^2 + 0.3403163254845*x^3 + -0.2574492110521*x^4 + 0.1317782322142*x^5 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.768703e-11, 0x1.3300p-17, 2343},
    /* f64 */ {3.768704e-11, nan, 0},
    /* p */ {0, 0x1.ffedcfafp-1, -0x1.000c4861p-1, 0x1.5c7be201p-2, -0x1.07a0c417p-2, 0x1.0de1beedp-3},
  },
  { /* Polynomial degree 6: 0.9999906843079*x + -0.4998246784565*x^2 + 0.3338515052232*x^3 + -0.2572050802543*x^4 + 0.2028994357215*x^5 + -0.1006273752406*x^6 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.004252e-12, 0x1.a000p-20, 269},
    /* f64 */ {1.004152e-12, nan, 0},
    /* p */ {0, 0x1.fffec76bp-1, -0x1.ffd20a5fp-2, 0x1.55dd2b43p-2, -0x1.0760c4c0p-2, 0x1.9f89bd46p-3, -0x1.9c2b735cp-4},
  },
  { /* Polynomial degree 7: 1.0000023509930*x + -0.4999735666682*x^2 + 0.3330719266418*x^3 + -0.2509260507703*x^4 + 0.2077813489980*x^5 + -0.1668409326671*x^6 + 0.0793795828464*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {2.143405e-14, 0x1.2000p-22, 51},
    /* f64 */ {2.135113e-14, nan, 0},
    /* p */ {0, 0x1.00002771p+0, -0x1.fff91217p-2, 0x1.5510cea1p-2, -0x1.00f2c237p-2, 0x1.a9894495p-3, -0x1.55b0b2ecp-3, 0x1.45238685p-4},
  },
  { /* Polynomial degree 8: 1.0000005963610*x + -0.5000031857881*x^2 + 0.3332664991847*x^3 + -0.2497140015398*x^4 + 0.2015717363986*x^5 + -0.1746322844830*x^6 + 0.1395143556710*x^7 + -0.0629901703640*x^8 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {5.171050e-16, 0x1.0000p-24, 12},
    /* f64 */ {4.352149e-16, nan, 0},
    /* p */ {0, 0x1.00000a01p+0, -0x1.00006ae6p-1, 0x1.5543d02bp-2, -0x1.ff6a0df0p-3, 0x1.9cd1a47dp-3, -0x1.65a59c75p-3, 0x1.1db9b3d7p-3, -0x1.0201fb1bp-4},
  },

  /* MULPE optimized: */
  { /* Polynomial degree 2: 1.0135046407110*x + -0.4395631784420*x^2 */
    /* f16 */ {7.271767e-06, nan, 0},
    /* f32 */ {7.253393e-06, 0x1.19ecp-7, 288981},
    /* f64 */ {7.253393e-06, nan, 0},
    /* p */ {0, 0x1.03750a46p+0, -0x1.c21cd990p-2},
  },
  { /* Polynomial degree 3: 1.0018919699420*x + -0.5110780009681*x^2 + 0.2670578418988*x^3 */
    /* f16 */ {1.192093e-07, nan, 0},
    /* f32 */ {1.341201e-07, 0x1.1ec6p-10, 36719},
    /* f64 */ {1.341201e-07, nan, 0},
    /* p */ {0, 0x1.007bfdfdp+0, -0x1.05ac0408p-1, 0x1.11779c64p-2},
  },
  { /* Polynomial degree 4: 0.9999053089925*x + -0.5033293269317*x^2 + 0.3437968778800*x^3 + -0.1883202449166*x^4 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {3.791202e-09, 0x1.2620p-13, 4710},
    /* f64 */ {3.791206e-09, nan, 0},
    /* p */ {0, 0x1.fff396b2p-1, -0x1.01b461adp-1, 0x1.600c49ecp-2, -0x1.81ae0b69p-3},
  },
  { /* Polynomial degree 5: 0.9999594838019*x + -0.5000166611404*x^2 + 0.3381673240544*x^3 + -0.2567923837186*x^4 + 0.1372263861599*x^5 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {6.870449e-11, 0x1.5300p-16, 681},
    /* f64 */ {6.870326e-11, nan, 0},
    /* p */ {0, 0x1.fffab081p-1, -0x1.00022f0ep-1, 0x1.5a4888f6p-2, -0x1.06f49528p-2, 0x1.190a25c6p-3},
  },
  { /* Polynomial degree 6: 0.9999976829142*x + -0.4998918964042*x^2 + 0.3335934897896*x^3 + -0.2558015431719*x^4 + 0.2037064016563*x^5 + -0.1050482978013*x^6 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {1.448225e-12, 0x1.b400p-19, 109},
    /* f64 */ {1.448188e-12, nan, 0},
    /* p */ {0, 0x1.ffffb240p-1, -0x1.ffe3a94ap-2, 0x1.55998823p-2, -0x1.05f0d6f9p-2, 0x1.a130d269p-3, -0x1.ae471fb9p-4},
  },
  { /* Polynomial degree 7: 1.0000007882120*x + -0.4999903679258*x^2 + 0.3331502379161*x^3 + -0.2504928025653*x^4 + 0.2065596747862*x^5 + -0.1687907030490*x^6 + 0.0841148842395*x^7 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {4.060637e-14, 0x1.1000p-21, 17},
    /* f64 */ {4.051390e-14, nan, 0},
    /* p */ {0, 0x1.00000d39p+0, -0x1.fffd799ap-2, 0x1.55255602p-2, -0x1.00812f6cp-2, 0x1.a708c23fp-3, -0x1.59aef0acp-3, 0x1.5888d94fp-4},
  },
  { /* Polynomial degree 8: 1.0000001247350*x + -0.5000018429448*x^2 + 0.3332997952365*x^3 + -0.2497806739153*x^4 + 0.2010397332111*x^5 + -0.1735429790276*x^6 + 0.1413103402634*x^7 + -0.0667178963294*x^8 */
    /* f16 */ {0.000000e+00, nan, 0},
    /* f32 */ {9.385329e-16, 0x1.0000p-23, 4},
    /* f64 */ {8.529045e-16, nan, 0},
    /* p */ {0, 0x1.00000218p+0, -0x1.00003dd7p-1, 0x1.554c8aa1p-2, -0x1.ff8d028dp-3, 0x1.9bbab83bp-3, -0x1.636a805bp-3, 0x1.216750d0p-3, -0x1.1146c8edp-4},
  },

};

// clang-format on

const Approximation *find_best_approximation(const char *name, const std::vector<Approximation> &table,
                                             ApproximationPrecision precision, Type type) {
    // We will find the approximation that is as fast as possible, while satisfying the constraints.
    // Speed is determined by the number of terms. There might be more than one approximation that has
    // a certain number of terms, but is optimized for a different loss.
    // We will try to select the approximation that scores best on the metric the user wants to minimize.

    Approximation::Metrics Approximation::*metrics_ptr = nullptr;
    if (type == Float(16)) {
        metrics_ptr = &Approximation::metrics_f16;
    } else if (type == Float(32)) {
        metrics_ptr = &Approximation::metrics_f32;
    } else if (type == Float(64)) {
        metrics_ptr = &Approximation::metrics_f64;
    } else {
        internal_error << "Cannot find approximation for type " << type;
    }

    if ((precision.force_halide_polynomial >> 31) & 1) {
        size_t slot = precision.force_halide_polynomial & 0xfff;
        internal_assert(slot < table.size());
        return &table[slot];
    }

    const Approximation *best = nullptr;

    int force_num = precision.force_halide_polynomial;
    int force_denom = 0;
    if ((force_num >> 30) & 1) {
        force_num = force_num & 0xff;
        force_denom = (force_num >> 16) & 0xff;
    }

    for (int search_pass = 0; search_pass < 3; ++search_pass) {
        // Search pass 0 attempts to satisfy everything.
        // Pass 1 will ignore the metrics.
        // Pass 2 will also ignore the number of terms.
        best = nullptr;
        for (size_t i = 0; i < table.size(); ++i) {
            const Approximation &e = table[i];

            int num_num = 0;
            int num_denom = 0;
            for (double c : e.p) {
                num_num += c != 0.0;
            }
            for (double c : e.q) {
                num_denom += c != 0.0;
            }

            int num_constraints = 0;
            int num_constraints_satisfied = 0;

            num_constraints++;
            if (num_num >= force_num) {
                num_constraints_satisfied++;
            }
            num_constraints++;
            if (num_denom >= force_denom) {
                num_constraints_satisfied++;
            }

            const Approximation::Metrics &metrics = e.*metrics_ptr;

            // Check if precision is satisfactory.
            if (precision.constraint_max_absolute_error != 0) {
                num_constraints++;
                if (metrics.mae <= precision.constraint_max_absolute_error) {
                    num_constraints_satisfied++;
                }
            }
            if (precision.constraint_max_ulp_error != 0) {
                num_constraints++;
                if (metrics.mulpe <= precision.constraint_max_ulp_error) {
                    num_constraints_satisfied++;
                }
            }

            if (num_constraints_satisfied + search_pass >= num_constraints) {
                if (best == nullptr) {
                    debug(4) << "first best = " << i << "\n";
                    best = &e;
                } else {
                    // Figure out if we found better for the same number of terms (or less).
                    if (best->p.size() + best->q.size() >= e.p.size() + e.q.size()) {
                        const Approximation::Metrics &best_metrics = best->*metrics_ptr;
                        if (precision.optimized_for == OO::MULPE) {
                            if (best_metrics.mulpe > metrics.mulpe) {
                                debug(4) << "better mulpe best = " << i << "\n";
                                best = &e;
                            }
                        } else if (precision.optimized_for == OO::MAE) {
                            if (best_metrics.mae > metrics.mae) {
                                debug(4) << "better mae best = " << i << "\n";
                                best = &e;
                            }
                        }
                    }
                }
            }
        }

        if (best) {
            if (search_pass == 0) {
                return best;
            } else {
                // Report warning below and return it.
                break;
            }
        }
    }

    if (!best) {
        best = &table.back();
    }
    const Approximation::Metrics &best_metrics = best->*metrics_ptr;

    auto warn = user_warning;
    warn << "Could not find an approximation for fast_" << name << " that satisfies constraints:";
    if (precision.force_halide_polynomial > int(best->p.size())) {
        warn << " [NumTerms " << best->p.size() << " < requested " << precision.force_halide_polynomial << "]";
    }
    if (precision.constraint_max_absolute_error > 0.0 && best_metrics.mae > precision.constraint_max_absolute_error) {
        warn << " [MAE " << best_metrics.mae << " > requested " << precision.constraint_max_absolute_error << "]";
    }
    if (precision.constraint_max_ulp_error > 0.0 && best_metrics.mulpe > precision.constraint_max_ulp_error) {
        warn << " [MULPE " << best_metrics.mulpe << " > requested " << precision.constraint_max_ulp_error << "]";
    }
    return best;
}

const Approximation *best_atan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("atan", table_atan, precision, type);
}

const Approximation *best_sin_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("sin", table_sin, precision, type);
}

const Approximation *best_cos_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("cos", table_cos, precision, type);
}

const Approximation *best_tan_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("tan", table_tan, precision, type);
}

const Approximation *best_exp_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("exp", table_exp, precision, type);
}

const Approximation *best_log_approximation(Halide::ApproximationPrecision precision, Type type) {
    return find_best_approximation("log", table_log, precision, type);
}

}  // namespace ApproximationTables
}  // namespace Internal
}  // namespace Halide
