#ifndef HALIDE_OUTPUTS_H
#define HALIDE_OUTPUTS_H

/** \file
 *
 * Defines the Output interface and basic compiler output types
 * generated by Halide.
 */

#include "IntrusivePtr.h"
#include "IR.h"
#include "Target.h"

namespace Halide {
namespace Internal {

/** Describes a Func that has been lowered to imperitive Halide IR. */
class LoweredFunc {
public:
    Stmt body;
    std::string name;
    Target target;
    std::vector<Argument> args;
    std::vector<Buffer> images;
};

/** Interface for generating a compiler build result from a
 * LoweredFunc. */
class OutputBase {
public:
    mutable RefCount ref_count;

    virtual ~OutputBase() {}

    /** Generate the output(s) defined by this Output. */
    virtual void generate(const LoweredFunc &func) = 0;
};

template<>
EXPORT inline RefCount &ref_count<OutputBase>(const OutputBase *o) {return o->ref_count;}

template<>
EXPORT inline void destroy<OutputBase>(const OutputBase *o) {delete o;}

}

/** A reference counted handle to a particular type of Halide compiler
 * output. */
class Output {
    Internal::IntrusivePtr<Internal::OutputBase> contents;

public:
    Output() : contents(NULL) {}
    Output(const Internal::IntrusivePtr<Internal::OutputBase> &c) : contents(c) {}
    Output(const Output &c) : contents(c.contents) {}

    /** Given a LoweredFunc, generate the compiler output represented
     * by this Output. */
    void generate(const Internal::LoweredFunc &func) {
        internal_assert(contents.ptr != NULL) << "Undefined Output.\n";
        return contents.ptr->generate(func);
    }

    /** Create an Output describing native outputs. */
    // @{
    static Output object(const std::string &filename);
    static Output assembly(const std::string &filename);
    static Output native(const std::string &object_filename,
                         const std::string &assembly_filename);
    // @}

    /** Create an Output describing LLVM outputs. */
    // @{
    static Output bitcode(const std::string &filename);
    static Output llvm_assembly(const std::string &filename);
    static Output llvm(const std::string &bitcode_filename,
                       const std::string &assembly_filename);
    // @}

    /** Create an Output describing Halide IR outputs. */
    // @{
    static Output stmt_html(const std::string &filename);
    static Output stmt_text(const std::string &filename);
    // @}

    /** Create an Output describing C headers and source code. */
    // @{
    static Output c_header(const std::string &filename);
    static Output c_source(const std::string &filename);
    static Output c(const std::string &h_filename,
                    const std::string &c_filename);
    // @}
};

}

#endif
