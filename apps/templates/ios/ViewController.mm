//
//  ViewController.m
//  test_ios
//
//  Created by abstephens on 1/20/15.
//
//

#include <algorithm>
#include <dlfcn.h>

#import "ViewController.h"
#import "AppDelegate.h"
#import "AppProtocol.h"
#import "HalideRuntime.h"

// This file is generated by the CMake build and contains a list of test
// functions to execute.
#import "test_symbols.h"

@implementation ViewController

- (instancetype)init {
  self = [super init];
  if (self) {
    _outputView = [[UIWebView alloc] initWithFrame:CGRectZero];

    // Enable zooming in and out of content
    _outputView.scalesPageToFit = YES;
  }
  return self;
}

- (void)viewDidLoad {
  [super viewDidLoad];

  [self.view addSubview:self.outputView];

  self.outputView.delegate = self;

  NSURL* url = [[NSBundle mainBundle] URLForResource:@"index"
                                       withExtension:@"html"];
  [self.outputView loadRequest:[NSURLRequest requestWithURL:url]];
}

- (void)viewWillLayoutSubviews {

  self.outputView.frame = self.view.frame;

  self.view.autoresizingMask = UIViewAutoresizingFlexibleWidth |
    UIViewAutoresizingFlexibleHeight;
  self.view.autoresizesSubviews = YES;
}

- (void)webViewDidFinishLoad:(UIWebView *)sender
{
  self.database = [NSMutableDictionary dictionary];

  // Call the test functions
  int num_test_symbols = sizeof(test_symbols) / sizeof(test_symbols[0]);
  if (num_test_symbols == 0) {
    [self echo:[NSString stringWithFormat:@"<div class='error'>No test symbols defined.</div>"]];
    return;
  }

  for (int i = 0; i != num_test_symbols; ++i) {

    // Attempt to load the symbol
    test_function_t func = (test_function_t)test_symbols[i];

    // Execute the function
    int result = func();

    [self echo:[NSString stringWithFormat:@"%s returned %d",test_names[i],result]];
  }
}

// This message appends the specified string, which may contain HTML tags to the
// document displayed in the webview.
- (void)echo:(NSString*)message {

  NSString* htmlMessage = [message stringByReplacingOccurrencesOfString:@"\n" withString:@"<br>"];
  htmlMessage = [NSString stringWithFormat:@"echo(\"%@\");",htmlMessage];

  [self.outputView stringByEvaluatingJavaScriptFromString:htmlMessage];
}

// The Halide runtime will call this function to initialize and make current the
// intended implementation specific OpenGL context.
extern "C"
int halide_opengl_create_context(void *user_context) {

  static EAGLContext* context = nil;

  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];
  });

  [EAGLContext setCurrentContext:context];

  return 0;
}

// This method is called by the Halide runtime to populate a function pointer
// lookup table. Since there is only one GLES implementation available on iOS
// we simply forward the lookup to dlsym
extern "C"
void *halide_opengl_get_proc_address(void *user_context, const char *name)
{
  void* symbol = dlsym(RTLD_NEXT,name);

  return symbol;
}

extern "C"
void halide_print(void *user_context, const char * message)
{
  ViewController* app = (ViewController*)[UIApplication sharedApplication].delegate.window.rootViewController;
  [app echo:[NSString stringWithCString:message encoding:NSUTF8StringEncoding]];

  NSLog(@"%s",message);
}

extern "C"
void halide_error(void *user_context, const char * message)
{
  ViewController* ctrl = (ViewController*)[UIApplication sharedApplication].delegate.window.rootViewController;
  [ctrl echo:[NSString stringWithFormat:@"<div class='error'>%s</div>",message]];

  NSLog(@"%s",message);
}

extern "C"
int halide_buffer_display(const buffer_t* buffer)
{
  // Convert the buffer_t to a UIImage

  // TODO: This code should handle channel types larger than one byte.
  void *data_ptr = buffer->host;

  size_t width            = std::max(1, buffer->extent[0]);
  size_t height           = std::max(1, buffer->extent[1]);
  size_t channels         = std::max(1, buffer->extent[2]);
  size_t bitsPerComponent = buffer->elem_size * 8;

  size_t totalBytes = width * height * channels * buffer->elem_size;

  size_t dst_bytesPerRow = width * channels * buffer->elem_size;

  unsigned char *dst_buffer = NULL;
  if (buffer->stride[0] == 1) {

    // Unlike Mac OS X Cocoa which directly supports planar data via
    // NSBitmapImageRep, in iOS we must create a CGImage from the pixel data and
    // Quartz only supports interleaved formats.
    unsigned char *src_buffer = (unsigned char *)data_ptr;

    dst_buffer = (unsigned char *)malloc(totalBytes);

    // Interleave the data
    for (size_t c=0;c!=channels;++c) {
      for (size_t y=0;y!=height;++y) {
        for (size_t x=0;x!=width;++x) {
          size_t src = x*buffer->stride[0] + y*buffer->stride[1] + c*buffer->stride[2];
              size_t dst = c + x * channels + y * dst_bytesPerRow;
              dst_buffer[dst] = src_buffer[src];
          }
      }
    }
  } else {
    dst_buffer = (unsigned char *)data_ptr;
  }

  CGDataProviderRef provider = CGDataProviderCreateWithData(NULL, dst_buffer, totalBytes, NULL);
  CGColorSpaceRef colorSpace = channels > 1 ? CGColorSpaceCreateDeviceRGB() : CGColorSpaceCreateDeviceGray();

  CGImageRef cgImage = CGImageCreate(width,
                                     height,
                                     bitsPerComponent,
                                     bitsPerComponent*channels,
                                     dst_bytesPerRow,
                                     colorSpace,
                                     kCGBitmapByteOrderDefault,
                                     provider,
                                     NULL,
                                     NO,
                                     kCGRenderingIntentDefault);

  // Note there is a slight difference in the APIs used here between this
  // version of halide_buffer_display and the one in the Mac OS X app
  UIImage* image = [UIImage imageWithCGImage:cgImage];

  // Cleanup
  CGImageRelease(cgImage);
  CGColorSpaceRelease(colorSpace);
  CGDataProviderRelease(provider);

  // Convert the image to a PNG
  NSData* data = UIImagePNGRepresentation(image);

  // Construct a name for the image resource
  static int counter = 0;
  NSString* url = [NSString stringWithFormat:@"%@:///buffer_t%d",kAppProtocolURLScheme,counter++];

  // Add the buffer to the result database
  ViewController* ctrl = (ViewController*)[UIApplication sharedApplication].delegate.window.rootViewController;
  ctrl.database[url] = data;

  // Load the image through a URL
  [ctrl echo:[NSString stringWithFormat:@"<img class='output' src='%@'></img>",url]];

  return 0;
}

extern "C"
int halide_buffer_print(const buffer_t* buffer)
{
  NSMutableArray* output = [NSMutableArray array];

  [output addObject:[NSString stringWithFormat:@"elem_size = %d<br>",buffer->elem_size]];
  [output addObject:[NSString stringWithFormat:@"extent = [ %d %d %d %d ]<br>",
      buffer->extent[0],buffer->extent[1],buffer->extent[2],buffer->extent[3]]];
  [output addObject:[NSString stringWithFormat:@"stride = [ %d %d %d %d ]<br>",
      buffer->stride[0],buffer->stride[1],buffer->stride[2],buffer->stride[3]]];
  [output addObject:[NSString stringWithFormat:@"min = [ %d %d %d %d ]<br>",
      buffer->min[0],buffer->min[1],buffer->min[2],buffer->min[3]]];
  [output addObject:@"host = [<br>"];
  for (int i3 = 0; i3 < std::max(1, buffer->extent[3]); ++i3) {
      [output addObject:[NSString stringWithFormat:@"---- Z=%d ---- <br>", i3]];
      for (int i1 = 0; i1 < std::max(1, buffer->extent[1]); ++i1) {
          for (int i0 = 0; i0 < std::max(1, buffer->extent[0]); ++i0) {
              for (int i2 = 0; i2 < std::max(1, buffer->extent[2]); ++i2) {
                  int offset = i0*buffer->stride[0] + i1*buffer->stride[1] + i2*buffer->stride[2] + i3*buffer->stride[3];
                  switch (buffer->elem_size) {
                      case 1: [output addObject:[NSString stringWithFormat:@" %02x",((uint8_t*)buffer->host)[offset]]]; break;
                      case 2: [output addObject:[NSString stringWithFormat:@" %02x",((uint16_t*)buffer->host)[offset]]]; break;
                      // TODO: add a way to distinguish between int32 and float.
                      case 4: [output addObject:[NSString stringWithFormat:@" %f",((float*)buffer->host)[offset]]]; break;
                  }
              }
              [output addObject:@","];
          }
          [output addObject:@"<br>"];
      }
  }
  [output addObject:@"<br>]<br>"];

  NSString* text = [output componentsJoinedByString:@""];

  // Output the buffer as a string
  ViewController* ctrl = (ViewController*)[UIApplication sharedApplication].delegate.window.rootViewController;
  [ctrl echo:[NSString stringWithFormat:@"<pre class='data'>%@</pre><br>",text]];
  
  return 0;
}

@end
