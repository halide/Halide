# TODO (known issues)
# - no GPU tests are attempted (probably not possible)
# - cmake static builds aren't handled yet.
# - arm32 and arm64 is build-only, no testing (qemu is too slow).
#   Perhaps some limited testing instead of none?
# - python is built+tested for x86-64 targets only (no arm or 32-bit)
# - apps are skipped for x86-32, arm-32, arm-64
#
# TODO (stuff that could be usefully added, perhaps)
# - build + test of WASM
# - build + test of PyTorch
#
# TODO (GHA issues)
# - GHA is occasionally flaky and some VMs just fail, but there isn't a way
#   to restart just one of the jobs (it's currently all-or-none)

name: Halide Presubmit Build + Test
on:
  workflow_dispatch:
    # inputs:
    #   logLevel:
    #     description: 'Log level'
    #     required: true
    #     default: 'warning'
    #   tags:
    #     description: 'Test scenario tags'

  # pull_request:
  #   # We don't want 'edited' (that's basically just the description, title, etc)
  #   # We don't want 'review_requested' (that's redundant to the ones below for our purposes)
  #   types: [opened, synchronize, reopened]
  #   # TODO: do we want to limit this to certain filetypes?
  #   # paths:
  #   #   - '**.h'
  #   #   - '**.c'
  #   #   - '**.cpp'

jobs:
  test_halide:
    name: HL-${{matrix.llvm_version}}-${{matrix.target_arch}}-${{matrix.target_bits}}-${{matrix.target_os}}-${{matrix.build_tool}}
    runs-on: ${{matrix.host_os}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}
      LD: ${{matrix.ld}}

    strategy:
      fail-fast: false  # Keep running other jobs even if one fails
      # free-tier projects (like Halide) get 20 concurrent tasks.
      # The build matrix here has only 7 tasks -- should we limit it to fewer
      # than that? Need to experiment.
      # max-parallel: TBD   TODO
      matrix:
        # TODO: this matrix is probably overkill; we don't need to build every combination.
        # (Some combinations are nonsensical and excluded via the 'exclude:' section below.)
        target_arch: [x86, arm]
        target_bits: [32, 64]
        target_os: [linux, osx, windows]
        llvm_version: [12]
        build_tool: [cmake_shared]
        # llvm_version: [9, 10, 11, 12]  # TODO
        # build_tool: [cmake_shared, make]  # TODO

        # This section basically allows us to define additional values for
        # each matrix entry, e.g. to map an llvm version number to the specific
        # git branch that is needed.
        include:
          # - llvm_version: 9
          #   llvm_branch: release/9.x
          # - llvm_version: 10
          #   llvm_branch: release/10.x
          # - llvm_version: 11
          #   llvm_branch: release/11.x
          - llvm_version: 12
            llvm_branch: master

          # map things to the necessary host cross-compiler host
          - target_os: osx
            host_os: macos-10.15
            cc: clang
            cxx: clang++
            ld: ld

          - target_os: linux
            host_os: ubuntu-18.04
            # GHA has clang 6, 8, and 9 and GCC 7.4, 8.3, 9.2 preinstalled.
            # We will explicitly choose gcc 7.x (even though the default is gcc 7.4)
            # to ensure we match gcc versions with the arm crosscompiler.
            cc: gcc-7
            cxx: g++-7
            ld: ld

          - target_os: windows
            host_os: windows-2019
            cc: cl.exe
            cxx: cl.exe
            ld: ld.exe

          - target_arch: x86
            python_version: '3.7'
            uses_python: true
            run_tests: true

          - target_bits: 32
            # We don't build/test Python bindings on any 32-bit targets
            uses_python: false

          - target_arch: arm
            # We don't build/test Python bindings on any ARM targets
            uses_python: false
            # Running our test suite (via e.g. QEMU) is too slow to be useful
            # at present (> 5 hours on current GHA VMs). That said, we'll leave
            # in the relevant code for now (disabled via this flag) in case
            # it proves useful later.
            run_tests: false

        exclude:
          - target_os: osx
            target_arch: arm    # OSX is x86-only
          - target_os: osx
            target_bits: 32     # OSX is 64-bit only
          - target_os: windows
            target_arch: arm    # OSX is x86-only
          - target_os: windows
            build_tool: make    # Windows is CMake-only
          - target_arch: arm
            build_tool: make    # In this setup, all ARM builds require CMake

    steps:
    - uses: actions/checkout@v2
      with:
        path: 'halide'

    - name: Configure Python
      if: matrix.uses_python
      uses: actions/setup-python@v1
      with:
        python-version: '${{matrix.python_version}}'
        architecture: 'x64'

    - name: Configure Ubuntu Host
      if: startsWith(matrix.host_os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update

        sudo apt-get install \
          doxygen \
          libjpeg-dev \
          libpng-dev \
          ninja-build

        # TODO(srj): OpenGL is only needed to build the opengl tests (which we don't even run)...
        sudo apt-get install \
          freeglut3-dev \
          libglu1-mesa-dev \
          mesa-common-dev

    - name: Configure MacOS Host
      if: startsWith(matrix.host_os, 'macos')
      shell: bash
      run: |
        # coreutils is for gtimeout
        brew install \
          coreutils \
          doxygen \
          jpeg \
          libpng \
          ninja

    - name: Configure Windows Host
      if: startsWith(matrix.host_os, 'windows')
      shell: bash
      run: |
        if [[ ${{matrix.target_bits}} == 32 ]]; then
          export VCPKG_DEFAULT_TRIPLET=x86-windows
        else
          export VCPKG_DEFAULT_TRIPLET=x64-windows
        fi

        vcpkg install \
          libjpeg-turbo \
          libpng \
          zlib

    - name: Configure x86-32 Crosscompilation
      if: matrix.target_os == 'linux' && matrix.target_arch == 'x86' && matrix.target_bits == 32
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install \
          ${{matrix.cc}}-multilib \
          ${{matrix.cxx}}-multilib \
          libjpeg-dev:i386 \
          libpng-dev:i386 \

        # TODO(srj): OpenGL is only needed to build the opengl tests (which we don't even run)...
        sudo apt-get install \
          freeglut3-dev:i386 \
          libglu1-mesa-dev:i386 \
          mesa-common-dev:i386

    - name: Configure Arm32 Crosscompilation
      if: matrix.target_os == 'linux' && matrix.target_arch == 'arm' && matrix.target_bits == 32
      shell: bash
      run: |
        # Note that we are configuring this for user-mode emulation:
        # syscalls will be native, only user-mode code will be emulated.
        # This is not 100% perfect (there are various corner cases that
        # can bite us), but is *much* faster than full machine emulation.

        sudo apt-get update
        sudo apt-get install --install-suggests \
          ${{matrix.cc}}-arm-linux-gnueabihf \
          ${{matrix.cxx}}-arm-linux-gnueabihf

        # TODO: figure out how to install libjpeg and libpng for armhf;
        # the standard apt repository for GHA VMs barfs on these.
        # sudo apt-get install \
        #   libjpeg-dev:armhf \
        #   libpng-dev:armhf

        # Note that we need QEMU even if not running tests, as Generators
        # will be built for arm by default, and we need to be able to run them.
        sudo apt-get install --install-suggests \
          qemu-user \
          qemu-user-binfmt

        qemu-arm --version
        echo ::set-env name=QEMU_LD_PREFIX::"/usr/arm-linux-gnueabihf"

    - name: Configure AArch64 Crosscompilation
      if: matrix.target_os == 'linux' && matrix.target_arch == 'arm' && matrix.target_bits == 64
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install --install-suggests \
          ${{matrix.cc}}-aarch64-linux-gnu \
          ${{matrix.cxx}}-aarch64-linux-gnu

        # TODO: figure out how to install libjpeg and libpng for armhf;
        # the standard apt repository for GHA VMs barfs on these.
        # sudo apt-get install \
        #   libjpeg-dev:aarch64 \
        #   libpng-dev:aarch64

        # Note that we need QEMU even if not running tests, as Generators
        # will be built for arm by default, and we need to be able to run them.
        sudo apt-get install --install-suggests \
          qemu-user \
          qemu-user-binfmt

        qemu-arm --version
        echo ::set-env name=QEMU_LD_PREFIX::"/usr/aarch64-linux-gnu"

    - name: Configure Env Vars
      shell: bash
      run: |
        echo "github.event_name is ${{github.event_name}}"  # should always be "pull_request"
        echo "github.event.action is ${{github.event.action}}"

        # Demangle Windows names, to simplify CMake stuff later
        _ROOT=${GITHUB_WORKSPACE//\\//}
        _TEMP_RAW="${{runner.temp}}"
        _TEMP=${_TEMP_RAW//\\//}

        # This is the trick GitHub Actions uses to allow us to set env vars across all subsequent job steps
        echo ::set-env name=BUILD_TYPE::"Release"
        echo ::set-env name=LLVM_INSTALL_DIR::"${_ROOT}/llvm"
        echo ::set-env name=LLVM_CONFIG::"${_ROOT}/llvm/bin/llvm-config"
        echo ::set-env name=HALIDE_SOURCE_DIR::"${_ROOT}/halide"
        echo ::set-env name=HALIDE_BUILD_DIR::"${_ROOT}/halide_build"
        echo ::set-env name=HALIDE_TEMP_DIR::"${_TEMP}"
        echo ::set-env name=PARALLEL_JOBS::"4"
        if [[ ${{matrix.host_os}} == windows* ]]; then
          # On Windows, it's just 'python', apparently
          echo ::set-env name=PYTHON::"python"
        else
          echo ::set-env name=PYTHON::"python${{matrix.python_version}}"
        fi

    - name: Install Python Dependencies
      if: matrix.uses_python
      shell: bash
      run: |
        ${PYTHON} -m pip --version
        ${PYTHON} -m pip install --upgrade pip
        ${PYTHON} -m pip install -r ${HALIDE_SOURCE_DIR}/python_bindings/requirements.txt

        echo ::set-env name=PYTHON::"${PYTHON}"

    - name: Install LLVM
      shell: bash
      run: |
        LLVM_ID="llvm-${{matrix.llvm_version}}-${{matrix.target_arch}}-${{matrix.target_bits}}-${{matrix.target_os}}"

        curl \
          --user llvm_user:${{secrets.LLVM_USER_PASSWORD}} \
          --output ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz \
          https://buildbot.halide-lang.org/llvm/${LLVM_ID}.tgz

        TAR_CMD="tar"
        if [[ ${{matrix.host_os}} == windows* ]]; then
          # Must use --force-local to avoid tar misinterpreting the : in
          # a Windows pathname as a hostname.
          TAR_CMD="tar --force-local"
        fi

        mkdir ${LLVM_INSTALL_DIR}
        ${TAR_CMD} -xf ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz -C ${LLVM_INSTALL_DIR}
        rm -rf ${HALIDE_TEMP_DIR}/llvm-prebuilt.tgz

        LLVM_COMMIT_HASH=`cat ${LLVM_INSTALL_DIR}/.halide_builder_llvm_commit`
        echo "Using LLVM v${{matrix.llvm_version}} commit=${LLVM_COMMIT_HASH}"

    - name: Configure Halide (Make)
      if: startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Configure Make
        mkdir ${HALIDE_BUILD_DIR}

        if [[ ${{matrix.target_arch}} == x86 && \
              ${{matrix.target_os}} == linux && \
              ${{matrix.target_bits}} == 32 ]]; then
          echo ::set-env name=CC::"${CC} -m32"
          echo ::set-env name=CXX::"${CXX} -m32"
          echo ::set-env name=LD::"${LD} -melf_i386"
        fi

    - name: Configure Halide (CMake)
      if: startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Configure CMake
        echo `cmake --version`

        mkdir ${HALIDE_BUILD_DIR}

        CMAKE_GEN="Ninja"
        EXTRA_CMAKE_FLAGS=

        if [[ ${{matrix.host_os}} == windows* ]]; then
          CMAKE_GEN="Visual Studio 16 2019"

          # CMAKE_TOOLCHAIN_FILE is necessary for CMake to find things installed by vcpkg
          EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
            -D CMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT//\\//}/scripts/buildsystems/vcpkg.cmake \
            -T host=x64"
          if [[ ${{matrix.target_bits}} == 32 ]]; then
            EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} -A Win32"
          else
            EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} -A x64"
          fi
        fi

        if [[ ${{matrix.target_arch}} == x86 && \
              ${{matrix.target_os}} == linux && \
              ${{matrix.target_bits}} == 32 ]]; then
          # Assume host_os is ubuntu*
          EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
            -D CMAKE_TOOLCHAIN_FILE=${HALIDE_SOURCE_DIR}/cmake/toolchain.linux-i386.cmake"
        fi

        if [[ ${{matrix.target_os}} == osx ]]; then
          # LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS=OFF is needed for compatibility with older XCode versions
          EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
                             -D LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS=FORCE_OFF"
        fi

        if [[ ${{matrix.target_arch}} == arm ]]; then
          # The arm toolchain files default to "gcc"/"g++" with no version appended,
          # but we installed specific versions, so be sure it can find those specific versions.
          if [[ ${{matrix.target_bits}} == 32 ]]; then
            export ARCH_FOR_TESTS=armv7-a
            EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
              -D CMAKE_C_COMPILER=arm-linux-gnueabihf-${{matrix.cc}} \
              -D CMAKE_CXX_COMPILER=arm-linux-gnueabihf-${{matrix.cxx}} \
              -D CMAKE_TOOLCHAIN_FILE=${HALIDE_SOURCE_DIR}/cmake/toolchain.linux-arm32.cmake"
          else
            export ARCH_FOR_TESTS=armv8-a
            EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
              -D CMAKE_C_COMPILER=aarch64-linux-gnu-${{matrix.cc}} \
              -D CMAKE_CXX_COMPILER=aarch64-linux-gnu-${{matrix.cxx}} \
              -D CMAKE_TOOLCHAIN_FILE=${HALIDE_SOURCE_DIR}/cmake/toolchain.linux-aarch64.cmake"
          fi
        fi

        REQUIRE_LLVM_VERSION="${{matrix.llvm_version}}0"
        SHARED_LIBRARY=$([ ${{matrix.build_tool}} == "cmake_shared" ] && echo "ON" || echo "OFF")

        if [[ "${{matrix.uses_python}}" == "true" ]]; then
          EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
            -D WITH_PYTHON_BINDINGS=ON"
        else
          EXTRA_CMAKE_FLAGS="${EXTRA_CMAKE_FLAGS} \
            -D WITH_PYTHON_BINDINGS=OFF"
        fi

        cmake \
          -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -D LLVM_DIR="${LLVM_INSTALL_DIR}/lib/cmake/llvm" \
          -D HALIDE_REQUIRE_LLVM_VERSION="${REQUIRE_LLVM_VERSION}" \
          -D HALIDE_SHARED_LIBRARY=${SHARED_LIBRARY} \
          -G "${CMAKE_GEN}" \
          ${EXTRA_CMAKE_FLAGS} \
          -S "${HALIDE_SOURCE_DIR}" \
          -B "${HALIDE_BUILD_DIR}"

    - name: Build Halide (Make)
      if: startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Build Halide
        cd ${HALIDE_BUILD_DIR}

        BUILD_TARGETS="distrib build_tests"
        if [[ "${{matrix.uses_python}}" == "true" ]]; then
          # build_apps requires the python bindings
          BUILD_TARGETS="${BUILD_TARGETS} build_apps build_python_bindings"
        fi

        make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} ${BUILD_TARGETS}

    - name: Build Halide (CMake)
      if: startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Build Halide
        cd ${HALIDE_BUILD_DIR}
        cmake \
          --build ${HALIDE_BUILD_DIR} \
          --config ${BUILD_TYPE} \
          -j ${PARALLEL_JOBS}

    - name: Run Tests (Make)
      if: matrix.run_tests && startsWith(matrix.build_tool, 'make')
      shell: bash
      run: |
        # Test Halide
        export TEST_TMPDIR="${HALIDE_TEMP_DIR}"
        cd ${HALIDE_BUILD_DIR}

        TEST_GROUPS_PARALLEL="internal correctness error warning generator"
        if [[ "${{matrix.uses_python}}" == "true" ]]; then
          TEST_GROUPS_PARALLEL="${TEST_GROUPS_PARALLEL} python"
        fi

        # tutorial has some performance measurements that can be flaky if we run them in parallel
        TEST_GROUPS_SERIAL="tutorial"

        # performance is never going to be reliable on VMs.
        # opengl won't work on the buildbots.
        # auto_schedule is just flaky.
        TEST_GROUPS_BROKEN="performance opengl auto_schedule"

        if [[ ${{matrix.target_bits}} == 32 ]]; then
          # TODO: Skip testing apps on 32-bit systems for now;
          # in particular, apps/autoscheduler can time out, and also has build
          # issues on ubuntu-32 at the moment (__udivdi3).
          TEST_GROUPS_BROKEN="${TEST_GROUPS_BROKEN} apps"
        else
          TEST_GROUPS_PARALLEL="${TEST_GROUPS_PARALLEL} apps"
        fi

        # Parallel
        for t in ${TEST_GROUPS_PARALLEL}; do
          make -f ${HALIDE_SOURCE_DIR}/Makefile -j ${PARALLEL_JOBS} test_${t}
        done

        # Serial
        for t in ${TEST_GROUPS_SERIAL}; do
          make -f ${HALIDE_SOURCE_DIR}/Makefile test_$t
        done

    - name: Run Tests (CMake)
      if: matrix.run_tests && startsWith(matrix.build_tool, 'cmake')
      shell: bash
      run: |
        # Test Halide
        TEST_GROUPS_PARALLEL="internal|correctness|error|warning|generator"

        if [[ "${{matrix.uses_python}}" == "true" ]]; then
          TEST_GROUPS_PARALLEL="${TEST_GROUPS_PARALLEL}|python"
        fi

        # tutorial has some performance measurements that can be flaky if we run them in parallel
        TEST_GROUPS_SERIAL="tutorial"

        # performance is never going to be reliable on VMs.
        # opengl won't work on the buildbots.
        # auto_schedule is just flaky.
        TEST_GROUPS_BROKEN="performance|opengl|auto_schedule"

        export TEST_TMPDIR="${HALIDE_TEMP_DIR}"
        cd ${HALIDE_BUILD_DIR}

        # Parallel
        ctest \
          -C ${BUILD_TYPE} \
          -j ${PARALLEL_JOBS} \
          -L "${TEST_GROUPS_PARALLEL}" \
          --output-on-failure

        # Serial
        ctest \
          -C ${BUILD_TYPE} \
          -L "${TEST_GROUPS_SERIAL}" \
          -E "${TEST_GROUPS_BROKEN}" \
          --output-on-failure
