name: Halide Presubmit Checks
on:
  pull_request:
    types: [opened, synchronize, reopened, edited, review_requested]
    paths:
      - '**.h'
      - '**.c'
      - '**.cpp'

jobs:
  cleanup-old-runs:
    name: Cancel previous instances of this Workflow
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      shell: bash
      run: |
        # set -eu

        jq_run_ids=".workflow_runs | .[] | select(.head_branch==\"${BRANCH}\" and (.status==\"in_progress\" or .status==\"queued\")) | .id"

        # get the github workflow ID

        GITHUB_API=https://api.github.com

        echo GITHUB_WORKFLOW is ${GITHUB_WORKFLOW}
        echo GITHUB_REPOSITORY is ${GITHUB_REPOSITORY}
        echo GITHUB_REF is ${GITHUB_REF}
        BRANCH=${GITHUB_REF:11}
        echo BRANCH is ${BRANCH}

        auth_header="Authorization: token ${GITHUB_TOKEN}"

        workflow_url=$(curl -s ${GITHUB_API}/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} -H "${auth_header}" | jq -r '.workflow_url' | cut -d/ -f2-)
        echo "workflow_url id: "$workflow_url

        workflow_id=${workflow_url##/*/}
        echo "workflow id: "$workflow_id

        # get the run ids
        run_ids=$(curl -s ${GITHUB_API}/repos/${GITHUB_REPOSITORY}/actions/workflows/${workflow_id}/runs -H "${auth_header}" | jq -r "${jq_run_ids}" | sort -n | head -n-1)
        echo "run ids: "$run_ids

        # cancel the previous runs
        for run_id in $run_ids
        do
          curl -s -X POST -H "${auth_header}" ${GITHUB_API}/repos/${GITHUB_REPOSITORY}/actions/runs/${run_id}/cancel
          echo "Cancelled run $run_id"
        done

  check_clang_format:
    name: Check clang-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: DoozyX/clang-format-lint-action@v0.5
        with:
          source: '.'
          extensions: 'h,c,cpp'
          clangFormatVersion: 9
  check_clang_tidy:
    name: Check clang-tidy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install clang-tidy
        run: |
          sudo apt-get install clang-tidy-9
      - name: Build Compilation DB
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B build
          [ -a build/compile_commands.json ]
      - name: Run clang-tidy
        run: |
          clang-tidy-9 --quiet -extra-arg=-Wno-unknown-warning-option -p build src/*.cpp
  check_cmake_file_lists:
    name: Check CMake file lists
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run test sources check
        run: |
          shopt -s nullglob
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/auto_schedule/CMakeLists.txt | sort) <(cd test/auto_schedule; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/correctness/CMakeLists.txt | sort) <(cd test/correctness; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/error/CMakeLists.txt | sort) <(cd test/error; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/failing_with_issue/CMakeLists.txt | sort) <(cd test/failing_with_issue; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/opengl/CMakeLists.txt | sort) <(cd test/opengl; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/performance/CMakeLists.txt | sort) <(cd test/performance; ls -1 *.{c,cpp} | sort)
          diff <(awk '/SOURCES/{flag=1;next} /\)/{flag=0} flag{print$1}' test/warning/CMakeLists.txt | sort) <(cd test/warning; ls -1 *.{c,cpp} | sort)
