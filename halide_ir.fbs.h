// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HALIDEIR_HALIDE_SERIALIZE_H_
#define FLATBUFFERS_GENERATED_HALIDEIR_HALIDE_SERIALIZE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Halide {
namespace Serialize {

struct Range;
struct RangeBuilder;

struct LetStmt;
struct LetStmtBuilder;

struct AssertStmt;
struct AssertStmtBuilder;

struct ProducerConsumer;
struct ProducerConsumerBuilder;

struct For;
struct ForBuilder;

struct ModulusRemainder;
struct ModulusRemainderBuilder;

struct Store;
struct StoreBuilder;

struct Provide;
struct ProvideBuilder;

struct Allocate;
struct AllocateBuilder;

struct Free;
struct FreeBuilder;

struct Realize;
struct RealizeBuilder;

struct Block;
struct BlockBuilder;

struct IfThenElse;
struct IfThenElseBuilder;

struct Evaluate;
struct EvaluateBuilder;

struct PrefetchDirective;
struct PrefetchDirectiveBuilder;

struct Prefetch;
struct PrefetchBuilder;

struct Acquire;
struct AcquireBuilder;

struct Fork;
struct ForkBuilder;

struct Atomic;
struct AtomicBuilder;

struct HoistedStorage;
struct HoistedStorageBuilder;

struct UndefinedStmt;
struct UndefinedStmtBuilder;

struct IntImm;
struct IntImmBuilder;

struct UIntImm;
struct UIntImmBuilder;

struct FloatImm;
struct FloatImmBuilder;

struct StringImm;
struct StringImmBuilder;

struct Cast;
struct CastBuilder;

struct Reinterpret;
struct ReinterpretBuilder;

struct Add;
struct AddBuilder;

struct Sub;
struct SubBuilder;

struct Mul;
struct MulBuilder;

struct Div;
struct DivBuilder;

struct Mod;
struct ModBuilder;

struct Min;
struct MinBuilder;

struct Max;
struct MaxBuilder;

struct EQ;
struct EQBuilder;

struct NE;
struct NEBuilder;

struct LT;
struct LTBuilder;

struct LE;
struct LEBuilder;

struct GT;
struct GTBuilder;

struct GE;
struct GEBuilder;

struct And;
struct AndBuilder;

struct Or;
struct OrBuilder;

struct Not;
struct NotBuilder;

struct Select;
struct SelectBuilder;

struct Load;
struct LoadBuilder;

struct Ramp;
struct RampBuilder;

struct Broadcast;
struct BroadcastBuilder;

struct Let;
struct LetBuilder;

struct Call;
struct CallBuilder;

struct ReductionVariable;
struct ReductionVariableBuilder;

struct ReductionDomain;
struct ReductionDomainBuilder;

struct Variable;
struct VariableBuilder;

struct Shuffle;
struct ShuffleBuilder;

struct VectorReduce;
struct VectorReduceBuilder;

struct UndefinedExpr;
struct UndefinedExprBuilder;

struct Type;
struct TypeBuilder;

struct Bound;
struct BoundBuilder;

struct StorageDim;
struct StorageDimBuilder;

struct LoopLevel;
struct LoopLevelBuilder;

struct WrapperRef;
struct WrapperRefBuilder;

struct FuncSchedule;
struct FuncScheduleBuilder;

struct Specialization;
struct SpecializationBuilder;

struct Split;
struct SplitBuilder;

struct Dim;
struct DimBuilder;

struct FuseLoopLevel;
struct FuseLoopLevelBuilder;

struct FusedPair;
struct FusedPairBuilder;

struct StageSchedule;
struct StageScheduleBuilder;

struct Definition;
struct DefinitionBuilder;

struct FuncMapping;
struct FuncMappingBuilder;

struct BufferConstraint;
struct BufferConstraintBuilder;

struct Parameter;
struct ParameterBuilder;

struct ExternalParameter;
struct ExternalParameterBuilder;

struct ExternFuncArgument;
struct ExternFuncArgumentBuilder;

struct BufferDimension;
struct BufferDimensionBuilder;

struct Buffer;
struct BufferBuilder;

struct Func;
struct FuncBuilder;

struct Pipeline;
struct PipelineBuilder;

enum class Stmt : uint8_t {
  NONE = 0,
  LetStmt = 1,
  AssertStmt = 2,
  ProducerConsumer = 3,
  For = 4,
  Store = 5,
  Provide = 6,
  Allocate = 7,
  Free = 8,
  Realize = 9,
  Block = 10,
  IfThenElse = 11,
  Evaluate = 12,
  Prefetch = 13,
  Acquire = 14,
  Fork = 15,
  Atomic = 16,
  HoistedStorage = 17,
  UndefinedStmt = 18,
  MIN = NONE,
  MAX = UndefinedStmt
};

inline const Stmt (&EnumValuesStmt())[19] {
  static const Stmt values[] = {
    Stmt::NONE,
    Stmt::LetStmt,
    Stmt::AssertStmt,
    Stmt::ProducerConsumer,
    Stmt::For,
    Stmt::Store,
    Stmt::Provide,
    Stmt::Allocate,
    Stmt::Free,
    Stmt::Realize,
    Stmt::Block,
    Stmt::IfThenElse,
    Stmt::Evaluate,
    Stmt::Prefetch,
    Stmt::Acquire,
    Stmt::Fork,
    Stmt::Atomic,
    Stmt::HoistedStorage,
    Stmt::UndefinedStmt
  };
  return values;
}

inline const char * const *EnumNamesStmt() {
  static const char * const names[20] = {
    "NONE",
    "LetStmt",
    "AssertStmt",
    "ProducerConsumer",
    "For",
    "Store",
    "Provide",
    "Allocate",
    "Free",
    "Realize",
    "Block",
    "IfThenElse",
    "Evaluate",
    "Prefetch",
    "Acquire",
    "Fork",
    "Atomic",
    "HoistedStorage",
    "UndefinedStmt",
    nullptr
  };
  return names;
}

inline const char *EnumNameStmt(Stmt e) {
  if (::flatbuffers::IsOutRange(e, Stmt::NONE, Stmt::UndefinedStmt)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStmt()[index];
}

template<typename T> struct StmtTraits {
  static const Stmt enum_value = Stmt::NONE;
};

template<> struct StmtTraits<Halide::Serialize::LetStmt> {
  static const Stmt enum_value = Stmt::LetStmt;
};

template<> struct StmtTraits<Halide::Serialize::AssertStmt> {
  static const Stmt enum_value = Stmt::AssertStmt;
};

template<> struct StmtTraits<Halide::Serialize::ProducerConsumer> {
  static const Stmt enum_value = Stmt::ProducerConsumer;
};

template<> struct StmtTraits<Halide::Serialize::For> {
  static const Stmt enum_value = Stmt::For;
};

template<> struct StmtTraits<Halide::Serialize::Store> {
  static const Stmt enum_value = Stmt::Store;
};

template<> struct StmtTraits<Halide::Serialize::Provide> {
  static const Stmt enum_value = Stmt::Provide;
};

template<> struct StmtTraits<Halide::Serialize::Allocate> {
  static const Stmt enum_value = Stmt::Allocate;
};

template<> struct StmtTraits<Halide::Serialize::Free> {
  static const Stmt enum_value = Stmt::Free;
};

template<> struct StmtTraits<Halide::Serialize::Realize> {
  static const Stmt enum_value = Stmt::Realize;
};

template<> struct StmtTraits<Halide::Serialize::Block> {
  static const Stmt enum_value = Stmt::Block;
};

template<> struct StmtTraits<Halide::Serialize::IfThenElse> {
  static const Stmt enum_value = Stmt::IfThenElse;
};

template<> struct StmtTraits<Halide::Serialize::Evaluate> {
  static const Stmt enum_value = Stmt::Evaluate;
};

template<> struct StmtTraits<Halide::Serialize::Prefetch> {
  static const Stmt enum_value = Stmt::Prefetch;
};

template<> struct StmtTraits<Halide::Serialize::Acquire> {
  static const Stmt enum_value = Stmt::Acquire;
};

template<> struct StmtTraits<Halide::Serialize::Fork> {
  static const Stmt enum_value = Stmt::Fork;
};

template<> struct StmtTraits<Halide::Serialize::Atomic> {
  static const Stmt enum_value = Stmt::Atomic;
};

template<> struct StmtTraits<Halide::Serialize::HoistedStorage> {
  static const Stmt enum_value = Stmt::HoistedStorage;
};

template<> struct StmtTraits<Halide::Serialize::UndefinedStmt> {
  static const Stmt enum_value = Stmt::UndefinedStmt;
};

bool VerifyStmt(::flatbuffers::Verifier &verifier, const void *obj, Stmt type);
bool VerifyStmtVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Stmt> *types);

enum class Expr : uint8_t {
  NONE = 0,
  IntImm = 1,
  UIntImm = 2,
  FloatImm = 3,
  StringImm = 4,
  Cast = 5,
  Reinterpret = 6,
  Add = 7,
  Sub = 8,
  Mul = 9,
  Div = 10,
  Mod = 11,
  Min = 12,
  Max = 13,
  EQ = 14,
  NE = 15,
  LT = 16,
  LE = 17,
  GT = 18,
  GE = 19,
  And = 20,
  Or = 21,
  Not = 22,
  Select = 23,
  Load = 24,
  Ramp = 25,
  Broadcast = 26,
  Let = 27,
  Call = 28,
  Variable = 29,
  Shuffle = 30,
  VectorReduce = 31,
  UndefinedExpr = 32,
  MIN = NONE,
  MAX = UndefinedExpr
};

inline const Expr (&EnumValuesExpr())[33] {
  static const Expr values[] = {
    Expr::NONE,
    Expr::IntImm,
    Expr::UIntImm,
    Expr::FloatImm,
    Expr::StringImm,
    Expr::Cast,
    Expr::Reinterpret,
    Expr::Add,
    Expr::Sub,
    Expr::Mul,
    Expr::Div,
    Expr::Mod,
    Expr::Min,
    Expr::Max,
    Expr::EQ,
    Expr::NE,
    Expr::LT,
    Expr::LE,
    Expr::GT,
    Expr::GE,
    Expr::And,
    Expr::Or,
    Expr::Not,
    Expr::Select,
    Expr::Load,
    Expr::Ramp,
    Expr::Broadcast,
    Expr::Let,
    Expr::Call,
    Expr::Variable,
    Expr::Shuffle,
    Expr::VectorReduce,
    Expr::UndefinedExpr
  };
  return values;
}

inline const char * const *EnumNamesExpr() {
  static const char * const names[34] = {
    "NONE",
    "IntImm",
    "UIntImm",
    "FloatImm",
    "StringImm",
    "Cast",
    "Reinterpret",
    "Add",
    "Sub",
    "Mul",
    "Div",
    "Mod",
    "Min",
    "Max",
    "EQ",
    "NE",
    "LT",
    "LE",
    "GT",
    "GE",
    "And",
    "Or",
    "Not",
    "Select",
    "Load",
    "Ramp",
    "Broadcast",
    "Let",
    "Call",
    "Variable",
    "Shuffle",
    "VectorReduce",
    "UndefinedExpr",
    nullptr
  };
  return names;
}

inline const char *EnumNameExpr(Expr e) {
  if (::flatbuffers::IsOutRange(e, Expr::NONE, Expr::UndefinedExpr)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesExpr()[index];
}

template<typename T> struct ExprTraits {
  static const Expr enum_value = Expr::NONE;
};

template<> struct ExprTraits<Halide::Serialize::IntImm> {
  static const Expr enum_value = Expr::IntImm;
};

template<> struct ExprTraits<Halide::Serialize::UIntImm> {
  static const Expr enum_value = Expr::UIntImm;
};

template<> struct ExprTraits<Halide::Serialize::FloatImm> {
  static const Expr enum_value = Expr::FloatImm;
};

template<> struct ExprTraits<Halide::Serialize::StringImm> {
  static const Expr enum_value = Expr::StringImm;
};

template<> struct ExprTraits<Halide::Serialize::Cast> {
  static const Expr enum_value = Expr::Cast;
};

template<> struct ExprTraits<Halide::Serialize::Reinterpret> {
  static const Expr enum_value = Expr::Reinterpret;
};

template<> struct ExprTraits<Halide::Serialize::Add> {
  static const Expr enum_value = Expr::Add;
};

template<> struct ExprTraits<Halide::Serialize::Sub> {
  static const Expr enum_value = Expr::Sub;
};

template<> struct ExprTraits<Halide::Serialize::Mul> {
  static const Expr enum_value = Expr::Mul;
};

template<> struct ExprTraits<Halide::Serialize::Div> {
  static const Expr enum_value = Expr::Div;
};

template<> struct ExprTraits<Halide::Serialize::Mod> {
  static const Expr enum_value = Expr::Mod;
};

template<> struct ExprTraits<Halide::Serialize::Min> {
  static const Expr enum_value = Expr::Min;
};

template<> struct ExprTraits<Halide::Serialize::Max> {
  static const Expr enum_value = Expr::Max;
};

template<> struct ExprTraits<Halide::Serialize::EQ> {
  static const Expr enum_value = Expr::EQ;
};

template<> struct ExprTraits<Halide::Serialize::NE> {
  static const Expr enum_value = Expr::NE;
};

template<> struct ExprTraits<Halide::Serialize::LT> {
  static const Expr enum_value = Expr::LT;
};

template<> struct ExprTraits<Halide::Serialize::LE> {
  static const Expr enum_value = Expr::LE;
};

template<> struct ExprTraits<Halide::Serialize::GT> {
  static const Expr enum_value = Expr::GT;
};

template<> struct ExprTraits<Halide::Serialize::GE> {
  static const Expr enum_value = Expr::GE;
};

template<> struct ExprTraits<Halide::Serialize::And> {
  static const Expr enum_value = Expr::And;
};

template<> struct ExprTraits<Halide::Serialize::Or> {
  static const Expr enum_value = Expr::Or;
};

template<> struct ExprTraits<Halide::Serialize::Not> {
  static const Expr enum_value = Expr::Not;
};

template<> struct ExprTraits<Halide::Serialize::Select> {
  static const Expr enum_value = Expr::Select;
};

template<> struct ExprTraits<Halide::Serialize::Load> {
  static const Expr enum_value = Expr::Load;
};

template<> struct ExprTraits<Halide::Serialize::Ramp> {
  static const Expr enum_value = Expr::Ramp;
};

template<> struct ExprTraits<Halide::Serialize::Broadcast> {
  static const Expr enum_value = Expr::Broadcast;
};

template<> struct ExprTraits<Halide::Serialize::Let> {
  static const Expr enum_value = Expr::Let;
};

template<> struct ExprTraits<Halide::Serialize::Call> {
  static const Expr enum_value = Expr::Call;
};

template<> struct ExprTraits<Halide::Serialize::Variable> {
  static const Expr enum_value = Expr::Variable;
};

template<> struct ExprTraits<Halide::Serialize::Shuffle> {
  static const Expr enum_value = Expr::Shuffle;
};

template<> struct ExprTraits<Halide::Serialize::VectorReduce> {
  static const Expr enum_value = Expr::VectorReduce;
};

template<> struct ExprTraits<Halide::Serialize::UndefinedExpr> {
  static const Expr enum_value = Expr::UndefinedExpr;
};

bool VerifyExpr(::flatbuffers::Verifier &verifier, const void *obj, Expr type);
bool VerifyExprVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Expr> *types);

enum class ForType : int8_t {
  Serial = 0,
  Parallel = 1,
  Vectorized = 2,
  Unrolled = 3,
  Extern = 4,
  GPUBlock = 5,
  GPUThread = 6,
  GPULane = 7,
  MIN = Serial,
  MAX = GPULane
};

inline const ForType (&EnumValuesForType())[8] {
  static const ForType values[] = {
    ForType::Serial,
    ForType::Parallel,
    ForType::Vectorized,
    ForType::Unrolled,
    ForType::Extern,
    ForType::GPUBlock,
    ForType::GPUThread,
    ForType::GPULane
  };
  return values;
}

inline const char * const *EnumNamesForType() {
  static const char * const names[9] = {
    "Serial",
    "Parallel",
    "Vectorized",
    "Unrolled",
    "Extern",
    "GPUBlock",
    "GPUThread",
    "GPULane",
    nullptr
  };
  return names;
}

inline const char *EnumNameForType(ForType e) {
  if (::flatbuffers::IsOutRange(e, ForType::Serial, ForType::GPULane)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesForType()[index];
}

enum class Partition : int8_t {
  Auto = 0,
  Never = 1,
  Always = 2,
  MIN = Auto,
  MAX = Always
};

inline const Partition (&EnumValuesPartition())[3] {
  static const Partition values[] = {
    Partition::Auto,
    Partition::Never,
    Partition::Always
  };
  return values;
}

inline const char * const *EnumNamesPartition() {
  static const char * const names[4] = {
    "Auto",
    "Never",
    "Always",
    nullptr
  };
  return names;
}

inline const char *EnumNamePartition(Partition e) {
  if (::flatbuffers::IsOutRange(e, Partition::Auto, Partition::Always)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPartition()[index];
}

enum class DeviceAPI : int8_t {
  None = 0,
  Host = 1,
  Default_GPU = 2,
  CUDA = 3,
  OpenCL = 4,
  OpenGLCompute = 5,
  Metal = 6,
  Hexagon = 7,
  HexagonDma = 8,
  D3D12Compute = 9,
  Vulkan = 10,
  WebGPU = 11,
  MIN = None,
  MAX = WebGPU
};

inline const DeviceAPI (&EnumValuesDeviceAPI())[12] {
  static const DeviceAPI values[] = {
    DeviceAPI::None,
    DeviceAPI::Host,
    DeviceAPI::Default_GPU,
    DeviceAPI::CUDA,
    DeviceAPI::OpenCL,
    DeviceAPI::OpenGLCompute,
    DeviceAPI::Metal,
    DeviceAPI::Hexagon,
    DeviceAPI::HexagonDma,
    DeviceAPI::D3D12Compute,
    DeviceAPI::Vulkan,
    DeviceAPI::WebGPU
  };
  return values;
}

inline const char * const *EnumNamesDeviceAPI() {
  static const char * const names[13] = {
    "None",
    "Host",
    "Default_GPU",
    "CUDA",
    "OpenCL",
    "OpenGLCompute",
    "Metal",
    "Hexagon",
    "HexagonDma",
    "D3D12Compute",
    "Vulkan",
    "WebGPU",
    nullptr
  };
  return names;
}

inline const char *EnumNameDeviceAPI(DeviceAPI e) {
  if (::flatbuffers::IsOutRange(e, DeviceAPI::None, DeviceAPI::WebGPU)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDeviceAPI()[index];
}

enum class MemoryType : int8_t {
  Auto = 0,
  Heap = 1,
  Stack = 2,
  Register = 3,
  GPUShared = 4,
  GPUTexture = 5,
  LockedCache = 6,
  VTCM = 7,
  AMXTile = 8,
  MIN = Auto,
  MAX = AMXTile
};

inline const MemoryType (&EnumValuesMemoryType())[9] {
  static const MemoryType values[] = {
    MemoryType::Auto,
    MemoryType::Heap,
    MemoryType::Stack,
    MemoryType::Register,
    MemoryType::GPUShared,
    MemoryType::GPUTexture,
    MemoryType::LockedCache,
    MemoryType::VTCM,
    MemoryType::AMXTile
  };
  return values;
}

inline const char * const *EnumNamesMemoryType() {
  static const char * const names[10] = {
    "Auto",
    "Heap",
    "Stack",
    "Register",
    "GPUShared",
    "GPUTexture",
    "LockedCache",
    "VTCM",
    "AMXTile",
    nullptr
  };
  return names;
}

inline const char *EnumNameMemoryType(MemoryType e) {
  if (::flatbuffers::IsOutRange(e, MemoryType::Auto, MemoryType::AMXTile)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMemoryType()[index];
}

enum class PrefetchBoundStrategy : uint8_t {
  Clamp = 0,
  GuardWithIf = 1,
  NonFaulting = 2,
  MIN = Clamp,
  MAX = NonFaulting
};

inline const PrefetchBoundStrategy (&EnumValuesPrefetchBoundStrategy())[3] {
  static const PrefetchBoundStrategy values[] = {
    PrefetchBoundStrategy::Clamp,
    PrefetchBoundStrategy::GuardWithIf,
    PrefetchBoundStrategy::NonFaulting
  };
  return values;
}

inline const char * const *EnumNamesPrefetchBoundStrategy() {
  static const char * const names[4] = {
    "Clamp",
    "GuardWithIf",
    "NonFaulting",
    nullptr
  };
  return names;
}

inline const char *EnumNamePrefetchBoundStrategy(PrefetchBoundStrategy e) {
  if (::flatbuffers::IsOutRange(e, PrefetchBoundStrategy::Clamp, PrefetchBoundStrategy::NonFaulting)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPrefetchBoundStrategy()[index];
}

enum class CallType : uint8_t {
  Image = 0,
  Extern = 1,
  ExternCPlusPlus = 2,
  PureExtern = 3,
  Halide = 4,
  Intrinsic = 5,
  PureIntrinsic = 6,
  MIN = Image,
  MAX = PureIntrinsic
};

inline const CallType (&EnumValuesCallType())[7] {
  static const CallType values[] = {
    CallType::Image,
    CallType::Extern,
    CallType::ExternCPlusPlus,
    CallType::PureExtern,
    CallType::Halide,
    CallType::Intrinsic,
    CallType::PureIntrinsic
  };
  return values;
}

inline const char * const *EnumNamesCallType() {
  static const char * const names[8] = {
    "Image",
    "Extern",
    "ExternCPlusPlus",
    "PureExtern",
    "Halide",
    "Intrinsic",
    "PureIntrinsic",
    nullptr
  };
  return names;
}

inline const char *EnumNameCallType(CallType e) {
  if (::flatbuffers::IsOutRange(e, CallType::Image, CallType::PureIntrinsic)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCallType()[index];
}

enum class VectorReduceOp : uint8_t {
  Add = 0,
  SaturatingAdd = 1,
  Mul = 2,
  Min = 3,
  Max = 4,
  And = 5,
  Or = 6,
  MIN = Add,
  MAX = Or
};

inline const VectorReduceOp (&EnumValuesVectorReduceOp())[7] {
  static const VectorReduceOp values[] = {
    VectorReduceOp::Add,
    VectorReduceOp::SaturatingAdd,
    VectorReduceOp::Mul,
    VectorReduceOp::Min,
    VectorReduceOp::Max,
    VectorReduceOp::And,
    VectorReduceOp::Or
  };
  return values;
}

inline const char * const *EnumNamesVectorReduceOp() {
  static const char * const names[8] = {
    "Add",
    "SaturatingAdd",
    "Mul",
    "Min",
    "Max",
    "And",
    "Or",
    nullptr
  };
  return names;
}

inline const char *EnumNameVectorReduceOp(VectorReduceOp e) {
  if (::flatbuffers::IsOutRange(e, VectorReduceOp::Add, VectorReduceOp::Or)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesVectorReduceOp()[index];
}

enum class TypeCode : int8_t {
  Int = 0,
  UInt = 1,
  Float = 2,
  Handle = 3,
  BFloat = 4,
  MIN = Int,
  MAX = BFloat
};

inline const TypeCode (&EnumValuesTypeCode())[5] {
  static const TypeCode values[] = {
    TypeCode::Int,
    TypeCode::UInt,
    TypeCode::Float,
    TypeCode::Handle,
    TypeCode::BFloat
  };
  return values;
}

inline const char * const *EnumNamesTypeCode() {
  static const char * const names[6] = {
    "Int",
    "UInt",
    "Float",
    "Handle",
    "BFloat",
    nullptr
  };
  return names;
}

inline const char *EnumNameTypeCode(TypeCode e) {
  if (::flatbuffers::IsOutRange(e, TypeCode::Int, TypeCode::BFloat)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTypeCode()[index];
}

enum class TailStrategy : uint8_t {
  RoundUp = 0,
  GuardWithIf = 1,
  Predicate = 2,
  PredicateLoads = 3,
  PredicateStores = 4,
  ShiftInwards = 5,
  Auto = 6,
  MIN = RoundUp,
  MAX = Auto
};

inline const TailStrategy (&EnumValuesTailStrategy())[7] {
  static const TailStrategy values[] = {
    TailStrategy::RoundUp,
    TailStrategy::GuardWithIf,
    TailStrategy::Predicate,
    TailStrategy::PredicateLoads,
    TailStrategy::PredicateStores,
    TailStrategy::ShiftInwards,
    TailStrategy::Auto
  };
  return values;
}

inline const char * const *EnumNamesTailStrategy() {
  static const char * const names[8] = {
    "RoundUp",
    "GuardWithIf",
    "Predicate",
    "PredicateLoads",
    "PredicateStores",
    "ShiftInwards",
    "Auto",
    nullptr
  };
  return names;
}

inline const char *EnumNameTailStrategy(TailStrategy e) {
  if (::flatbuffers::IsOutRange(e, TailStrategy::RoundUp, TailStrategy::Auto)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTailStrategy()[index];
}

enum class SplitType : uint8_t {
  SplitVar = 0,
  RenameVar = 1,
  FuseVars = 2,
  PurifyRVar = 3,
  MIN = SplitVar,
  MAX = PurifyRVar
};

inline const SplitType (&EnumValuesSplitType())[4] {
  static const SplitType values[] = {
    SplitType::SplitVar,
    SplitType::RenameVar,
    SplitType::FuseVars,
    SplitType::PurifyRVar
  };
  return values;
}

inline const char * const *EnumNamesSplitType() {
  static const char * const names[5] = {
    "SplitVar",
    "RenameVar",
    "FuseVars",
    "PurifyRVar",
    nullptr
  };
  return names;
}

inline const char *EnumNameSplitType(SplitType e) {
  if (::flatbuffers::IsOutRange(e, SplitType::SplitVar, SplitType::PurifyRVar)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSplitType()[index];
}

enum class DimType : uint8_t {
  PureVar = 0,
  PureRVar = 1,
  ImpureRVar = 2,
  MIN = PureVar,
  MAX = ImpureRVar
};

inline const DimType (&EnumValuesDimType())[3] {
  static const DimType values[] = {
    DimType::PureVar,
    DimType::PureRVar,
    DimType::ImpureRVar
  };
  return values;
}

inline const char * const *EnumNamesDimType() {
  static const char * const names[4] = {
    "PureVar",
    "PureRVar",
    "ImpureRVar",
    nullptr
  };
  return names;
}

inline const char *EnumNameDimType(DimType e) {
  if (::flatbuffers::IsOutRange(e, DimType::PureVar, DimType::ImpureRVar)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDimType()[index];
}

enum class LoopAlignStrategy : uint8_t {
  AlignStart = 0,
  AlignEnd = 1,
  NoAlign = 2,
  Auto = 3,
  MIN = AlignStart,
  MAX = Auto
};

inline const LoopAlignStrategy (&EnumValuesLoopAlignStrategy())[4] {
  static const LoopAlignStrategy values[] = {
    LoopAlignStrategy::AlignStart,
    LoopAlignStrategy::AlignEnd,
    LoopAlignStrategy::NoAlign,
    LoopAlignStrategy::Auto
  };
  return values;
}

inline const char * const *EnumNamesLoopAlignStrategy() {
  static const char * const names[5] = {
    "AlignStart",
    "AlignEnd",
    "NoAlign",
    "Auto",
    nullptr
  };
  return names;
}

inline const char *EnumNameLoopAlignStrategy(LoopAlignStrategy e) {
  if (::flatbuffers::IsOutRange(e, LoopAlignStrategy::AlignStart, LoopAlignStrategy::Auto)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLoopAlignStrategy()[index];
}

enum class NameMangling : uint8_t {
  Default = 0,
  C = 1,
  CPlusPlus = 2,
  MIN = Default,
  MAX = CPlusPlus
};

inline const NameMangling (&EnumValuesNameMangling())[3] {
  static const NameMangling values[] = {
    NameMangling::Default,
    NameMangling::C,
    NameMangling::CPlusPlus
  };
  return values;
}

inline const char * const *EnumNamesNameMangling() {
  static const char * const names[4] = {
    "Default",
    "C",
    "CPlusPlus",
    nullptr
  };
  return names;
}

inline const char *EnumNameNameMangling(NameMangling e) {
  if (::flatbuffers::IsOutRange(e, NameMangling::Default, NameMangling::CPlusPlus)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesNameMangling()[index];
}

enum class ExternFuncArgumentType : uint8_t {
  UndefinedArg = 0,
  FuncArg = 1,
  BufferArg = 2,
  ExprArg = 3,
  ImageParamArg = 4,
  MIN = UndefinedArg,
  MAX = ImageParamArg
};

inline const ExternFuncArgumentType (&EnumValuesExternFuncArgumentType())[5] {
  static const ExternFuncArgumentType values[] = {
    ExternFuncArgumentType::UndefinedArg,
    ExternFuncArgumentType::FuncArg,
    ExternFuncArgumentType::BufferArg,
    ExternFuncArgumentType::ExprArg,
    ExternFuncArgumentType::ImageParamArg
  };
  return values;
}

inline const char * const *EnumNamesExternFuncArgumentType() {
  static const char * const names[6] = {
    "UndefinedArg",
    "FuncArg",
    "BufferArg",
    "ExprArg",
    "ImageParamArg",
    nullptr
  };
  return names;
}

inline const char *EnumNameExternFuncArgumentType(ExternFuncArgumentType e) {
  if (::flatbuffers::IsOutRange(e, ExternFuncArgumentType::UndefinedArg, ExternFuncArgumentType::ImageParamArg)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesExternFuncArgumentType()[index];
}

struct Range FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RangeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN_TYPE = 4,
    VT_MIN = 6,
    VT_EXTENT_TYPE = 8,
    VT_EXTENT = 10
  };
  Halide::Serialize::Expr min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_TYPE, 0));
  }
  const void *min() const {
    return GetPointer<const void *>(VT_MIN);
  }
  template<typename T> const T *min_as() const;
  const Halide::Serialize::IntImm *min_as_IntImm() const {
    return min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_as_UIntImm() const {
    return min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_as_FloatImm() const {
    return min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_as_StringImm() const {
    return min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min()) : nullptr;
  }
  const Halide::Serialize::Cast *min_as_Cast() const {
    return min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_as_Reinterpret() const {
    return min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min()) : nullptr;
  }
  const Halide::Serialize::Add *min_as_Add() const {
    return min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min()) : nullptr;
  }
  const Halide::Serialize::Sub *min_as_Sub() const {
    return min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min()) : nullptr;
  }
  const Halide::Serialize::Mul *min_as_Mul() const {
    return min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min()) : nullptr;
  }
  const Halide::Serialize::Div *min_as_Div() const {
    return min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min()) : nullptr;
  }
  const Halide::Serialize::Mod *min_as_Mod() const {
    return min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min()) : nullptr;
  }
  const Halide::Serialize::Min *min_as_Min() const {
    return min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min()) : nullptr;
  }
  const Halide::Serialize::Max *min_as_Max() const {
    return min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min()) : nullptr;
  }
  const Halide::Serialize::EQ *min_as_EQ() const {
    return min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min()) : nullptr;
  }
  const Halide::Serialize::NE *min_as_NE() const {
    return min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min()) : nullptr;
  }
  const Halide::Serialize::LT *min_as_LT() const {
    return min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min()) : nullptr;
  }
  const Halide::Serialize::LE *min_as_LE() const {
    return min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min()) : nullptr;
  }
  const Halide::Serialize::GT *min_as_GT() const {
    return min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min()) : nullptr;
  }
  const Halide::Serialize::GE *min_as_GE() const {
    return min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min()) : nullptr;
  }
  const Halide::Serialize::And *min_as_And() const {
    return min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min()) : nullptr;
  }
  const Halide::Serialize::Or *min_as_Or() const {
    return min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min()) : nullptr;
  }
  const Halide::Serialize::Not *min_as_Not() const {
    return min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min()) : nullptr;
  }
  const Halide::Serialize::Select *min_as_Select() const {
    return min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min()) : nullptr;
  }
  const Halide::Serialize::Load *min_as_Load() const {
    return min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_as_Ramp() const {
    return min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_as_Broadcast() const {
    return min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min()) : nullptr;
  }
  const Halide::Serialize::Let *min_as_Let() const {
    return min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min()) : nullptr;
  }
  const Halide::Serialize::Call *min_as_Call() const {
    return min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min()) : nullptr;
  }
  const Halide::Serialize::Variable *min_as_Variable() const {
    return min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_as_Shuffle() const {
    return min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_as_VectorReduce() const {
    return min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_as_UndefinedExpr() const {
    return min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min()) : nullptr;
  }
  Halide::Serialize::Expr extent_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_TYPE, 0));
  }
  const void *extent() const {
    return GetPointer<const void *>(VT_EXTENT);
  }
  template<typename T> const T *extent_as() const;
  const Halide::Serialize::IntImm *extent_as_IntImm() const {
    return extent_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_as_UIntImm() const {
    return extent_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_as_FloatImm() const {
    return extent_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_as_StringImm() const {
    return extent_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_as_Cast() const {
    return extent_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_as_Reinterpret() const {
    return extent_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent()) : nullptr;
  }
  const Halide::Serialize::Add *extent_as_Add() const {
    return extent_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_as_Sub() const {
    return extent_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_as_Mul() const {
    return extent_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent()) : nullptr;
  }
  const Halide::Serialize::Div *extent_as_Div() const {
    return extent_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_as_Mod() const {
    return extent_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent()) : nullptr;
  }
  const Halide::Serialize::Min *extent_as_Min() const {
    return extent_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent()) : nullptr;
  }
  const Halide::Serialize::Max *extent_as_Max() const {
    return extent_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_as_EQ() const {
    return extent_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent()) : nullptr;
  }
  const Halide::Serialize::NE *extent_as_NE() const {
    return extent_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent()) : nullptr;
  }
  const Halide::Serialize::LT *extent_as_LT() const {
    return extent_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent()) : nullptr;
  }
  const Halide::Serialize::LE *extent_as_LE() const {
    return extent_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent()) : nullptr;
  }
  const Halide::Serialize::GT *extent_as_GT() const {
    return extent_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent()) : nullptr;
  }
  const Halide::Serialize::GE *extent_as_GE() const {
    return extent_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent()) : nullptr;
  }
  const Halide::Serialize::And *extent_as_And() const {
    return extent_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent()) : nullptr;
  }
  const Halide::Serialize::Or *extent_as_Or() const {
    return extent_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent()) : nullptr;
  }
  const Halide::Serialize::Not *extent_as_Not() const {
    return extent_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent()) : nullptr;
  }
  const Halide::Serialize::Select *extent_as_Select() const {
    return extent_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent()) : nullptr;
  }
  const Halide::Serialize::Load *extent_as_Load() const {
    return extent_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_as_Ramp() const {
    return extent_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_as_Broadcast() const {
    return extent_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Let *extent_as_Let() const {
    return extent_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent()) : nullptr;
  }
  const Halide::Serialize::Call *extent_as_Call() const {
    return extent_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_as_Variable() const {
    return extent_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_as_Shuffle() const {
    return extent_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_as_VectorReduce() const {
    return extent_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_as_UndefinedExpr() const {
    return extent_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN) &&
           VerifyExpr(verifier, min(), min_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT) &&
           VerifyExpr(verifier, extent(), extent_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Range::min_as<Halide::Serialize::IntImm>() const {
  return min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Range::min_as<Halide::Serialize::UIntImm>() const {
  return min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Range::min_as<Halide::Serialize::FloatImm>() const {
  return min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Range::min_as<Halide::Serialize::StringImm>() const {
  return min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Range::min_as<Halide::Serialize::Cast>() const {
  return min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Range::min_as<Halide::Serialize::Reinterpret>() const {
  return min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Range::min_as<Halide::Serialize::Add>() const {
  return min_as_Add();
}

template<> inline const Halide::Serialize::Sub *Range::min_as<Halide::Serialize::Sub>() const {
  return min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Range::min_as<Halide::Serialize::Mul>() const {
  return min_as_Mul();
}

template<> inline const Halide::Serialize::Div *Range::min_as<Halide::Serialize::Div>() const {
  return min_as_Div();
}

template<> inline const Halide::Serialize::Mod *Range::min_as<Halide::Serialize::Mod>() const {
  return min_as_Mod();
}

template<> inline const Halide::Serialize::Min *Range::min_as<Halide::Serialize::Min>() const {
  return min_as_Min();
}

template<> inline const Halide::Serialize::Max *Range::min_as<Halide::Serialize::Max>() const {
  return min_as_Max();
}

template<> inline const Halide::Serialize::EQ *Range::min_as<Halide::Serialize::EQ>() const {
  return min_as_EQ();
}

template<> inline const Halide::Serialize::NE *Range::min_as<Halide::Serialize::NE>() const {
  return min_as_NE();
}

template<> inline const Halide::Serialize::LT *Range::min_as<Halide::Serialize::LT>() const {
  return min_as_LT();
}

template<> inline const Halide::Serialize::LE *Range::min_as<Halide::Serialize::LE>() const {
  return min_as_LE();
}

template<> inline const Halide::Serialize::GT *Range::min_as<Halide::Serialize::GT>() const {
  return min_as_GT();
}

template<> inline const Halide::Serialize::GE *Range::min_as<Halide::Serialize::GE>() const {
  return min_as_GE();
}

template<> inline const Halide::Serialize::And *Range::min_as<Halide::Serialize::And>() const {
  return min_as_And();
}

template<> inline const Halide::Serialize::Or *Range::min_as<Halide::Serialize::Or>() const {
  return min_as_Or();
}

template<> inline const Halide::Serialize::Not *Range::min_as<Halide::Serialize::Not>() const {
  return min_as_Not();
}

template<> inline const Halide::Serialize::Select *Range::min_as<Halide::Serialize::Select>() const {
  return min_as_Select();
}

template<> inline const Halide::Serialize::Load *Range::min_as<Halide::Serialize::Load>() const {
  return min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Range::min_as<Halide::Serialize::Ramp>() const {
  return min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Range::min_as<Halide::Serialize::Broadcast>() const {
  return min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Range::min_as<Halide::Serialize::Let>() const {
  return min_as_Let();
}

template<> inline const Halide::Serialize::Call *Range::min_as<Halide::Serialize::Call>() const {
  return min_as_Call();
}

template<> inline const Halide::Serialize::Variable *Range::min_as<Halide::Serialize::Variable>() const {
  return min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Range::min_as<Halide::Serialize::Shuffle>() const {
  return min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Range::min_as<Halide::Serialize::VectorReduce>() const {
  return min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Range::min_as<Halide::Serialize::UndefinedExpr>() const {
  return min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Range::extent_as<Halide::Serialize::IntImm>() const {
  return extent_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Range::extent_as<Halide::Serialize::UIntImm>() const {
  return extent_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Range::extent_as<Halide::Serialize::FloatImm>() const {
  return extent_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Range::extent_as<Halide::Serialize::StringImm>() const {
  return extent_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Range::extent_as<Halide::Serialize::Cast>() const {
  return extent_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Range::extent_as<Halide::Serialize::Reinterpret>() const {
  return extent_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Range::extent_as<Halide::Serialize::Add>() const {
  return extent_as_Add();
}

template<> inline const Halide::Serialize::Sub *Range::extent_as<Halide::Serialize::Sub>() const {
  return extent_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Range::extent_as<Halide::Serialize::Mul>() const {
  return extent_as_Mul();
}

template<> inline const Halide::Serialize::Div *Range::extent_as<Halide::Serialize::Div>() const {
  return extent_as_Div();
}

template<> inline const Halide::Serialize::Mod *Range::extent_as<Halide::Serialize::Mod>() const {
  return extent_as_Mod();
}

template<> inline const Halide::Serialize::Min *Range::extent_as<Halide::Serialize::Min>() const {
  return extent_as_Min();
}

template<> inline const Halide::Serialize::Max *Range::extent_as<Halide::Serialize::Max>() const {
  return extent_as_Max();
}

template<> inline const Halide::Serialize::EQ *Range::extent_as<Halide::Serialize::EQ>() const {
  return extent_as_EQ();
}

template<> inline const Halide::Serialize::NE *Range::extent_as<Halide::Serialize::NE>() const {
  return extent_as_NE();
}

template<> inline const Halide::Serialize::LT *Range::extent_as<Halide::Serialize::LT>() const {
  return extent_as_LT();
}

template<> inline const Halide::Serialize::LE *Range::extent_as<Halide::Serialize::LE>() const {
  return extent_as_LE();
}

template<> inline const Halide::Serialize::GT *Range::extent_as<Halide::Serialize::GT>() const {
  return extent_as_GT();
}

template<> inline const Halide::Serialize::GE *Range::extent_as<Halide::Serialize::GE>() const {
  return extent_as_GE();
}

template<> inline const Halide::Serialize::And *Range::extent_as<Halide::Serialize::And>() const {
  return extent_as_And();
}

template<> inline const Halide::Serialize::Or *Range::extent_as<Halide::Serialize::Or>() const {
  return extent_as_Or();
}

template<> inline const Halide::Serialize::Not *Range::extent_as<Halide::Serialize::Not>() const {
  return extent_as_Not();
}

template<> inline const Halide::Serialize::Select *Range::extent_as<Halide::Serialize::Select>() const {
  return extent_as_Select();
}

template<> inline const Halide::Serialize::Load *Range::extent_as<Halide::Serialize::Load>() const {
  return extent_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Range::extent_as<Halide::Serialize::Ramp>() const {
  return extent_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Range::extent_as<Halide::Serialize::Broadcast>() const {
  return extent_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Range::extent_as<Halide::Serialize::Let>() const {
  return extent_as_Let();
}

template<> inline const Halide::Serialize::Call *Range::extent_as<Halide::Serialize::Call>() const {
  return extent_as_Call();
}

template<> inline const Halide::Serialize::Variable *Range::extent_as<Halide::Serialize::Variable>() const {
  return extent_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Range::extent_as<Halide::Serialize::Shuffle>() const {
  return extent_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Range::extent_as<Halide::Serialize::VectorReduce>() const {
  return extent_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Range::extent_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_as_UndefinedExpr();
}

struct RangeBuilder {
  typedef Range Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_min_type(Halide::Serialize::Expr min_type) {
    fbb_.AddElement<uint8_t>(Range::VT_MIN_TYPE, static_cast<uint8_t>(min_type), 0);
  }
  void add_min(::flatbuffers::Offset<void> min) {
    fbb_.AddOffset(Range::VT_MIN, min);
  }
  void add_extent_type(Halide::Serialize::Expr extent_type) {
    fbb_.AddElement<uint8_t>(Range::VT_EXTENT_TYPE, static_cast<uint8_t>(extent_type), 0);
  }
  void add_extent(::flatbuffers::Offset<void> extent) {
    fbb_.AddOffset(Range::VT_EXTENT, extent);
  }
  explicit RangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Range> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Range>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Range> CreateRange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0) {
  RangeBuilder builder_(_fbb);
  builder_.add_extent(extent);
  builder_.add_min(min);
  builder_.add_extent_type(extent_type);
  builder_.add_min_type(min_type);
  return builder_.Finish();
}

struct Range::Traits {
  using type = Range;
  static auto constexpr Create = CreateRange;
};

struct LetStmt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LetStmtBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8,
    VT_BODY_TYPE = 10,
    VT_BODY = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *LetStmt::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *LetStmt::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *LetStmt::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *LetStmt::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *LetStmt::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *LetStmt::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *LetStmt::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *LetStmt::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *LetStmt::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *LetStmt::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *LetStmt::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *LetStmt::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *LetStmt::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *LetStmt::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *LetStmt::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *LetStmt::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *LetStmt::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *LetStmt::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *LetStmt::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *LetStmt::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *LetStmt::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *LetStmt::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *LetStmt::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *LetStmt::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *LetStmt::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *LetStmt::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *LetStmt::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *LetStmt::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *LetStmt::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *LetStmt::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *LetStmt::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *LetStmt::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *LetStmt::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *LetStmt::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *LetStmt::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *LetStmt::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *LetStmt::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *LetStmt::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *LetStmt::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *LetStmt::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *LetStmt::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *LetStmt::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *LetStmt::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *LetStmt::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *LetStmt::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *LetStmt::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *LetStmt::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *LetStmt::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *LetStmt::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *LetStmt::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct LetStmtBuilder {
  typedef LetStmt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(LetStmt::VT_NAME, name);
  }
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(LetStmt::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(LetStmt::VT_VALUE, value);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(LetStmt::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(LetStmt::VT_BODY, body);
  }
  explicit LetStmtBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LetStmt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LetStmt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LetStmt> CreateLetStmt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  LetStmtBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct LetStmt::Traits {
  using type = LetStmt;
  static auto constexpr Create = CreateLetStmt;
};

inline ::flatbuffers::Offset<LetStmt> CreateLetStmtDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateLetStmt(
      _fbb,
      name__,
      value_type,
      value,
      body_type,
      body);
}

struct AssertStmt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AssertStmtBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONDITION_TYPE = 4,
    VT_CONDITION = 6,
    VT_MESSAGE_TYPE = 8,
    VT_MESSAGE = 10
  };
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Expr message_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const Halide::Serialize::IntImm *message_as_IntImm() const {
    return message_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(message()) : nullptr;
  }
  const Halide::Serialize::UIntImm *message_as_UIntImm() const {
    return message_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(message()) : nullptr;
  }
  const Halide::Serialize::FloatImm *message_as_FloatImm() const {
    return message_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(message()) : nullptr;
  }
  const Halide::Serialize::StringImm *message_as_StringImm() const {
    return message_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(message()) : nullptr;
  }
  const Halide::Serialize::Cast *message_as_Cast() const {
    return message_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(message()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *message_as_Reinterpret() const {
    return message_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(message()) : nullptr;
  }
  const Halide::Serialize::Add *message_as_Add() const {
    return message_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(message()) : nullptr;
  }
  const Halide::Serialize::Sub *message_as_Sub() const {
    return message_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(message()) : nullptr;
  }
  const Halide::Serialize::Mul *message_as_Mul() const {
    return message_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(message()) : nullptr;
  }
  const Halide::Serialize::Div *message_as_Div() const {
    return message_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(message()) : nullptr;
  }
  const Halide::Serialize::Mod *message_as_Mod() const {
    return message_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(message()) : nullptr;
  }
  const Halide::Serialize::Min *message_as_Min() const {
    return message_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(message()) : nullptr;
  }
  const Halide::Serialize::Max *message_as_Max() const {
    return message_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(message()) : nullptr;
  }
  const Halide::Serialize::EQ *message_as_EQ() const {
    return message_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(message()) : nullptr;
  }
  const Halide::Serialize::NE *message_as_NE() const {
    return message_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(message()) : nullptr;
  }
  const Halide::Serialize::LT *message_as_LT() const {
    return message_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(message()) : nullptr;
  }
  const Halide::Serialize::LE *message_as_LE() const {
    return message_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(message()) : nullptr;
  }
  const Halide::Serialize::GT *message_as_GT() const {
    return message_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(message()) : nullptr;
  }
  const Halide::Serialize::GE *message_as_GE() const {
    return message_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(message()) : nullptr;
  }
  const Halide::Serialize::And *message_as_And() const {
    return message_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(message()) : nullptr;
  }
  const Halide::Serialize::Or *message_as_Or() const {
    return message_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(message()) : nullptr;
  }
  const Halide::Serialize::Not *message_as_Not() const {
    return message_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(message()) : nullptr;
  }
  const Halide::Serialize::Select *message_as_Select() const {
    return message_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(message()) : nullptr;
  }
  const Halide::Serialize::Load *message_as_Load() const {
    return message_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(message()) : nullptr;
  }
  const Halide::Serialize::Ramp *message_as_Ramp() const {
    return message_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(message()) : nullptr;
  }
  const Halide::Serialize::Broadcast *message_as_Broadcast() const {
    return message_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(message()) : nullptr;
  }
  const Halide::Serialize::Let *message_as_Let() const {
    return message_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(message()) : nullptr;
  }
  const Halide::Serialize::Call *message_as_Call() const {
    return message_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(message()) : nullptr;
  }
  const Halide::Serialize::Variable *message_as_Variable() const {
    return message_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(message()) : nullptr;
  }
  const Halide::Serialize::Shuffle *message_as_Shuffle() const {
    return message_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(message()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *message_as_VectorReduce() const {
    return message_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(message()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *message_as_UndefinedExpr() const {
    return message_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(message()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyExpr(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *AssertStmt::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *AssertStmt::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *AssertStmt::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *AssertStmt::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *AssertStmt::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *AssertStmt::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *AssertStmt::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *AssertStmt::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *AssertStmt::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *AssertStmt::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *AssertStmt::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *AssertStmt::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *AssertStmt::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *AssertStmt::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *AssertStmt::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *AssertStmt::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *AssertStmt::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *AssertStmt::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *AssertStmt::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *AssertStmt::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *AssertStmt::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *AssertStmt::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *AssertStmt::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *AssertStmt::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *AssertStmt::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *AssertStmt::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *AssertStmt::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *AssertStmt::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *AssertStmt::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *AssertStmt::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *AssertStmt::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *AssertStmt::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *AssertStmt::message_as<Halide::Serialize::IntImm>() const {
  return message_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *AssertStmt::message_as<Halide::Serialize::UIntImm>() const {
  return message_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *AssertStmt::message_as<Halide::Serialize::FloatImm>() const {
  return message_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *AssertStmt::message_as<Halide::Serialize::StringImm>() const {
  return message_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *AssertStmt::message_as<Halide::Serialize::Cast>() const {
  return message_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *AssertStmt::message_as<Halide::Serialize::Reinterpret>() const {
  return message_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *AssertStmt::message_as<Halide::Serialize::Add>() const {
  return message_as_Add();
}

template<> inline const Halide::Serialize::Sub *AssertStmt::message_as<Halide::Serialize::Sub>() const {
  return message_as_Sub();
}

template<> inline const Halide::Serialize::Mul *AssertStmt::message_as<Halide::Serialize::Mul>() const {
  return message_as_Mul();
}

template<> inline const Halide::Serialize::Div *AssertStmt::message_as<Halide::Serialize::Div>() const {
  return message_as_Div();
}

template<> inline const Halide::Serialize::Mod *AssertStmt::message_as<Halide::Serialize::Mod>() const {
  return message_as_Mod();
}

template<> inline const Halide::Serialize::Min *AssertStmt::message_as<Halide::Serialize::Min>() const {
  return message_as_Min();
}

template<> inline const Halide::Serialize::Max *AssertStmt::message_as<Halide::Serialize::Max>() const {
  return message_as_Max();
}

template<> inline const Halide::Serialize::EQ *AssertStmt::message_as<Halide::Serialize::EQ>() const {
  return message_as_EQ();
}

template<> inline const Halide::Serialize::NE *AssertStmt::message_as<Halide::Serialize::NE>() const {
  return message_as_NE();
}

template<> inline const Halide::Serialize::LT *AssertStmt::message_as<Halide::Serialize::LT>() const {
  return message_as_LT();
}

template<> inline const Halide::Serialize::LE *AssertStmt::message_as<Halide::Serialize::LE>() const {
  return message_as_LE();
}

template<> inline const Halide::Serialize::GT *AssertStmt::message_as<Halide::Serialize::GT>() const {
  return message_as_GT();
}

template<> inline const Halide::Serialize::GE *AssertStmt::message_as<Halide::Serialize::GE>() const {
  return message_as_GE();
}

template<> inline const Halide::Serialize::And *AssertStmt::message_as<Halide::Serialize::And>() const {
  return message_as_And();
}

template<> inline const Halide::Serialize::Or *AssertStmt::message_as<Halide::Serialize::Or>() const {
  return message_as_Or();
}

template<> inline const Halide::Serialize::Not *AssertStmt::message_as<Halide::Serialize::Not>() const {
  return message_as_Not();
}

template<> inline const Halide::Serialize::Select *AssertStmt::message_as<Halide::Serialize::Select>() const {
  return message_as_Select();
}

template<> inline const Halide::Serialize::Load *AssertStmt::message_as<Halide::Serialize::Load>() const {
  return message_as_Load();
}

template<> inline const Halide::Serialize::Ramp *AssertStmt::message_as<Halide::Serialize::Ramp>() const {
  return message_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *AssertStmt::message_as<Halide::Serialize::Broadcast>() const {
  return message_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *AssertStmt::message_as<Halide::Serialize::Let>() const {
  return message_as_Let();
}

template<> inline const Halide::Serialize::Call *AssertStmt::message_as<Halide::Serialize::Call>() const {
  return message_as_Call();
}

template<> inline const Halide::Serialize::Variable *AssertStmt::message_as<Halide::Serialize::Variable>() const {
  return message_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *AssertStmt::message_as<Halide::Serialize::Shuffle>() const {
  return message_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *AssertStmt::message_as<Halide::Serialize::VectorReduce>() const {
  return message_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *AssertStmt::message_as<Halide::Serialize::UndefinedExpr>() const {
  return message_as_UndefinedExpr();
}

struct AssertStmtBuilder {
  typedef AssertStmt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(AssertStmt::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(AssertStmt::VT_CONDITION, condition);
  }
  void add_message_type(Halide::Serialize::Expr message_type) {
    fbb_.AddElement<uint8_t>(AssertStmt::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(::flatbuffers::Offset<void> message) {
    fbb_.AddOffset(AssertStmt::VT_MESSAGE, message);
  }
  explicit AssertStmtBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AssertStmt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AssertStmt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AssertStmt> CreateAssertStmt(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Expr message_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> message = 0) {
  AssertStmtBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_condition(condition);
  builder_.add_message_type(message_type);
  builder_.add_condition_type(condition_type);
  return builder_.Finish();
}

struct AssertStmt::Traits {
  using type = AssertStmt;
  static auto constexpr Create = CreateAssertStmt;
};

struct ProducerConsumer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProducerConsumerBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_IS_PRODUCER = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool is_producer() const {
    return GetField<uint8_t>(VT_IS_PRODUCER, 0) != 0;
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_IS_PRODUCER, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::LetStmt *ProducerConsumer::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *ProducerConsumer::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *ProducerConsumer::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *ProducerConsumer::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *ProducerConsumer::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *ProducerConsumer::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *ProducerConsumer::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *ProducerConsumer::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *ProducerConsumer::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *ProducerConsumer::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *ProducerConsumer::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *ProducerConsumer::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *ProducerConsumer::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *ProducerConsumer::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *ProducerConsumer::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *ProducerConsumer::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *ProducerConsumer::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *ProducerConsumer::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct ProducerConsumerBuilder {
  typedef ProducerConsumer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ProducerConsumer::VT_NAME, name);
  }
  void add_is_producer(bool is_producer) {
    fbb_.AddElement<uint8_t>(ProducerConsumer::VT_IS_PRODUCER, static_cast<uint8_t>(is_producer), 0);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(ProducerConsumer::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(ProducerConsumer::VT_BODY, body);
  }
  explicit ProducerConsumerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProducerConsumer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProducerConsumer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProducerConsumer> CreateProducerConsumer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    bool is_producer = false,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  ProducerConsumerBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_is_producer(is_producer);
  return builder_.Finish();
}

struct ProducerConsumer::Traits {
  using type = ProducerConsumer;
  static auto constexpr Create = CreateProducerConsumer;
};

inline ::flatbuffers::Offset<ProducerConsumer> CreateProducerConsumerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    bool is_producer = false,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateProducerConsumer(
      _fbb,
      name__,
      is_producer,
      body_type,
      body);
}

struct For FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ForBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MIN_TYPE = 6,
    VT_MIN = 8,
    VT_EXTENT_TYPE = 10,
    VT_EXTENT = 12,
    VT_FOR_TYPE = 14,
    VT_PARTITION_POLICY = 16,
    VT_DEVICE_API = 18,
    VT_BODY_TYPE = 20,
    VT_BODY = 22
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Expr min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_TYPE, 0));
  }
  const void *min() const {
    return GetPointer<const void *>(VT_MIN);
  }
  template<typename T> const T *min_as() const;
  const Halide::Serialize::IntImm *min_as_IntImm() const {
    return min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_as_UIntImm() const {
    return min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_as_FloatImm() const {
    return min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_as_StringImm() const {
    return min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min()) : nullptr;
  }
  const Halide::Serialize::Cast *min_as_Cast() const {
    return min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_as_Reinterpret() const {
    return min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min()) : nullptr;
  }
  const Halide::Serialize::Add *min_as_Add() const {
    return min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min()) : nullptr;
  }
  const Halide::Serialize::Sub *min_as_Sub() const {
    return min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min()) : nullptr;
  }
  const Halide::Serialize::Mul *min_as_Mul() const {
    return min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min()) : nullptr;
  }
  const Halide::Serialize::Div *min_as_Div() const {
    return min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min()) : nullptr;
  }
  const Halide::Serialize::Mod *min_as_Mod() const {
    return min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min()) : nullptr;
  }
  const Halide::Serialize::Min *min_as_Min() const {
    return min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min()) : nullptr;
  }
  const Halide::Serialize::Max *min_as_Max() const {
    return min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min()) : nullptr;
  }
  const Halide::Serialize::EQ *min_as_EQ() const {
    return min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min()) : nullptr;
  }
  const Halide::Serialize::NE *min_as_NE() const {
    return min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min()) : nullptr;
  }
  const Halide::Serialize::LT *min_as_LT() const {
    return min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min()) : nullptr;
  }
  const Halide::Serialize::LE *min_as_LE() const {
    return min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min()) : nullptr;
  }
  const Halide::Serialize::GT *min_as_GT() const {
    return min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min()) : nullptr;
  }
  const Halide::Serialize::GE *min_as_GE() const {
    return min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min()) : nullptr;
  }
  const Halide::Serialize::And *min_as_And() const {
    return min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min()) : nullptr;
  }
  const Halide::Serialize::Or *min_as_Or() const {
    return min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min()) : nullptr;
  }
  const Halide::Serialize::Not *min_as_Not() const {
    return min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min()) : nullptr;
  }
  const Halide::Serialize::Select *min_as_Select() const {
    return min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min()) : nullptr;
  }
  const Halide::Serialize::Load *min_as_Load() const {
    return min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_as_Ramp() const {
    return min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_as_Broadcast() const {
    return min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min()) : nullptr;
  }
  const Halide::Serialize::Let *min_as_Let() const {
    return min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min()) : nullptr;
  }
  const Halide::Serialize::Call *min_as_Call() const {
    return min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min()) : nullptr;
  }
  const Halide::Serialize::Variable *min_as_Variable() const {
    return min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_as_Shuffle() const {
    return min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_as_VectorReduce() const {
    return min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_as_UndefinedExpr() const {
    return min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min()) : nullptr;
  }
  Halide::Serialize::Expr extent_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_TYPE, 0));
  }
  const void *extent() const {
    return GetPointer<const void *>(VT_EXTENT);
  }
  template<typename T> const T *extent_as() const;
  const Halide::Serialize::IntImm *extent_as_IntImm() const {
    return extent_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_as_UIntImm() const {
    return extent_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_as_FloatImm() const {
    return extent_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_as_StringImm() const {
    return extent_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_as_Cast() const {
    return extent_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_as_Reinterpret() const {
    return extent_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent()) : nullptr;
  }
  const Halide::Serialize::Add *extent_as_Add() const {
    return extent_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_as_Sub() const {
    return extent_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_as_Mul() const {
    return extent_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent()) : nullptr;
  }
  const Halide::Serialize::Div *extent_as_Div() const {
    return extent_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_as_Mod() const {
    return extent_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent()) : nullptr;
  }
  const Halide::Serialize::Min *extent_as_Min() const {
    return extent_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent()) : nullptr;
  }
  const Halide::Serialize::Max *extent_as_Max() const {
    return extent_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_as_EQ() const {
    return extent_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent()) : nullptr;
  }
  const Halide::Serialize::NE *extent_as_NE() const {
    return extent_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent()) : nullptr;
  }
  const Halide::Serialize::LT *extent_as_LT() const {
    return extent_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent()) : nullptr;
  }
  const Halide::Serialize::LE *extent_as_LE() const {
    return extent_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent()) : nullptr;
  }
  const Halide::Serialize::GT *extent_as_GT() const {
    return extent_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent()) : nullptr;
  }
  const Halide::Serialize::GE *extent_as_GE() const {
    return extent_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent()) : nullptr;
  }
  const Halide::Serialize::And *extent_as_And() const {
    return extent_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent()) : nullptr;
  }
  const Halide::Serialize::Or *extent_as_Or() const {
    return extent_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent()) : nullptr;
  }
  const Halide::Serialize::Not *extent_as_Not() const {
    return extent_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent()) : nullptr;
  }
  const Halide::Serialize::Select *extent_as_Select() const {
    return extent_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent()) : nullptr;
  }
  const Halide::Serialize::Load *extent_as_Load() const {
    return extent_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_as_Ramp() const {
    return extent_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_as_Broadcast() const {
    return extent_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Let *extent_as_Let() const {
    return extent_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent()) : nullptr;
  }
  const Halide::Serialize::Call *extent_as_Call() const {
    return extent_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_as_Variable() const {
    return extent_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_as_Shuffle() const {
    return extent_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_as_VectorReduce() const {
    return extent_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_as_UndefinedExpr() const {
    return extent_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent()) : nullptr;
  }
  Halide::Serialize::ForType for_type() const {
    return static_cast<Halide::Serialize::ForType>(GetField<int8_t>(VT_FOR_TYPE, 0));
  }
  Halide::Serialize::Partition partition_policy() const {
    return static_cast<Halide::Serialize::Partition>(GetField<int8_t>(VT_PARTITION_POLICY, 0));
  }
  Halide::Serialize::DeviceAPI device_api() const {
    return static_cast<Halide::Serialize::DeviceAPI>(GetField<int8_t>(VT_DEVICE_API, 0));
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN) &&
           VerifyExpr(verifier, min(), min_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT) &&
           VerifyExpr(verifier, extent(), extent_type()) &&
           VerifyField<int8_t>(verifier, VT_FOR_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_PARTITION_POLICY, 1) &&
           VerifyField<int8_t>(verifier, VT_DEVICE_API, 1) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *For::min_as<Halide::Serialize::IntImm>() const {
  return min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *For::min_as<Halide::Serialize::UIntImm>() const {
  return min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *For::min_as<Halide::Serialize::FloatImm>() const {
  return min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *For::min_as<Halide::Serialize::StringImm>() const {
  return min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *For::min_as<Halide::Serialize::Cast>() const {
  return min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *For::min_as<Halide::Serialize::Reinterpret>() const {
  return min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *For::min_as<Halide::Serialize::Add>() const {
  return min_as_Add();
}

template<> inline const Halide::Serialize::Sub *For::min_as<Halide::Serialize::Sub>() const {
  return min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *For::min_as<Halide::Serialize::Mul>() const {
  return min_as_Mul();
}

template<> inline const Halide::Serialize::Div *For::min_as<Halide::Serialize::Div>() const {
  return min_as_Div();
}

template<> inline const Halide::Serialize::Mod *For::min_as<Halide::Serialize::Mod>() const {
  return min_as_Mod();
}

template<> inline const Halide::Serialize::Min *For::min_as<Halide::Serialize::Min>() const {
  return min_as_Min();
}

template<> inline const Halide::Serialize::Max *For::min_as<Halide::Serialize::Max>() const {
  return min_as_Max();
}

template<> inline const Halide::Serialize::EQ *For::min_as<Halide::Serialize::EQ>() const {
  return min_as_EQ();
}

template<> inline const Halide::Serialize::NE *For::min_as<Halide::Serialize::NE>() const {
  return min_as_NE();
}

template<> inline const Halide::Serialize::LT *For::min_as<Halide::Serialize::LT>() const {
  return min_as_LT();
}

template<> inline const Halide::Serialize::LE *For::min_as<Halide::Serialize::LE>() const {
  return min_as_LE();
}

template<> inline const Halide::Serialize::GT *For::min_as<Halide::Serialize::GT>() const {
  return min_as_GT();
}

template<> inline const Halide::Serialize::GE *For::min_as<Halide::Serialize::GE>() const {
  return min_as_GE();
}

template<> inline const Halide::Serialize::And *For::min_as<Halide::Serialize::And>() const {
  return min_as_And();
}

template<> inline const Halide::Serialize::Or *For::min_as<Halide::Serialize::Or>() const {
  return min_as_Or();
}

template<> inline const Halide::Serialize::Not *For::min_as<Halide::Serialize::Not>() const {
  return min_as_Not();
}

template<> inline const Halide::Serialize::Select *For::min_as<Halide::Serialize::Select>() const {
  return min_as_Select();
}

template<> inline const Halide::Serialize::Load *For::min_as<Halide::Serialize::Load>() const {
  return min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *For::min_as<Halide::Serialize::Ramp>() const {
  return min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *For::min_as<Halide::Serialize::Broadcast>() const {
  return min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *For::min_as<Halide::Serialize::Let>() const {
  return min_as_Let();
}

template<> inline const Halide::Serialize::Call *For::min_as<Halide::Serialize::Call>() const {
  return min_as_Call();
}

template<> inline const Halide::Serialize::Variable *For::min_as<Halide::Serialize::Variable>() const {
  return min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *For::min_as<Halide::Serialize::Shuffle>() const {
  return min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *For::min_as<Halide::Serialize::VectorReduce>() const {
  return min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *For::min_as<Halide::Serialize::UndefinedExpr>() const {
  return min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *For::extent_as<Halide::Serialize::IntImm>() const {
  return extent_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *For::extent_as<Halide::Serialize::UIntImm>() const {
  return extent_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *For::extent_as<Halide::Serialize::FloatImm>() const {
  return extent_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *For::extent_as<Halide::Serialize::StringImm>() const {
  return extent_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *For::extent_as<Halide::Serialize::Cast>() const {
  return extent_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *For::extent_as<Halide::Serialize::Reinterpret>() const {
  return extent_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *For::extent_as<Halide::Serialize::Add>() const {
  return extent_as_Add();
}

template<> inline const Halide::Serialize::Sub *For::extent_as<Halide::Serialize::Sub>() const {
  return extent_as_Sub();
}

template<> inline const Halide::Serialize::Mul *For::extent_as<Halide::Serialize::Mul>() const {
  return extent_as_Mul();
}

template<> inline const Halide::Serialize::Div *For::extent_as<Halide::Serialize::Div>() const {
  return extent_as_Div();
}

template<> inline const Halide::Serialize::Mod *For::extent_as<Halide::Serialize::Mod>() const {
  return extent_as_Mod();
}

template<> inline const Halide::Serialize::Min *For::extent_as<Halide::Serialize::Min>() const {
  return extent_as_Min();
}

template<> inline const Halide::Serialize::Max *For::extent_as<Halide::Serialize::Max>() const {
  return extent_as_Max();
}

template<> inline const Halide::Serialize::EQ *For::extent_as<Halide::Serialize::EQ>() const {
  return extent_as_EQ();
}

template<> inline const Halide::Serialize::NE *For::extent_as<Halide::Serialize::NE>() const {
  return extent_as_NE();
}

template<> inline const Halide::Serialize::LT *For::extent_as<Halide::Serialize::LT>() const {
  return extent_as_LT();
}

template<> inline const Halide::Serialize::LE *For::extent_as<Halide::Serialize::LE>() const {
  return extent_as_LE();
}

template<> inline const Halide::Serialize::GT *For::extent_as<Halide::Serialize::GT>() const {
  return extent_as_GT();
}

template<> inline const Halide::Serialize::GE *For::extent_as<Halide::Serialize::GE>() const {
  return extent_as_GE();
}

template<> inline const Halide::Serialize::And *For::extent_as<Halide::Serialize::And>() const {
  return extent_as_And();
}

template<> inline const Halide::Serialize::Or *For::extent_as<Halide::Serialize::Or>() const {
  return extent_as_Or();
}

template<> inline const Halide::Serialize::Not *For::extent_as<Halide::Serialize::Not>() const {
  return extent_as_Not();
}

template<> inline const Halide::Serialize::Select *For::extent_as<Halide::Serialize::Select>() const {
  return extent_as_Select();
}

template<> inline const Halide::Serialize::Load *For::extent_as<Halide::Serialize::Load>() const {
  return extent_as_Load();
}

template<> inline const Halide::Serialize::Ramp *For::extent_as<Halide::Serialize::Ramp>() const {
  return extent_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *For::extent_as<Halide::Serialize::Broadcast>() const {
  return extent_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *For::extent_as<Halide::Serialize::Let>() const {
  return extent_as_Let();
}

template<> inline const Halide::Serialize::Call *For::extent_as<Halide::Serialize::Call>() const {
  return extent_as_Call();
}

template<> inline const Halide::Serialize::Variable *For::extent_as<Halide::Serialize::Variable>() const {
  return extent_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *For::extent_as<Halide::Serialize::Shuffle>() const {
  return extent_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *For::extent_as<Halide::Serialize::VectorReduce>() const {
  return extent_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *For::extent_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *For::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *For::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *For::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *For::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *For::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *For::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *For::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *For::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *For::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *For::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *For::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *For::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *For::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *For::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *For::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *For::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *For::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *For::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct ForBuilder {
  typedef For Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(For::VT_NAME, name);
  }
  void add_min_type(Halide::Serialize::Expr min_type) {
    fbb_.AddElement<uint8_t>(For::VT_MIN_TYPE, static_cast<uint8_t>(min_type), 0);
  }
  void add_min(::flatbuffers::Offset<void> min) {
    fbb_.AddOffset(For::VT_MIN, min);
  }
  void add_extent_type(Halide::Serialize::Expr extent_type) {
    fbb_.AddElement<uint8_t>(For::VT_EXTENT_TYPE, static_cast<uint8_t>(extent_type), 0);
  }
  void add_extent(::flatbuffers::Offset<void> extent) {
    fbb_.AddOffset(For::VT_EXTENT, extent);
  }
  void add_for_type(Halide::Serialize::ForType for_type) {
    fbb_.AddElement<int8_t>(For::VT_FOR_TYPE, static_cast<int8_t>(for_type), 0);
  }
  void add_partition_policy(Halide::Serialize::Partition partition_policy) {
    fbb_.AddElement<int8_t>(For::VT_PARTITION_POLICY, static_cast<int8_t>(partition_policy), 0);
  }
  void add_device_api(Halide::Serialize::DeviceAPI device_api) {
    fbb_.AddElement<int8_t>(For::VT_DEVICE_API, static_cast<int8_t>(device_api), 0);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(For::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(For::VT_BODY, body);
  }
  explicit ForBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<For> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<For>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<For> CreateFor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0,
    Halide::Serialize::ForType for_type = Halide::Serialize::ForType::Serial,
    Halide::Serialize::Partition partition_policy = Halide::Serialize::Partition::Auto,
    Halide::Serialize::DeviceAPI device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  ForBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_extent(extent);
  builder_.add_min(min);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_device_api(device_api);
  builder_.add_partition_policy(partition_policy);
  builder_.add_for_type(for_type);
  builder_.add_extent_type(extent_type);
  builder_.add_min_type(min_type);
  return builder_.Finish();
}

struct For::Traits {
  using type = For;
  static auto constexpr Create = CreateFor;
};

inline ::flatbuffers::Offset<For> CreateForDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0,
    Halide::Serialize::ForType for_type = Halide::Serialize::ForType::Serial,
    Halide::Serialize::Partition partition_policy = Halide::Serialize::Partition::Auto,
    Halide::Serialize::DeviceAPI device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateFor(
      _fbb,
      name__,
      min_type,
      min,
      extent_type,
      extent,
      for_type,
      partition_policy,
      device_api,
      body_type,
      body);
}

struct ModulusRemainder FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModulusRemainderBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODULUS = 4,
    VT_REMAINDER = 6
  };
  int64_t modulus() const {
    return GetField<int64_t>(VT_MODULUS, 0);
  }
  int64_t remainder() const {
    return GetField<int64_t>(VT_REMAINDER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_MODULUS, 8) &&
           VerifyField<int64_t>(verifier, VT_REMAINDER, 8) &&
           verifier.EndTable();
  }
};

struct ModulusRemainderBuilder {
  typedef ModulusRemainder Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_modulus(int64_t modulus) {
    fbb_.AddElement<int64_t>(ModulusRemainder::VT_MODULUS, modulus, 0);
  }
  void add_remainder(int64_t remainder) {
    fbb_.AddElement<int64_t>(ModulusRemainder::VT_REMAINDER, remainder, 0);
  }
  explicit ModulusRemainderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ModulusRemainder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ModulusRemainder>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ModulusRemainder> CreateModulusRemainder(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t modulus = 0,
    int64_t remainder = 0) {
  ModulusRemainderBuilder builder_(_fbb);
  builder_.add_remainder(remainder);
  builder_.add_modulus(modulus);
  return builder_.Finish();
}

struct ModulusRemainder::Traits {
  using type = ModulusRemainder;
  static auto constexpr Create = CreateModulusRemainder;
};

struct Store FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StoreBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PREDICATE_TYPE = 6,
    VT_PREDICATE = 8,
    VT_VALUE_TYPE = 10,
    VT_VALUE = 12,
    VT_INDEX_TYPE = 14,
    VT_INDEX = 16,
    VT_PARAM_NAME = 18,
    VT_ALIGNMENT = 20
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Expr predicate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_PREDICATE_TYPE, 0));
  }
  const void *predicate() const {
    return GetPointer<const void *>(VT_PREDICATE);
  }
  template<typename T> const T *predicate_as() const;
  const Halide::Serialize::IntImm *predicate_as_IntImm() const {
    return predicate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *predicate_as_UIntImm() const {
    return predicate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *predicate_as_FloatImm() const {
    return predicate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::StringImm *predicate_as_StringImm() const {
    return predicate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Cast *predicate_as_Cast() const {
    return predicate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *predicate_as_Reinterpret() const {
    return predicate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Add *predicate_as_Add() const {
    return predicate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Sub *predicate_as_Sub() const {
    return predicate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mul *predicate_as_Mul() const {
    return predicate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Div *predicate_as_Div() const {
    return predicate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mod *predicate_as_Mod() const {
    return predicate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Min *predicate_as_Min() const {
    return predicate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Max *predicate_as_Max() const {
    return predicate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(predicate()) : nullptr;
  }
  const Halide::Serialize::EQ *predicate_as_EQ() const {
    return predicate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(predicate()) : nullptr;
  }
  const Halide::Serialize::NE *predicate_as_NE() const {
    return predicate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LT *predicate_as_LT() const {
    return predicate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LE *predicate_as_LE() const {
    return predicate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GT *predicate_as_GT() const {
    return predicate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GE *predicate_as_GE() const {
    return predicate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::And *predicate_as_And() const {
    return predicate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Or *predicate_as_Or() const {
    return predicate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Not *predicate_as_Not() const {
    return predicate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Select *predicate_as_Select() const {
    return predicate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Load *predicate_as_Load() const {
    return predicate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Ramp *predicate_as_Ramp() const {
    return predicate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *predicate_as_Broadcast() const {
    return predicate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Let *predicate_as_Let() const {
    return predicate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Call *predicate_as_Call() const {
    return predicate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Variable *predicate_as_Variable() const {
    return predicate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *predicate_as_Shuffle() const {
    return predicate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(predicate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *predicate_as_VectorReduce() const {
    return predicate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *predicate_as_UndefinedExpr() const {
    return predicate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(predicate()) : nullptr;
  }
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  Halide::Serialize::Expr index_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_INDEX_TYPE, 0));
  }
  const void *index() const {
    return GetPointer<const void *>(VT_INDEX);
  }
  template<typename T> const T *index_as() const;
  const Halide::Serialize::IntImm *index_as_IntImm() const {
    return index_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(index()) : nullptr;
  }
  const Halide::Serialize::UIntImm *index_as_UIntImm() const {
    return index_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(index()) : nullptr;
  }
  const Halide::Serialize::FloatImm *index_as_FloatImm() const {
    return index_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(index()) : nullptr;
  }
  const Halide::Serialize::StringImm *index_as_StringImm() const {
    return index_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(index()) : nullptr;
  }
  const Halide::Serialize::Cast *index_as_Cast() const {
    return index_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(index()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *index_as_Reinterpret() const {
    return index_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(index()) : nullptr;
  }
  const Halide::Serialize::Add *index_as_Add() const {
    return index_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(index()) : nullptr;
  }
  const Halide::Serialize::Sub *index_as_Sub() const {
    return index_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(index()) : nullptr;
  }
  const Halide::Serialize::Mul *index_as_Mul() const {
    return index_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(index()) : nullptr;
  }
  const Halide::Serialize::Div *index_as_Div() const {
    return index_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(index()) : nullptr;
  }
  const Halide::Serialize::Mod *index_as_Mod() const {
    return index_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(index()) : nullptr;
  }
  const Halide::Serialize::Min *index_as_Min() const {
    return index_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(index()) : nullptr;
  }
  const Halide::Serialize::Max *index_as_Max() const {
    return index_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(index()) : nullptr;
  }
  const Halide::Serialize::EQ *index_as_EQ() const {
    return index_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(index()) : nullptr;
  }
  const Halide::Serialize::NE *index_as_NE() const {
    return index_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(index()) : nullptr;
  }
  const Halide::Serialize::LT *index_as_LT() const {
    return index_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(index()) : nullptr;
  }
  const Halide::Serialize::LE *index_as_LE() const {
    return index_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(index()) : nullptr;
  }
  const Halide::Serialize::GT *index_as_GT() const {
    return index_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(index()) : nullptr;
  }
  const Halide::Serialize::GE *index_as_GE() const {
    return index_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(index()) : nullptr;
  }
  const Halide::Serialize::And *index_as_And() const {
    return index_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(index()) : nullptr;
  }
  const Halide::Serialize::Or *index_as_Or() const {
    return index_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(index()) : nullptr;
  }
  const Halide::Serialize::Not *index_as_Not() const {
    return index_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(index()) : nullptr;
  }
  const Halide::Serialize::Select *index_as_Select() const {
    return index_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(index()) : nullptr;
  }
  const Halide::Serialize::Load *index_as_Load() const {
    return index_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(index()) : nullptr;
  }
  const Halide::Serialize::Ramp *index_as_Ramp() const {
    return index_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(index()) : nullptr;
  }
  const Halide::Serialize::Broadcast *index_as_Broadcast() const {
    return index_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(index()) : nullptr;
  }
  const Halide::Serialize::Let *index_as_Let() const {
    return index_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(index()) : nullptr;
  }
  const Halide::Serialize::Call *index_as_Call() const {
    return index_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(index()) : nullptr;
  }
  const Halide::Serialize::Variable *index_as_Variable() const {
    return index_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(index()) : nullptr;
  }
  const Halide::Serialize::Shuffle *index_as_Shuffle() const {
    return index_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(index()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *index_as_VectorReduce() const {
    return index_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(index()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *index_as_UndefinedExpr() const {
    return index_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(index()) : nullptr;
  }
  const ::flatbuffers::String *param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAM_NAME);
  }
  const Halide::Serialize::ModulusRemainder *alignment() const {
    return GetPointer<const Halide::Serialize::ModulusRemainder *>(VT_ALIGNMENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_PREDICATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PREDICATE) &&
           VerifyExpr(verifier, predicate(), predicate_type()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyField<uint8_t>(verifier, VT_INDEX_TYPE, 1) &&
           VerifyOffset(verifier, VT_INDEX) &&
           VerifyExpr(verifier, index(), index_type()) &&
           VerifyOffset(verifier, VT_PARAM_NAME) &&
           verifier.VerifyString(param_name()) &&
           VerifyOffset(verifier, VT_ALIGNMENT) &&
           verifier.VerifyTable(alignment()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Store::predicate_as<Halide::Serialize::IntImm>() const {
  return predicate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Store::predicate_as<Halide::Serialize::UIntImm>() const {
  return predicate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Store::predicate_as<Halide::Serialize::FloatImm>() const {
  return predicate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Store::predicate_as<Halide::Serialize::StringImm>() const {
  return predicate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Store::predicate_as<Halide::Serialize::Cast>() const {
  return predicate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Store::predicate_as<Halide::Serialize::Reinterpret>() const {
  return predicate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Store::predicate_as<Halide::Serialize::Add>() const {
  return predicate_as_Add();
}

template<> inline const Halide::Serialize::Sub *Store::predicate_as<Halide::Serialize::Sub>() const {
  return predicate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Store::predicate_as<Halide::Serialize::Mul>() const {
  return predicate_as_Mul();
}

template<> inline const Halide::Serialize::Div *Store::predicate_as<Halide::Serialize::Div>() const {
  return predicate_as_Div();
}

template<> inline const Halide::Serialize::Mod *Store::predicate_as<Halide::Serialize::Mod>() const {
  return predicate_as_Mod();
}

template<> inline const Halide::Serialize::Min *Store::predicate_as<Halide::Serialize::Min>() const {
  return predicate_as_Min();
}

template<> inline const Halide::Serialize::Max *Store::predicate_as<Halide::Serialize::Max>() const {
  return predicate_as_Max();
}

template<> inline const Halide::Serialize::EQ *Store::predicate_as<Halide::Serialize::EQ>() const {
  return predicate_as_EQ();
}

template<> inline const Halide::Serialize::NE *Store::predicate_as<Halide::Serialize::NE>() const {
  return predicate_as_NE();
}

template<> inline const Halide::Serialize::LT *Store::predicate_as<Halide::Serialize::LT>() const {
  return predicate_as_LT();
}

template<> inline const Halide::Serialize::LE *Store::predicate_as<Halide::Serialize::LE>() const {
  return predicate_as_LE();
}

template<> inline const Halide::Serialize::GT *Store::predicate_as<Halide::Serialize::GT>() const {
  return predicate_as_GT();
}

template<> inline const Halide::Serialize::GE *Store::predicate_as<Halide::Serialize::GE>() const {
  return predicate_as_GE();
}

template<> inline const Halide::Serialize::And *Store::predicate_as<Halide::Serialize::And>() const {
  return predicate_as_And();
}

template<> inline const Halide::Serialize::Or *Store::predicate_as<Halide::Serialize::Or>() const {
  return predicate_as_Or();
}

template<> inline const Halide::Serialize::Not *Store::predicate_as<Halide::Serialize::Not>() const {
  return predicate_as_Not();
}

template<> inline const Halide::Serialize::Select *Store::predicate_as<Halide::Serialize::Select>() const {
  return predicate_as_Select();
}

template<> inline const Halide::Serialize::Load *Store::predicate_as<Halide::Serialize::Load>() const {
  return predicate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Store::predicate_as<Halide::Serialize::Ramp>() const {
  return predicate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Store::predicate_as<Halide::Serialize::Broadcast>() const {
  return predicate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Store::predicate_as<Halide::Serialize::Let>() const {
  return predicate_as_Let();
}

template<> inline const Halide::Serialize::Call *Store::predicate_as<Halide::Serialize::Call>() const {
  return predicate_as_Call();
}

template<> inline const Halide::Serialize::Variable *Store::predicate_as<Halide::Serialize::Variable>() const {
  return predicate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Store::predicate_as<Halide::Serialize::Shuffle>() const {
  return predicate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Store::predicate_as<Halide::Serialize::VectorReduce>() const {
  return predicate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Store::predicate_as<Halide::Serialize::UndefinedExpr>() const {
  return predicate_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Store::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Store::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Store::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Store::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Store::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Store::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Store::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Store::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Store::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Store::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Store::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Store::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Store::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Store::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Store::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Store::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Store::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Store::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Store::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Store::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Store::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Store::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Store::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Store::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Store::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Store::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Store::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Store::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Store::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Store::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Store::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Store::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Store::index_as<Halide::Serialize::IntImm>() const {
  return index_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Store::index_as<Halide::Serialize::UIntImm>() const {
  return index_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Store::index_as<Halide::Serialize::FloatImm>() const {
  return index_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Store::index_as<Halide::Serialize::StringImm>() const {
  return index_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Store::index_as<Halide::Serialize::Cast>() const {
  return index_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Store::index_as<Halide::Serialize::Reinterpret>() const {
  return index_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Store::index_as<Halide::Serialize::Add>() const {
  return index_as_Add();
}

template<> inline const Halide::Serialize::Sub *Store::index_as<Halide::Serialize::Sub>() const {
  return index_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Store::index_as<Halide::Serialize::Mul>() const {
  return index_as_Mul();
}

template<> inline const Halide::Serialize::Div *Store::index_as<Halide::Serialize::Div>() const {
  return index_as_Div();
}

template<> inline const Halide::Serialize::Mod *Store::index_as<Halide::Serialize::Mod>() const {
  return index_as_Mod();
}

template<> inline const Halide::Serialize::Min *Store::index_as<Halide::Serialize::Min>() const {
  return index_as_Min();
}

template<> inline const Halide::Serialize::Max *Store::index_as<Halide::Serialize::Max>() const {
  return index_as_Max();
}

template<> inline const Halide::Serialize::EQ *Store::index_as<Halide::Serialize::EQ>() const {
  return index_as_EQ();
}

template<> inline const Halide::Serialize::NE *Store::index_as<Halide::Serialize::NE>() const {
  return index_as_NE();
}

template<> inline const Halide::Serialize::LT *Store::index_as<Halide::Serialize::LT>() const {
  return index_as_LT();
}

template<> inline const Halide::Serialize::LE *Store::index_as<Halide::Serialize::LE>() const {
  return index_as_LE();
}

template<> inline const Halide::Serialize::GT *Store::index_as<Halide::Serialize::GT>() const {
  return index_as_GT();
}

template<> inline const Halide::Serialize::GE *Store::index_as<Halide::Serialize::GE>() const {
  return index_as_GE();
}

template<> inline const Halide::Serialize::And *Store::index_as<Halide::Serialize::And>() const {
  return index_as_And();
}

template<> inline const Halide::Serialize::Or *Store::index_as<Halide::Serialize::Or>() const {
  return index_as_Or();
}

template<> inline const Halide::Serialize::Not *Store::index_as<Halide::Serialize::Not>() const {
  return index_as_Not();
}

template<> inline const Halide::Serialize::Select *Store::index_as<Halide::Serialize::Select>() const {
  return index_as_Select();
}

template<> inline const Halide::Serialize::Load *Store::index_as<Halide::Serialize::Load>() const {
  return index_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Store::index_as<Halide::Serialize::Ramp>() const {
  return index_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Store::index_as<Halide::Serialize::Broadcast>() const {
  return index_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Store::index_as<Halide::Serialize::Let>() const {
  return index_as_Let();
}

template<> inline const Halide::Serialize::Call *Store::index_as<Halide::Serialize::Call>() const {
  return index_as_Call();
}

template<> inline const Halide::Serialize::Variable *Store::index_as<Halide::Serialize::Variable>() const {
  return index_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Store::index_as<Halide::Serialize::Shuffle>() const {
  return index_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Store::index_as<Halide::Serialize::VectorReduce>() const {
  return index_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Store::index_as<Halide::Serialize::UndefinedExpr>() const {
  return index_as_UndefinedExpr();
}

struct StoreBuilder {
  typedef Store Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Store::VT_NAME, name);
  }
  void add_predicate_type(Halide::Serialize::Expr predicate_type) {
    fbb_.AddElement<uint8_t>(Store::VT_PREDICATE_TYPE, static_cast<uint8_t>(predicate_type), 0);
  }
  void add_predicate(::flatbuffers::Offset<void> predicate) {
    fbb_.AddOffset(Store::VT_PREDICATE, predicate);
  }
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Store::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Store::VT_VALUE, value);
  }
  void add_index_type(Halide::Serialize::Expr index_type) {
    fbb_.AddElement<uint8_t>(Store::VT_INDEX_TYPE, static_cast<uint8_t>(index_type), 0);
  }
  void add_index(::flatbuffers::Offset<void> index) {
    fbb_.AddOffset(Store::VT_INDEX, index);
  }
  void add_param_name(::flatbuffers::Offset<::flatbuffers::String> param_name) {
    fbb_.AddOffset(Store::VT_PARAM_NAME, param_name);
  }
  void add_alignment(::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment) {
    fbb_.AddOffset(Store::VT_ALIGNMENT, alignment);
  }
  explicit StoreBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Store> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Store>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Store> CreateStore(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Expr index_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> index = 0,
    ::flatbuffers::Offset<::flatbuffers::String> param_name = 0,
    ::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment = 0) {
  StoreBuilder builder_(_fbb);
  builder_.add_alignment(alignment);
  builder_.add_param_name(param_name);
  builder_.add_index(index);
  builder_.add_value(value);
  builder_.add_predicate(predicate);
  builder_.add_name(name);
  builder_.add_index_type(index_type);
  builder_.add_value_type(value_type);
  builder_.add_predicate_type(predicate_type);
  return builder_.Finish();
}

struct Store::Traits {
  using type = Store;
  static auto constexpr Create = CreateStore;
};

inline ::flatbuffers::Offset<Store> CreateStoreDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Expr index_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> index = 0,
    const char *param_name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto param_name__ = param_name ? _fbb.CreateString(param_name) : 0;
  return Halide::Serialize::CreateStore(
      _fbb,
      name__,
      predicate_type,
      predicate,
      value_type,
      value,
      index_type,
      index,
      param_name__,
      alignment);
}

struct Provide FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProvideBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUES_TYPE = 6,
    VT_VALUES = 8,
    VT_ARGS_TYPE = 10,
    VT_ARGS = 12,
    VT_PREDICATE_TYPE = 14,
    VT_PREDICATE = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *values_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_VALUES_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_VALUES);
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *args_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_ARGS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_ARGS);
  }
  Halide::Serialize::Expr predicate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_PREDICATE_TYPE, 0));
  }
  const void *predicate() const {
    return GetPointer<const void *>(VT_PREDICATE);
  }
  template<typename T> const T *predicate_as() const;
  const Halide::Serialize::IntImm *predicate_as_IntImm() const {
    return predicate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *predicate_as_UIntImm() const {
    return predicate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *predicate_as_FloatImm() const {
    return predicate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::StringImm *predicate_as_StringImm() const {
    return predicate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Cast *predicate_as_Cast() const {
    return predicate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *predicate_as_Reinterpret() const {
    return predicate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Add *predicate_as_Add() const {
    return predicate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Sub *predicate_as_Sub() const {
    return predicate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mul *predicate_as_Mul() const {
    return predicate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Div *predicate_as_Div() const {
    return predicate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mod *predicate_as_Mod() const {
    return predicate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Min *predicate_as_Min() const {
    return predicate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Max *predicate_as_Max() const {
    return predicate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(predicate()) : nullptr;
  }
  const Halide::Serialize::EQ *predicate_as_EQ() const {
    return predicate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(predicate()) : nullptr;
  }
  const Halide::Serialize::NE *predicate_as_NE() const {
    return predicate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LT *predicate_as_LT() const {
    return predicate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LE *predicate_as_LE() const {
    return predicate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GT *predicate_as_GT() const {
    return predicate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GE *predicate_as_GE() const {
    return predicate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::And *predicate_as_And() const {
    return predicate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Or *predicate_as_Or() const {
    return predicate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Not *predicate_as_Not() const {
    return predicate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Select *predicate_as_Select() const {
    return predicate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Load *predicate_as_Load() const {
    return predicate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Ramp *predicate_as_Ramp() const {
    return predicate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *predicate_as_Broadcast() const {
    return predicate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Let *predicate_as_Let() const {
    return predicate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Call *predicate_as_Call() const {
    return predicate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Variable *predicate_as_Variable() const {
    return predicate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *predicate_as_Shuffle() const {
    return predicate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(predicate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *predicate_as_VectorReduce() const {
    return predicate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *predicate_as_UndefinedExpr() const {
    return predicate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(predicate()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VALUES_TYPE) &&
           verifier.VerifyVector(values_type()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyExprVector(verifier, values(), values_type()) &&
           VerifyOffset(verifier, VT_ARGS_TYPE) &&
           verifier.VerifyVector(args_type()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyVector(args()) &&
           VerifyExprVector(verifier, args(), args_type()) &&
           VerifyField<uint8_t>(verifier, VT_PREDICATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PREDICATE) &&
           VerifyExpr(verifier, predicate(), predicate_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Provide::predicate_as<Halide::Serialize::IntImm>() const {
  return predicate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Provide::predicate_as<Halide::Serialize::UIntImm>() const {
  return predicate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Provide::predicate_as<Halide::Serialize::FloatImm>() const {
  return predicate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Provide::predicate_as<Halide::Serialize::StringImm>() const {
  return predicate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Provide::predicate_as<Halide::Serialize::Cast>() const {
  return predicate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Provide::predicate_as<Halide::Serialize::Reinterpret>() const {
  return predicate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Provide::predicate_as<Halide::Serialize::Add>() const {
  return predicate_as_Add();
}

template<> inline const Halide::Serialize::Sub *Provide::predicate_as<Halide::Serialize::Sub>() const {
  return predicate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Provide::predicate_as<Halide::Serialize::Mul>() const {
  return predicate_as_Mul();
}

template<> inline const Halide::Serialize::Div *Provide::predicate_as<Halide::Serialize::Div>() const {
  return predicate_as_Div();
}

template<> inline const Halide::Serialize::Mod *Provide::predicate_as<Halide::Serialize::Mod>() const {
  return predicate_as_Mod();
}

template<> inline const Halide::Serialize::Min *Provide::predicate_as<Halide::Serialize::Min>() const {
  return predicate_as_Min();
}

template<> inline const Halide::Serialize::Max *Provide::predicate_as<Halide::Serialize::Max>() const {
  return predicate_as_Max();
}

template<> inline const Halide::Serialize::EQ *Provide::predicate_as<Halide::Serialize::EQ>() const {
  return predicate_as_EQ();
}

template<> inline const Halide::Serialize::NE *Provide::predicate_as<Halide::Serialize::NE>() const {
  return predicate_as_NE();
}

template<> inline const Halide::Serialize::LT *Provide::predicate_as<Halide::Serialize::LT>() const {
  return predicate_as_LT();
}

template<> inline const Halide::Serialize::LE *Provide::predicate_as<Halide::Serialize::LE>() const {
  return predicate_as_LE();
}

template<> inline const Halide::Serialize::GT *Provide::predicate_as<Halide::Serialize::GT>() const {
  return predicate_as_GT();
}

template<> inline const Halide::Serialize::GE *Provide::predicate_as<Halide::Serialize::GE>() const {
  return predicate_as_GE();
}

template<> inline const Halide::Serialize::And *Provide::predicate_as<Halide::Serialize::And>() const {
  return predicate_as_And();
}

template<> inline const Halide::Serialize::Or *Provide::predicate_as<Halide::Serialize::Or>() const {
  return predicate_as_Or();
}

template<> inline const Halide::Serialize::Not *Provide::predicate_as<Halide::Serialize::Not>() const {
  return predicate_as_Not();
}

template<> inline const Halide::Serialize::Select *Provide::predicate_as<Halide::Serialize::Select>() const {
  return predicate_as_Select();
}

template<> inline const Halide::Serialize::Load *Provide::predicate_as<Halide::Serialize::Load>() const {
  return predicate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Provide::predicate_as<Halide::Serialize::Ramp>() const {
  return predicate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Provide::predicate_as<Halide::Serialize::Broadcast>() const {
  return predicate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Provide::predicate_as<Halide::Serialize::Let>() const {
  return predicate_as_Let();
}

template<> inline const Halide::Serialize::Call *Provide::predicate_as<Halide::Serialize::Call>() const {
  return predicate_as_Call();
}

template<> inline const Halide::Serialize::Variable *Provide::predicate_as<Halide::Serialize::Variable>() const {
  return predicate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Provide::predicate_as<Halide::Serialize::Shuffle>() const {
  return predicate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Provide::predicate_as<Halide::Serialize::VectorReduce>() const {
  return predicate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Provide::predicate_as<Halide::Serialize::UndefinedExpr>() const {
  return predicate_as_UndefinedExpr();
}

struct ProvideBuilder {
  typedef Provide Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Provide::VT_NAME, name);
  }
  void add_values_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> values_type) {
    fbb_.AddOffset(Provide::VT_VALUES_TYPE, values_type);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> values) {
    fbb_.AddOffset(Provide::VT_VALUES, values);
  }
  void add_args_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type) {
    fbb_.AddOffset(Provide::VT_ARGS_TYPE, args_type);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args) {
    fbb_.AddOffset(Provide::VT_ARGS, args);
  }
  void add_predicate_type(Halide::Serialize::Expr predicate_type) {
    fbb_.AddElement<uint8_t>(Provide::VT_PREDICATE_TYPE, static_cast<uint8_t>(predicate_type), 0);
  }
  void add_predicate(::flatbuffers::Offset<void> predicate) {
    fbb_.AddOffset(Provide::VT_PREDICATE, predicate);
  }
  explicit ProvideBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Provide> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Provide>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Provide> CreateProvide(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> values_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args = 0,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0) {
  ProvideBuilder builder_(_fbb);
  builder_.add_predicate(predicate);
  builder_.add_args(args);
  builder_.add_args_type(args_type);
  builder_.add_values(values);
  builder_.add_values_type(values_type);
  builder_.add_name(name);
  builder_.add_predicate_type(predicate_type);
  return builder_.Finish();
}

struct Provide::Traits {
  using type = Provide;
  static auto constexpr Create = CreateProvide;
};

inline ::flatbuffers::Offset<Provide> CreateProvideDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<Halide::Serialize::Expr> *values_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *values = nullptr,
    const std::vector<Halide::Serialize::Expr> *args_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *args = nullptr,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto values_type__ = values_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*values_type) : 0;
  auto values__ = values ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*values) : 0;
  auto args_type__ = args_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*args_type) : 0;
  auto args__ = args ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*args) : 0;
  return Halide::Serialize::CreateProvide(
      _fbb,
      name__,
      values_type__,
      values__,
      args_type__,
      args__,
      predicate_type,
      predicate);
}

struct Allocate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AllocateBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_MEMORY_TYPE = 8,
    VT_EXTENTS_TYPE = 10,
    VT_EXTENTS = 12,
    VT_CONDITION_TYPE = 14,
    VT_CONDITION = 16,
    VT_NEW_EXPR_TYPE = 18,
    VT_NEW_EXPR = 20,
    VT_FREE_FUNCTION = 22,
    VT_PADDING = 24,
    VT_BODY_TYPE = 26,
    VT_BODY = 28
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  Halide::Serialize::MemoryType memory_type() const {
    return static_cast<Halide::Serialize::MemoryType>(GetField<int8_t>(VT_MEMORY_TYPE, 0));
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *extents_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_EXTENTS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *extents() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_EXTENTS);
  }
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Expr new_expr_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_NEW_EXPR_TYPE, 0));
  }
  const void *new_expr() const {
    return GetPointer<const void *>(VT_NEW_EXPR);
  }
  template<typename T> const T *new_expr_as() const;
  const Halide::Serialize::IntImm *new_expr_as_IntImm() const {
    return new_expr_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::UIntImm *new_expr_as_UIntImm() const {
    return new_expr_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::FloatImm *new_expr_as_FloatImm() const {
    return new_expr_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::StringImm *new_expr_as_StringImm() const {
    return new_expr_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Cast *new_expr_as_Cast() const {
    return new_expr_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *new_expr_as_Reinterpret() const {
    return new_expr_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Add *new_expr_as_Add() const {
    return new_expr_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Sub *new_expr_as_Sub() const {
    return new_expr_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Mul *new_expr_as_Mul() const {
    return new_expr_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Div *new_expr_as_Div() const {
    return new_expr_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Mod *new_expr_as_Mod() const {
    return new_expr_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Min *new_expr_as_Min() const {
    return new_expr_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Max *new_expr_as_Max() const {
    return new_expr_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::EQ *new_expr_as_EQ() const {
    return new_expr_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::NE *new_expr_as_NE() const {
    return new_expr_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::LT *new_expr_as_LT() const {
    return new_expr_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::LE *new_expr_as_LE() const {
    return new_expr_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::GT *new_expr_as_GT() const {
    return new_expr_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::GE *new_expr_as_GE() const {
    return new_expr_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::And *new_expr_as_And() const {
    return new_expr_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Or *new_expr_as_Or() const {
    return new_expr_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Not *new_expr_as_Not() const {
    return new_expr_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Select *new_expr_as_Select() const {
    return new_expr_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Load *new_expr_as_Load() const {
    return new_expr_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Ramp *new_expr_as_Ramp() const {
    return new_expr_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Broadcast *new_expr_as_Broadcast() const {
    return new_expr_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Let *new_expr_as_Let() const {
    return new_expr_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Call *new_expr_as_Call() const {
    return new_expr_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Variable *new_expr_as_Variable() const {
    return new_expr_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::Shuffle *new_expr_as_Shuffle() const {
    return new_expr_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *new_expr_as_VectorReduce() const {
    return new_expr_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(new_expr()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *new_expr_as_UndefinedExpr() const {
    return new_expr_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(new_expr()) : nullptr;
  }
  const ::flatbuffers::String *free_function() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREE_FUNCTION);
  }
  int32_t padding() const {
    return GetField<int32_t>(VT_PADDING, 0);
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyField<int8_t>(verifier, VT_MEMORY_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENTS_TYPE) &&
           verifier.VerifyVector(extents_type()) &&
           VerifyOffset(verifier, VT_EXTENTS) &&
           verifier.VerifyVector(extents()) &&
           VerifyExprVector(verifier, extents(), extents_type()) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_NEW_EXPR_TYPE, 1) &&
           VerifyOffset(verifier, VT_NEW_EXPR) &&
           VerifyExpr(verifier, new_expr(), new_expr_type()) &&
           VerifyOffset(verifier, VT_FREE_FUNCTION) &&
           verifier.VerifyString(free_function()) &&
           VerifyField<int32_t>(verifier, VT_PADDING, 4) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Allocate::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Allocate::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Allocate::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Allocate::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Allocate::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Allocate::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Allocate::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *Allocate::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Allocate::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *Allocate::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *Allocate::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *Allocate::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *Allocate::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *Allocate::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *Allocate::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *Allocate::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *Allocate::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *Allocate::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *Allocate::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *Allocate::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *Allocate::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *Allocate::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *Allocate::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *Allocate::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Allocate::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Allocate::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Allocate::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *Allocate::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *Allocate::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Allocate::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Allocate::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Allocate::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Allocate::new_expr_as<Halide::Serialize::IntImm>() const {
  return new_expr_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Allocate::new_expr_as<Halide::Serialize::UIntImm>() const {
  return new_expr_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Allocate::new_expr_as<Halide::Serialize::FloatImm>() const {
  return new_expr_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Allocate::new_expr_as<Halide::Serialize::StringImm>() const {
  return new_expr_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Allocate::new_expr_as<Halide::Serialize::Cast>() const {
  return new_expr_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Allocate::new_expr_as<Halide::Serialize::Reinterpret>() const {
  return new_expr_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Allocate::new_expr_as<Halide::Serialize::Add>() const {
  return new_expr_as_Add();
}

template<> inline const Halide::Serialize::Sub *Allocate::new_expr_as<Halide::Serialize::Sub>() const {
  return new_expr_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Allocate::new_expr_as<Halide::Serialize::Mul>() const {
  return new_expr_as_Mul();
}

template<> inline const Halide::Serialize::Div *Allocate::new_expr_as<Halide::Serialize::Div>() const {
  return new_expr_as_Div();
}

template<> inline const Halide::Serialize::Mod *Allocate::new_expr_as<Halide::Serialize::Mod>() const {
  return new_expr_as_Mod();
}

template<> inline const Halide::Serialize::Min *Allocate::new_expr_as<Halide::Serialize::Min>() const {
  return new_expr_as_Min();
}

template<> inline const Halide::Serialize::Max *Allocate::new_expr_as<Halide::Serialize::Max>() const {
  return new_expr_as_Max();
}

template<> inline const Halide::Serialize::EQ *Allocate::new_expr_as<Halide::Serialize::EQ>() const {
  return new_expr_as_EQ();
}

template<> inline const Halide::Serialize::NE *Allocate::new_expr_as<Halide::Serialize::NE>() const {
  return new_expr_as_NE();
}

template<> inline const Halide::Serialize::LT *Allocate::new_expr_as<Halide::Serialize::LT>() const {
  return new_expr_as_LT();
}

template<> inline const Halide::Serialize::LE *Allocate::new_expr_as<Halide::Serialize::LE>() const {
  return new_expr_as_LE();
}

template<> inline const Halide::Serialize::GT *Allocate::new_expr_as<Halide::Serialize::GT>() const {
  return new_expr_as_GT();
}

template<> inline const Halide::Serialize::GE *Allocate::new_expr_as<Halide::Serialize::GE>() const {
  return new_expr_as_GE();
}

template<> inline const Halide::Serialize::And *Allocate::new_expr_as<Halide::Serialize::And>() const {
  return new_expr_as_And();
}

template<> inline const Halide::Serialize::Or *Allocate::new_expr_as<Halide::Serialize::Or>() const {
  return new_expr_as_Or();
}

template<> inline const Halide::Serialize::Not *Allocate::new_expr_as<Halide::Serialize::Not>() const {
  return new_expr_as_Not();
}

template<> inline const Halide::Serialize::Select *Allocate::new_expr_as<Halide::Serialize::Select>() const {
  return new_expr_as_Select();
}

template<> inline const Halide::Serialize::Load *Allocate::new_expr_as<Halide::Serialize::Load>() const {
  return new_expr_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Allocate::new_expr_as<Halide::Serialize::Ramp>() const {
  return new_expr_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Allocate::new_expr_as<Halide::Serialize::Broadcast>() const {
  return new_expr_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Allocate::new_expr_as<Halide::Serialize::Let>() const {
  return new_expr_as_Let();
}

template<> inline const Halide::Serialize::Call *Allocate::new_expr_as<Halide::Serialize::Call>() const {
  return new_expr_as_Call();
}

template<> inline const Halide::Serialize::Variable *Allocate::new_expr_as<Halide::Serialize::Variable>() const {
  return new_expr_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Allocate::new_expr_as<Halide::Serialize::Shuffle>() const {
  return new_expr_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Allocate::new_expr_as<Halide::Serialize::VectorReduce>() const {
  return new_expr_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Allocate::new_expr_as<Halide::Serialize::UndefinedExpr>() const {
  return new_expr_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *Allocate::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Allocate::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Allocate::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Allocate::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *Allocate::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *Allocate::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Allocate::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Allocate::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *Allocate::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *Allocate::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Allocate::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Allocate::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Allocate::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Allocate::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Allocate::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Allocate::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Allocate::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Allocate::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct AllocateBuilder {
  typedef Allocate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Allocate::VT_NAME, name);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Allocate::VT_TYPE, type);
  }
  void add_memory_type(Halide::Serialize::MemoryType memory_type) {
    fbb_.AddElement<int8_t>(Allocate::VT_MEMORY_TYPE, static_cast<int8_t>(memory_type), 0);
  }
  void add_extents_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> extents_type) {
    fbb_.AddOffset(Allocate::VT_EXTENTS_TYPE, extents_type);
  }
  void add_extents(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> extents) {
    fbb_.AddOffset(Allocate::VT_EXTENTS, extents);
  }
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(Allocate::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(Allocate::VT_CONDITION, condition);
  }
  void add_new_expr_type(Halide::Serialize::Expr new_expr_type) {
    fbb_.AddElement<uint8_t>(Allocate::VT_NEW_EXPR_TYPE, static_cast<uint8_t>(new_expr_type), 0);
  }
  void add_new_expr(::flatbuffers::Offset<void> new_expr) {
    fbb_.AddOffset(Allocate::VT_NEW_EXPR, new_expr);
  }
  void add_free_function(::flatbuffers::Offset<::flatbuffers::String> free_function) {
    fbb_.AddOffset(Allocate::VT_FREE_FUNCTION, free_function);
  }
  void add_padding(int32_t padding) {
    fbb_.AddElement<int32_t>(Allocate::VT_PADDING, padding, 0);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(Allocate::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Allocate::VT_BODY, body);
  }
  explicit AllocateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Allocate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Allocate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Allocate> CreateAllocate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> extents_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> extents = 0,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Expr new_expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> new_expr = 0,
    ::flatbuffers::Offset<::flatbuffers::String> free_function = 0,
    int32_t padding = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  AllocateBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_padding(padding);
  builder_.add_free_function(free_function);
  builder_.add_new_expr(new_expr);
  builder_.add_condition(condition);
  builder_.add_extents(extents);
  builder_.add_extents_type(extents_type);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_new_expr_type(new_expr_type);
  builder_.add_condition_type(condition_type);
  builder_.add_memory_type(memory_type);
  return builder_.Finish();
}

struct Allocate::Traits {
  using type = Allocate;
  static auto constexpr Create = CreateAllocate;
};

inline ::flatbuffers::Offset<Allocate> CreateAllocateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    const std::vector<Halide::Serialize::Expr> *extents_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *extents = nullptr,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Expr new_expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> new_expr = 0,
    const char *free_function = nullptr,
    int32_t padding = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto extents_type__ = extents_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*extents_type) : 0;
  auto extents__ = extents ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*extents) : 0;
  auto free_function__ = free_function ? _fbb.CreateString(free_function) : 0;
  return Halide::Serialize::CreateAllocate(
      _fbb,
      name__,
      type,
      memory_type,
      extents_type__,
      extents__,
      condition_type,
      condition,
      new_expr_type,
      new_expr,
      free_function__,
      padding,
      body_type,
      body);
}

struct Free FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FreeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct FreeBuilder {
  typedef Free Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Free::VT_NAME, name);
  }
  explicit FreeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Free> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Free>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Free> CreateFree(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  FreeBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Free::Traits {
  using type = Free;
  static auto constexpr Create = CreateFree;
};

inline ::flatbuffers::Offset<Free> CreateFreeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateFree(
      _fbb,
      name__);
}

struct Realize FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RealizeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPES = 6,
    VT_MEMORY_TYPE = 8,
    VT_BOUNDS = 10,
    VT_CONDITION_TYPE = 12,
    VT_CONDITION = 14,
    VT_BODY_TYPE = 16,
    VT_BODY = 18
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *types() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *>(VT_TYPES);
  }
  Halide::Serialize::MemoryType memory_type() const {
    return static_cast<Halide::Serialize::MemoryType>(GetField<int8_t>(VT_MEMORY_TYPE, 0));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>> *bounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>> *>(VT_BOUNDS);
  }
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           verifier.VerifyVectorOfTables(types()) &&
           VerifyField<int8_t>(verifier, VT_MEMORY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BOUNDS) &&
           verifier.VerifyVector(bounds()) &&
           verifier.VerifyVectorOfTables(bounds()) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Realize::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Realize::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Realize::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Realize::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Realize::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Realize::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Realize::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *Realize::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Realize::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *Realize::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *Realize::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *Realize::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *Realize::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *Realize::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *Realize::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *Realize::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *Realize::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *Realize::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *Realize::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *Realize::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *Realize::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *Realize::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *Realize::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *Realize::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Realize::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Realize::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Realize::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *Realize::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *Realize::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Realize::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Realize::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Realize::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *Realize::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Realize::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Realize::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Realize::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *Realize::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *Realize::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Realize::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Realize::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *Realize::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *Realize::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Realize::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Realize::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Realize::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Realize::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Realize::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Realize::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Realize::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Realize::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct RealizeBuilder {
  typedef Realize Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Realize::VT_NAME, name);
  }
  void add_types(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> types) {
    fbb_.AddOffset(Realize::VT_TYPES, types);
  }
  void add_memory_type(Halide::Serialize::MemoryType memory_type) {
    fbb_.AddElement<int8_t>(Realize::VT_MEMORY_TYPE, static_cast<int8_t>(memory_type), 0);
  }
  void add_bounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>>> bounds) {
    fbb_.AddOffset(Realize::VT_BOUNDS, bounds);
  }
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(Realize::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(Realize::VT_CONDITION, condition);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(Realize::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Realize::VT_BODY, body);
  }
  explicit RealizeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Realize> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Realize>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Realize> CreateRealize(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> types = 0,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>>> bounds = 0,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  RealizeBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_condition(condition);
  builder_.add_bounds(bounds);
  builder_.add_types(types);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_condition_type(condition_type);
  builder_.add_memory_type(memory_type);
  return builder_.Finish();
}

struct Realize::Traits {
  using type = Realize;
  static auto constexpr Create = CreateRealize;
};

inline ::flatbuffers::Offset<Realize> CreateRealizeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Type>> *types = nullptr,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Range>> *bounds = nullptr,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto types__ = types ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Type>>(*types) : 0;
  auto bounds__ = bounds ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Range>>(*bounds) : 0;
  return Halide::Serialize::CreateRealize(
      _fbb,
      name__,
      types__,
      memory_type,
      bounds__,
      condition_type,
      condition,
      body_type,
      body);
}

struct Block FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BlockBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRST_TYPE = 4,
    VT_FIRST = 6,
    VT_REST_TYPE = 8,
    VT_REST = 10
  };
  Halide::Serialize::Stmt first_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_FIRST_TYPE, 0));
  }
  const void *first() const {
    return GetPointer<const void *>(VT_FIRST);
  }
  template<typename T> const T *first_as() const;
  const Halide::Serialize::LetStmt *first_as_LetStmt() const {
    return first_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(first()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *first_as_AssertStmt() const {
    return first_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(first()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *first_as_ProducerConsumer() const {
    return first_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(first()) : nullptr;
  }
  const Halide::Serialize::For *first_as_For() const {
    return first_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(first()) : nullptr;
  }
  const Halide::Serialize::Store *first_as_Store() const {
    return first_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(first()) : nullptr;
  }
  const Halide::Serialize::Provide *first_as_Provide() const {
    return first_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(first()) : nullptr;
  }
  const Halide::Serialize::Allocate *first_as_Allocate() const {
    return first_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(first()) : nullptr;
  }
  const Halide::Serialize::Free *first_as_Free() const {
    return first_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(first()) : nullptr;
  }
  const Halide::Serialize::Realize *first_as_Realize() const {
    return first_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(first()) : nullptr;
  }
  const Halide::Serialize::Block *first_as_Block() const {
    return first_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(first()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *first_as_IfThenElse() const {
    return first_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(first()) : nullptr;
  }
  const Halide::Serialize::Evaluate *first_as_Evaluate() const {
    return first_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(first()) : nullptr;
  }
  const Halide::Serialize::Prefetch *first_as_Prefetch() const {
    return first_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(first()) : nullptr;
  }
  const Halide::Serialize::Acquire *first_as_Acquire() const {
    return first_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(first()) : nullptr;
  }
  const Halide::Serialize::Fork *first_as_Fork() const {
    return first_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(first()) : nullptr;
  }
  const Halide::Serialize::Atomic *first_as_Atomic() const {
    return first_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(first()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *first_as_HoistedStorage() const {
    return first_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(first()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *first_as_UndefinedStmt() const {
    return first_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(first()) : nullptr;
  }
  Halide::Serialize::Stmt rest_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_REST_TYPE, 0));
  }
  const void *rest() const {
    return GetPointer<const void *>(VT_REST);
  }
  template<typename T> const T *rest_as() const;
  const Halide::Serialize::LetStmt *rest_as_LetStmt() const {
    return rest_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(rest()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *rest_as_AssertStmt() const {
    return rest_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(rest()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *rest_as_ProducerConsumer() const {
    return rest_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(rest()) : nullptr;
  }
  const Halide::Serialize::For *rest_as_For() const {
    return rest_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(rest()) : nullptr;
  }
  const Halide::Serialize::Store *rest_as_Store() const {
    return rest_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(rest()) : nullptr;
  }
  const Halide::Serialize::Provide *rest_as_Provide() const {
    return rest_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(rest()) : nullptr;
  }
  const Halide::Serialize::Allocate *rest_as_Allocate() const {
    return rest_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(rest()) : nullptr;
  }
  const Halide::Serialize::Free *rest_as_Free() const {
    return rest_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(rest()) : nullptr;
  }
  const Halide::Serialize::Realize *rest_as_Realize() const {
    return rest_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(rest()) : nullptr;
  }
  const Halide::Serialize::Block *rest_as_Block() const {
    return rest_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(rest()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *rest_as_IfThenElse() const {
    return rest_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(rest()) : nullptr;
  }
  const Halide::Serialize::Evaluate *rest_as_Evaluate() const {
    return rest_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(rest()) : nullptr;
  }
  const Halide::Serialize::Prefetch *rest_as_Prefetch() const {
    return rest_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(rest()) : nullptr;
  }
  const Halide::Serialize::Acquire *rest_as_Acquire() const {
    return rest_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(rest()) : nullptr;
  }
  const Halide::Serialize::Fork *rest_as_Fork() const {
    return rest_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(rest()) : nullptr;
  }
  const Halide::Serialize::Atomic *rest_as_Atomic() const {
    return rest_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(rest()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *rest_as_HoistedStorage() const {
    return rest_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(rest()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *rest_as_UndefinedStmt() const {
    return rest_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(rest()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FIRST_TYPE, 1) &&
           VerifyOffset(verifier, VT_FIRST) &&
           VerifyStmt(verifier, first(), first_type()) &&
           VerifyField<uint8_t>(verifier, VT_REST_TYPE, 1) &&
           VerifyOffset(verifier, VT_REST) &&
           VerifyStmt(verifier, rest(), rest_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::LetStmt *Block::first_as<Halide::Serialize::LetStmt>() const {
  return first_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Block::first_as<Halide::Serialize::AssertStmt>() const {
  return first_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Block::first_as<Halide::Serialize::ProducerConsumer>() const {
  return first_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Block::first_as<Halide::Serialize::For>() const {
  return first_as_For();
}

template<> inline const Halide::Serialize::Store *Block::first_as<Halide::Serialize::Store>() const {
  return first_as_Store();
}

template<> inline const Halide::Serialize::Provide *Block::first_as<Halide::Serialize::Provide>() const {
  return first_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Block::first_as<Halide::Serialize::Allocate>() const {
  return first_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Block::first_as<Halide::Serialize::Free>() const {
  return first_as_Free();
}

template<> inline const Halide::Serialize::Realize *Block::first_as<Halide::Serialize::Realize>() const {
  return first_as_Realize();
}

template<> inline const Halide::Serialize::Block *Block::first_as<Halide::Serialize::Block>() const {
  return first_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Block::first_as<Halide::Serialize::IfThenElse>() const {
  return first_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Block::first_as<Halide::Serialize::Evaluate>() const {
  return first_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Block::first_as<Halide::Serialize::Prefetch>() const {
  return first_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Block::first_as<Halide::Serialize::Acquire>() const {
  return first_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Block::first_as<Halide::Serialize::Fork>() const {
  return first_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Block::first_as<Halide::Serialize::Atomic>() const {
  return first_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Block::first_as<Halide::Serialize::HoistedStorage>() const {
  return first_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Block::first_as<Halide::Serialize::UndefinedStmt>() const {
  return first_as_UndefinedStmt();
}

template<> inline const Halide::Serialize::LetStmt *Block::rest_as<Halide::Serialize::LetStmt>() const {
  return rest_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Block::rest_as<Halide::Serialize::AssertStmt>() const {
  return rest_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Block::rest_as<Halide::Serialize::ProducerConsumer>() const {
  return rest_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Block::rest_as<Halide::Serialize::For>() const {
  return rest_as_For();
}

template<> inline const Halide::Serialize::Store *Block::rest_as<Halide::Serialize::Store>() const {
  return rest_as_Store();
}

template<> inline const Halide::Serialize::Provide *Block::rest_as<Halide::Serialize::Provide>() const {
  return rest_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Block::rest_as<Halide::Serialize::Allocate>() const {
  return rest_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Block::rest_as<Halide::Serialize::Free>() const {
  return rest_as_Free();
}

template<> inline const Halide::Serialize::Realize *Block::rest_as<Halide::Serialize::Realize>() const {
  return rest_as_Realize();
}

template<> inline const Halide::Serialize::Block *Block::rest_as<Halide::Serialize::Block>() const {
  return rest_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Block::rest_as<Halide::Serialize::IfThenElse>() const {
  return rest_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Block::rest_as<Halide::Serialize::Evaluate>() const {
  return rest_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Block::rest_as<Halide::Serialize::Prefetch>() const {
  return rest_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Block::rest_as<Halide::Serialize::Acquire>() const {
  return rest_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Block::rest_as<Halide::Serialize::Fork>() const {
  return rest_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Block::rest_as<Halide::Serialize::Atomic>() const {
  return rest_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Block::rest_as<Halide::Serialize::HoistedStorage>() const {
  return rest_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Block::rest_as<Halide::Serialize::UndefinedStmt>() const {
  return rest_as_UndefinedStmt();
}

struct BlockBuilder {
  typedef Block Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_first_type(Halide::Serialize::Stmt first_type) {
    fbb_.AddElement<uint8_t>(Block::VT_FIRST_TYPE, static_cast<uint8_t>(first_type), 0);
  }
  void add_first(::flatbuffers::Offset<void> first) {
    fbb_.AddOffset(Block::VT_FIRST, first);
  }
  void add_rest_type(Halide::Serialize::Stmt rest_type) {
    fbb_.AddElement<uint8_t>(Block::VT_REST_TYPE, static_cast<uint8_t>(rest_type), 0);
  }
  void add_rest(::flatbuffers::Offset<void> rest) {
    fbb_.AddOffset(Block::VT_REST, rest);
  }
  explicit BlockBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Block> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Block>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Block> CreateBlock(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Stmt first_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> first = 0,
    Halide::Serialize::Stmt rest_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> rest = 0) {
  BlockBuilder builder_(_fbb);
  builder_.add_rest(rest);
  builder_.add_first(first);
  builder_.add_rest_type(rest_type);
  builder_.add_first_type(first_type);
  return builder_.Finish();
}

struct Block::Traits {
  using type = Block;
  static auto constexpr Create = CreateBlock;
};

struct IfThenElse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IfThenElseBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONDITION_TYPE = 4,
    VT_CONDITION = 6,
    VT_THEN_CASE_TYPE = 8,
    VT_THEN_CASE = 10,
    VT_ELSE_CASE_TYPE = 12,
    VT_ELSE_CASE = 14
  };
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Stmt then_case_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_THEN_CASE_TYPE, 0));
  }
  const void *then_case() const {
    return GetPointer<const void *>(VT_THEN_CASE);
  }
  template<typename T> const T *then_case_as() const;
  const Halide::Serialize::LetStmt *then_case_as_LetStmt() const {
    return then_case_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(then_case()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *then_case_as_AssertStmt() const {
    return then_case_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(then_case()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *then_case_as_ProducerConsumer() const {
    return then_case_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(then_case()) : nullptr;
  }
  const Halide::Serialize::For *then_case_as_For() const {
    return then_case_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Store *then_case_as_Store() const {
    return then_case_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Provide *then_case_as_Provide() const {
    return then_case_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Allocate *then_case_as_Allocate() const {
    return then_case_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Free *then_case_as_Free() const {
    return then_case_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Realize *then_case_as_Realize() const {
    return then_case_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Block *then_case_as_Block() const {
    return then_case_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(then_case()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *then_case_as_IfThenElse() const {
    return then_case_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Evaluate *then_case_as_Evaluate() const {
    return then_case_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Prefetch *then_case_as_Prefetch() const {
    return then_case_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Acquire *then_case_as_Acquire() const {
    return then_case_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Fork *then_case_as_Fork() const {
    return then_case_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(then_case()) : nullptr;
  }
  const Halide::Serialize::Atomic *then_case_as_Atomic() const {
    return then_case_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(then_case()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *then_case_as_HoistedStorage() const {
    return then_case_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(then_case()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *then_case_as_UndefinedStmt() const {
    return then_case_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(then_case()) : nullptr;
  }
  Halide::Serialize::Stmt else_case_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_ELSE_CASE_TYPE, 0));
  }
  const void *else_case() const {
    return GetPointer<const void *>(VT_ELSE_CASE);
  }
  template<typename T> const T *else_case_as() const;
  const Halide::Serialize::LetStmt *else_case_as_LetStmt() const {
    return else_case_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(else_case()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *else_case_as_AssertStmt() const {
    return else_case_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(else_case()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *else_case_as_ProducerConsumer() const {
    return else_case_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(else_case()) : nullptr;
  }
  const Halide::Serialize::For *else_case_as_For() const {
    return else_case_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Store *else_case_as_Store() const {
    return else_case_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Provide *else_case_as_Provide() const {
    return else_case_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Allocate *else_case_as_Allocate() const {
    return else_case_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Free *else_case_as_Free() const {
    return else_case_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Realize *else_case_as_Realize() const {
    return else_case_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Block *else_case_as_Block() const {
    return else_case_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(else_case()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *else_case_as_IfThenElse() const {
    return else_case_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Evaluate *else_case_as_Evaluate() const {
    return else_case_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Prefetch *else_case_as_Prefetch() const {
    return else_case_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Acquire *else_case_as_Acquire() const {
    return else_case_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Fork *else_case_as_Fork() const {
    return else_case_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(else_case()) : nullptr;
  }
  const Halide::Serialize::Atomic *else_case_as_Atomic() const {
    return else_case_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(else_case()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *else_case_as_HoistedStorage() const {
    return else_case_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(else_case()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *else_case_as_UndefinedStmt() const {
    return else_case_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(else_case()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_THEN_CASE_TYPE, 1) &&
           VerifyOffset(verifier, VT_THEN_CASE) &&
           VerifyStmt(verifier, then_case(), then_case_type()) &&
           VerifyField<uint8_t>(verifier, VT_ELSE_CASE_TYPE, 1) &&
           VerifyOffset(verifier, VT_ELSE_CASE) &&
           VerifyStmt(verifier, else_case(), else_case_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *IfThenElse::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *IfThenElse::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *IfThenElse::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *IfThenElse::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *IfThenElse::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *IfThenElse::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *IfThenElse::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *IfThenElse::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *IfThenElse::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *IfThenElse::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *IfThenElse::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *IfThenElse::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *IfThenElse::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *IfThenElse::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *IfThenElse::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *IfThenElse::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *IfThenElse::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *IfThenElse::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *IfThenElse::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *IfThenElse::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *IfThenElse::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *IfThenElse::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *IfThenElse::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *IfThenElse::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *IfThenElse::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *IfThenElse::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *IfThenElse::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *IfThenElse::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *IfThenElse::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *IfThenElse::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *IfThenElse::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *IfThenElse::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *IfThenElse::then_case_as<Halide::Serialize::LetStmt>() const {
  return then_case_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *IfThenElse::then_case_as<Halide::Serialize::AssertStmt>() const {
  return then_case_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *IfThenElse::then_case_as<Halide::Serialize::ProducerConsumer>() const {
  return then_case_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *IfThenElse::then_case_as<Halide::Serialize::For>() const {
  return then_case_as_For();
}

template<> inline const Halide::Serialize::Store *IfThenElse::then_case_as<Halide::Serialize::Store>() const {
  return then_case_as_Store();
}

template<> inline const Halide::Serialize::Provide *IfThenElse::then_case_as<Halide::Serialize::Provide>() const {
  return then_case_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *IfThenElse::then_case_as<Halide::Serialize::Allocate>() const {
  return then_case_as_Allocate();
}

template<> inline const Halide::Serialize::Free *IfThenElse::then_case_as<Halide::Serialize::Free>() const {
  return then_case_as_Free();
}

template<> inline const Halide::Serialize::Realize *IfThenElse::then_case_as<Halide::Serialize::Realize>() const {
  return then_case_as_Realize();
}

template<> inline const Halide::Serialize::Block *IfThenElse::then_case_as<Halide::Serialize::Block>() const {
  return then_case_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *IfThenElse::then_case_as<Halide::Serialize::IfThenElse>() const {
  return then_case_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *IfThenElse::then_case_as<Halide::Serialize::Evaluate>() const {
  return then_case_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *IfThenElse::then_case_as<Halide::Serialize::Prefetch>() const {
  return then_case_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *IfThenElse::then_case_as<Halide::Serialize::Acquire>() const {
  return then_case_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *IfThenElse::then_case_as<Halide::Serialize::Fork>() const {
  return then_case_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *IfThenElse::then_case_as<Halide::Serialize::Atomic>() const {
  return then_case_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *IfThenElse::then_case_as<Halide::Serialize::HoistedStorage>() const {
  return then_case_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *IfThenElse::then_case_as<Halide::Serialize::UndefinedStmt>() const {
  return then_case_as_UndefinedStmt();
}

template<> inline const Halide::Serialize::LetStmt *IfThenElse::else_case_as<Halide::Serialize::LetStmt>() const {
  return else_case_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *IfThenElse::else_case_as<Halide::Serialize::AssertStmt>() const {
  return else_case_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *IfThenElse::else_case_as<Halide::Serialize::ProducerConsumer>() const {
  return else_case_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *IfThenElse::else_case_as<Halide::Serialize::For>() const {
  return else_case_as_For();
}

template<> inline const Halide::Serialize::Store *IfThenElse::else_case_as<Halide::Serialize::Store>() const {
  return else_case_as_Store();
}

template<> inline const Halide::Serialize::Provide *IfThenElse::else_case_as<Halide::Serialize::Provide>() const {
  return else_case_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *IfThenElse::else_case_as<Halide::Serialize::Allocate>() const {
  return else_case_as_Allocate();
}

template<> inline const Halide::Serialize::Free *IfThenElse::else_case_as<Halide::Serialize::Free>() const {
  return else_case_as_Free();
}

template<> inline const Halide::Serialize::Realize *IfThenElse::else_case_as<Halide::Serialize::Realize>() const {
  return else_case_as_Realize();
}

template<> inline const Halide::Serialize::Block *IfThenElse::else_case_as<Halide::Serialize::Block>() const {
  return else_case_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *IfThenElse::else_case_as<Halide::Serialize::IfThenElse>() const {
  return else_case_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *IfThenElse::else_case_as<Halide::Serialize::Evaluate>() const {
  return else_case_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *IfThenElse::else_case_as<Halide::Serialize::Prefetch>() const {
  return else_case_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *IfThenElse::else_case_as<Halide::Serialize::Acquire>() const {
  return else_case_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *IfThenElse::else_case_as<Halide::Serialize::Fork>() const {
  return else_case_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *IfThenElse::else_case_as<Halide::Serialize::Atomic>() const {
  return else_case_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *IfThenElse::else_case_as<Halide::Serialize::HoistedStorage>() const {
  return else_case_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *IfThenElse::else_case_as<Halide::Serialize::UndefinedStmt>() const {
  return else_case_as_UndefinedStmt();
}

struct IfThenElseBuilder {
  typedef IfThenElse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(IfThenElse::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(IfThenElse::VT_CONDITION, condition);
  }
  void add_then_case_type(Halide::Serialize::Stmt then_case_type) {
    fbb_.AddElement<uint8_t>(IfThenElse::VT_THEN_CASE_TYPE, static_cast<uint8_t>(then_case_type), 0);
  }
  void add_then_case(::flatbuffers::Offset<void> then_case) {
    fbb_.AddOffset(IfThenElse::VT_THEN_CASE, then_case);
  }
  void add_else_case_type(Halide::Serialize::Stmt else_case_type) {
    fbb_.AddElement<uint8_t>(IfThenElse::VT_ELSE_CASE_TYPE, static_cast<uint8_t>(else_case_type), 0);
  }
  void add_else_case(::flatbuffers::Offset<void> else_case) {
    fbb_.AddOffset(IfThenElse::VT_ELSE_CASE, else_case);
  }
  explicit IfThenElseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IfThenElse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IfThenElse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IfThenElse> CreateIfThenElse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Stmt then_case_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> then_case = 0,
    Halide::Serialize::Stmt else_case_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> else_case = 0) {
  IfThenElseBuilder builder_(_fbb);
  builder_.add_else_case(else_case);
  builder_.add_then_case(then_case);
  builder_.add_condition(condition);
  builder_.add_else_case_type(else_case_type);
  builder_.add_then_case_type(then_case_type);
  builder_.add_condition_type(condition_type);
  return builder_.Finish();
}

struct IfThenElse::Traits {
  using type = IfThenElse;
  static auto constexpr Create = CreateIfThenElse;
};

struct Evaluate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvaluateBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6
  };
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Evaluate::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Evaluate::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Evaluate::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Evaluate::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Evaluate::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Evaluate::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Evaluate::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Evaluate::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Evaluate::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Evaluate::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Evaluate::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Evaluate::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Evaluate::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Evaluate::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Evaluate::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Evaluate::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Evaluate::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Evaluate::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Evaluate::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Evaluate::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Evaluate::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Evaluate::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Evaluate::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Evaluate::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Evaluate::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Evaluate::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Evaluate::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Evaluate::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Evaluate::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Evaluate::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Evaluate::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Evaluate::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

struct EvaluateBuilder {
  typedef Evaluate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Evaluate::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Evaluate::VT_VALUE, value);
  }
  explicit EvaluateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Evaluate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Evaluate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Evaluate> CreateEvaluate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0) {
  EvaluateBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Evaluate::Traits {
  using type = Evaluate;
  static auto constexpr Create = CreateEvaluate;
};

struct PrefetchDirective FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PrefetchDirectiveBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AT = 6,
    VT_FROM = 8,
    VT_OFFSET_TYPE = 10,
    VT_OFFSET = 12,
    VT_STRATEGY = 14,
    VT_PARAM_NAME = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *at() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AT);
  }
  const ::flatbuffers::String *from() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FROM);
  }
  Halide::Serialize::Expr offset_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_OFFSET_TYPE, 0));
  }
  const void *offset() const {
    return GetPointer<const void *>(VT_OFFSET);
  }
  template<typename T> const T *offset_as() const;
  const Halide::Serialize::IntImm *offset_as_IntImm() const {
    return offset_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(offset()) : nullptr;
  }
  const Halide::Serialize::UIntImm *offset_as_UIntImm() const {
    return offset_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(offset()) : nullptr;
  }
  const Halide::Serialize::FloatImm *offset_as_FloatImm() const {
    return offset_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(offset()) : nullptr;
  }
  const Halide::Serialize::StringImm *offset_as_StringImm() const {
    return offset_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(offset()) : nullptr;
  }
  const Halide::Serialize::Cast *offset_as_Cast() const {
    return offset_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(offset()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *offset_as_Reinterpret() const {
    return offset_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(offset()) : nullptr;
  }
  const Halide::Serialize::Add *offset_as_Add() const {
    return offset_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(offset()) : nullptr;
  }
  const Halide::Serialize::Sub *offset_as_Sub() const {
    return offset_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(offset()) : nullptr;
  }
  const Halide::Serialize::Mul *offset_as_Mul() const {
    return offset_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(offset()) : nullptr;
  }
  const Halide::Serialize::Div *offset_as_Div() const {
    return offset_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(offset()) : nullptr;
  }
  const Halide::Serialize::Mod *offset_as_Mod() const {
    return offset_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(offset()) : nullptr;
  }
  const Halide::Serialize::Min *offset_as_Min() const {
    return offset_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(offset()) : nullptr;
  }
  const Halide::Serialize::Max *offset_as_Max() const {
    return offset_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(offset()) : nullptr;
  }
  const Halide::Serialize::EQ *offset_as_EQ() const {
    return offset_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(offset()) : nullptr;
  }
  const Halide::Serialize::NE *offset_as_NE() const {
    return offset_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(offset()) : nullptr;
  }
  const Halide::Serialize::LT *offset_as_LT() const {
    return offset_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(offset()) : nullptr;
  }
  const Halide::Serialize::LE *offset_as_LE() const {
    return offset_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(offset()) : nullptr;
  }
  const Halide::Serialize::GT *offset_as_GT() const {
    return offset_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(offset()) : nullptr;
  }
  const Halide::Serialize::GE *offset_as_GE() const {
    return offset_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(offset()) : nullptr;
  }
  const Halide::Serialize::And *offset_as_And() const {
    return offset_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(offset()) : nullptr;
  }
  const Halide::Serialize::Or *offset_as_Or() const {
    return offset_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(offset()) : nullptr;
  }
  const Halide::Serialize::Not *offset_as_Not() const {
    return offset_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(offset()) : nullptr;
  }
  const Halide::Serialize::Select *offset_as_Select() const {
    return offset_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(offset()) : nullptr;
  }
  const Halide::Serialize::Load *offset_as_Load() const {
    return offset_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(offset()) : nullptr;
  }
  const Halide::Serialize::Ramp *offset_as_Ramp() const {
    return offset_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(offset()) : nullptr;
  }
  const Halide::Serialize::Broadcast *offset_as_Broadcast() const {
    return offset_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(offset()) : nullptr;
  }
  const Halide::Serialize::Let *offset_as_Let() const {
    return offset_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(offset()) : nullptr;
  }
  const Halide::Serialize::Call *offset_as_Call() const {
    return offset_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(offset()) : nullptr;
  }
  const Halide::Serialize::Variable *offset_as_Variable() const {
    return offset_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(offset()) : nullptr;
  }
  const Halide::Serialize::Shuffle *offset_as_Shuffle() const {
    return offset_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(offset()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *offset_as_VectorReduce() const {
    return offset_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(offset()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *offset_as_UndefinedExpr() const {
    return offset_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(offset()) : nullptr;
  }
  Halide::Serialize::PrefetchBoundStrategy strategy() const {
    return static_cast<Halide::Serialize::PrefetchBoundStrategy>(GetField<uint8_t>(VT_STRATEGY, 0));
  }
  const ::flatbuffers::String *param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAM_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_AT) &&
           verifier.VerifyString(at()) &&
           VerifyOffset(verifier, VT_FROM) &&
           verifier.VerifyString(from()) &&
           VerifyField<uint8_t>(verifier, VT_OFFSET_TYPE, 1) &&
           VerifyOffset(verifier, VT_OFFSET) &&
           VerifyExpr(verifier, offset(), offset_type()) &&
           VerifyField<uint8_t>(verifier, VT_STRATEGY, 1) &&
           VerifyOffset(verifier, VT_PARAM_NAME) &&
           verifier.VerifyString(param_name()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *PrefetchDirective::offset_as<Halide::Serialize::IntImm>() const {
  return offset_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *PrefetchDirective::offset_as<Halide::Serialize::UIntImm>() const {
  return offset_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *PrefetchDirective::offset_as<Halide::Serialize::FloatImm>() const {
  return offset_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *PrefetchDirective::offset_as<Halide::Serialize::StringImm>() const {
  return offset_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *PrefetchDirective::offset_as<Halide::Serialize::Cast>() const {
  return offset_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *PrefetchDirective::offset_as<Halide::Serialize::Reinterpret>() const {
  return offset_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *PrefetchDirective::offset_as<Halide::Serialize::Add>() const {
  return offset_as_Add();
}

template<> inline const Halide::Serialize::Sub *PrefetchDirective::offset_as<Halide::Serialize::Sub>() const {
  return offset_as_Sub();
}

template<> inline const Halide::Serialize::Mul *PrefetchDirective::offset_as<Halide::Serialize::Mul>() const {
  return offset_as_Mul();
}

template<> inline const Halide::Serialize::Div *PrefetchDirective::offset_as<Halide::Serialize::Div>() const {
  return offset_as_Div();
}

template<> inline const Halide::Serialize::Mod *PrefetchDirective::offset_as<Halide::Serialize::Mod>() const {
  return offset_as_Mod();
}

template<> inline const Halide::Serialize::Min *PrefetchDirective::offset_as<Halide::Serialize::Min>() const {
  return offset_as_Min();
}

template<> inline const Halide::Serialize::Max *PrefetchDirective::offset_as<Halide::Serialize::Max>() const {
  return offset_as_Max();
}

template<> inline const Halide::Serialize::EQ *PrefetchDirective::offset_as<Halide::Serialize::EQ>() const {
  return offset_as_EQ();
}

template<> inline const Halide::Serialize::NE *PrefetchDirective::offset_as<Halide::Serialize::NE>() const {
  return offset_as_NE();
}

template<> inline const Halide::Serialize::LT *PrefetchDirective::offset_as<Halide::Serialize::LT>() const {
  return offset_as_LT();
}

template<> inline const Halide::Serialize::LE *PrefetchDirective::offset_as<Halide::Serialize::LE>() const {
  return offset_as_LE();
}

template<> inline const Halide::Serialize::GT *PrefetchDirective::offset_as<Halide::Serialize::GT>() const {
  return offset_as_GT();
}

template<> inline const Halide::Serialize::GE *PrefetchDirective::offset_as<Halide::Serialize::GE>() const {
  return offset_as_GE();
}

template<> inline const Halide::Serialize::And *PrefetchDirective::offset_as<Halide::Serialize::And>() const {
  return offset_as_And();
}

template<> inline const Halide::Serialize::Or *PrefetchDirective::offset_as<Halide::Serialize::Or>() const {
  return offset_as_Or();
}

template<> inline const Halide::Serialize::Not *PrefetchDirective::offset_as<Halide::Serialize::Not>() const {
  return offset_as_Not();
}

template<> inline const Halide::Serialize::Select *PrefetchDirective::offset_as<Halide::Serialize::Select>() const {
  return offset_as_Select();
}

template<> inline const Halide::Serialize::Load *PrefetchDirective::offset_as<Halide::Serialize::Load>() const {
  return offset_as_Load();
}

template<> inline const Halide::Serialize::Ramp *PrefetchDirective::offset_as<Halide::Serialize::Ramp>() const {
  return offset_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *PrefetchDirective::offset_as<Halide::Serialize::Broadcast>() const {
  return offset_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *PrefetchDirective::offset_as<Halide::Serialize::Let>() const {
  return offset_as_Let();
}

template<> inline const Halide::Serialize::Call *PrefetchDirective::offset_as<Halide::Serialize::Call>() const {
  return offset_as_Call();
}

template<> inline const Halide::Serialize::Variable *PrefetchDirective::offset_as<Halide::Serialize::Variable>() const {
  return offset_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *PrefetchDirective::offset_as<Halide::Serialize::Shuffle>() const {
  return offset_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *PrefetchDirective::offset_as<Halide::Serialize::VectorReduce>() const {
  return offset_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *PrefetchDirective::offset_as<Halide::Serialize::UndefinedExpr>() const {
  return offset_as_UndefinedExpr();
}

struct PrefetchDirectiveBuilder {
  typedef PrefetchDirective Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(PrefetchDirective::VT_NAME, name);
  }
  void add_at(::flatbuffers::Offset<::flatbuffers::String> at) {
    fbb_.AddOffset(PrefetchDirective::VT_AT, at);
  }
  void add_from(::flatbuffers::Offset<::flatbuffers::String> from) {
    fbb_.AddOffset(PrefetchDirective::VT_FROM, from);
  }
  void add_offset_type(Halide::Serialize::Expr offset_type) {
    fbb_.AddElement<uint8_t>(PrefetchDirective::VT_OFFSET_TYPE, static_cast<uint8_t>(offset_type), 0);
  }
  void add_offset(::flatbuffers::Offset<void> offset) {
    fbb_.AddOffset(PrefetchDirective::VT_OFFSET, offset);
  }
  void add_strategy(Halide::Serialize::PrefetchBoundStrategy strategy) {
    fbb_.AddElement<uint8_t>(PrefetchDirective::VT_STRATEGY, static_cast<uint8_t>(strategy), 0);
  }
  void add_param_name(::flatbuffers::Offset<::flatbuffers::String> param_name) {
    fbb_.AddOffset(PrefetchDirective::VT_PARAM_NAME, param_name);
  }
  explicit PrefetchDirectiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PrefetchDirective> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PrefetchDirective>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PrefetchDirective> CreatePrefetchDirective(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> at = 0,
    ::flatbuffers::Offset<::flatbuffers::String> from = 0,
    Halide::Serialize::Expr offset_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> offset = 0,
    Halide::Serialize::PrefetchBoundStrategy strategy = Halide::Serialize::PrefetchBoundStrategy::Clamp,
    ::flatbuffers::Offset<::flatbuffers::String> param_name = 0) {
  PrefetchDirectiveBuilder builder_(_fbb);
  builder_.add_param_name(param_name);
  builder_.add_offset(offset);
  builder_.add_from(from);
  builder_.add_at(at);
  builder_.add_name(name);
  builder_.add_strategy(strategy);
  builder_.add_offset_type(offset_type);
  return builder_.Finish();
}

struct PrefetchDirective::Traits {
  using type = PrefetchDirective;
  static auto constexpr Create = CreatePrefetchDirective;
};

inline ::flatbuffers::Offset<PrefetchDirective> CreatePrefetchDirectiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *at = nullptr,
    const char *from = nullptr,
    Halide::Serialize::Expr offset_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> offset = 0,
    Halide::Serialize::PrefetchBoundStrategy strategy = Halide::Serialize::PrefetchBoundStrategy::Clamp,
    const char *param_name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto at__ = at ? _fbb.CreateString(at) : 0;
  auto from__ = from ? _fbb.CreateString(from) : 0;
  auto param_name__ = param_name ? _fbb.CreateString(param_name) : 0;
  return Halide::Serialize::CreatePrefetchDirective(
      _fbb,
      name__,
      at__,
      from__,
      offset_type,
      offset,
      strategy,
      param_name__);
}

struct Prefetch FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PrefetchBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPES = 6,
    VT_BOUNDS = 8,
    VT_PREFETCH = 10,
    VT_CONDITION_TYPE = 12,
    VT_CONDITION = 14,
    VT_BODY_TYPE = 16,
    VT_BODY = 18
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *types() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *>(VT_TYPES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>> *bounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>> *>(VT_BOUNDS);
  }
  const Halide::Serialize::PrefetchDirective *prefetch() const {
    return GetPointer<const Halide::Serialize::PrefetchDirective *>(VT_PREFETCH);
  }
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           verifier.VerifyVectorOfTables(types()) &&
           VerifyOffset(verifier, VT_BOUNDS) &&
           verifier.VerifyVector(bounds()) &&
           verifier.VerifyVectorOfTables(bounds()) &&
           VerifyOffset(verifier, VT_PREFETCH) &&
           verifier.VerifyTable(prefetch()) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Prefetch::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Prefetch::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Prefetch::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Prefetch::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Prefetch::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Prefetch::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Prefetch::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *Prefetch::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Prefetch::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *Prefetch::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *Prefetch::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *Prefetch::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *Prefetch::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *Prefetch::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *Prefetch::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *Prefetch::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *Prefetch::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *Prefetch::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *Prefetch::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *Prefetch::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *Prefetch::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *Prefetch::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *Prefetch::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *Prefetch::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Prefetch::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Prefetch::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Prefetch::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *Prefetch::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *Prefetch::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Prefetch::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Prefetch::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Prefetch::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *Prefetch::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Prefetch::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Prefetch::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Prefetch::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *Prefetch::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *Prefetch::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Prefetch::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Prefetch::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *Prefetch::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *Prefetch::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Prefetch::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Prefetch::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Prefetch::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Prefetch::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Prefetch::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Prefetch::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Prefetch::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Prefetch::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct PrefetchBuilder {
  typedef Prefetch Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Prefetch::VT_NAME, name);
  }
  void add_types(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> types) {
    fbb_.AddOffset(Prefetch::VT_TYPES, types);
  }
  void add_bounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>>> bounds) {
    fbb_.AddOffset(Prefetch::VT_BOUNDS, bounds);
  }
  void add_prefetch(::flatbuffers::Offset<Halide::Serialize::PrefetchDirective> prefetch) {
    fbb_.AddOffset(Prefetch::VT_PREFETCH, prefetch);
  }
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(Prefetch::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(Prefetch::VT_CONDITION, condition);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(Prefetch::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Prefetch::VT_BODY, body);
  }
  explicit PrefetchBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Prefetch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Prefetch>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Prefetch> CreatePrefetch(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> types = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Range>>> bounds = 0,
    ::flatbuffers::Offset<Halide::Serialize::PrefetchDirective> prefetch = 0,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  PrefetchBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_condition(condition);
  builder_.add_prefetch(prefetch);
  builder_.add_bounds(bounds);
  builder_.add_types(types);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_condition_type(condition_type);
  return builder_.Finish();
}

struct Prefetch::Traits {
  using type = Prefetch;
  static auto constexpr Create = CreatePrefetch;
};

inline ::flatbuffers::Offset<Prefetch> CreatePrefetchDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Type>> *types = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Range>> *bounds = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::PrefetchDirective> prefetch = 0,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto types__ = types ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Type>>(*types) : 0;
  auto bounds__ = bounds ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Range>>(*bounds) : 0;
  return Halide::Serialize::CreatePrefetch(
      _fbb,
      name__,
      types__,
      bounds__,
      prefetch,
      condition_type,
      condition,
      body_type,
      body);
}

struct Acquire FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AcquireBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEMAPHORE_TYPE = 4,
    VT_SEMAPHORE = 6,
    VT_COUNT_TYPE = 8,
    VT_COUNT = 10,
    VT_BODY_TYPE = 12,
    VT_BODY = 14
  };
  Halide::Serialize::Expr semaphore_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_SEMAPHORE_TYPE, 0));
  }
  const void *semaphore() const {
    return GetPointer<const void *>(VT_SEMAPHORE);
  }
  template<typename T> const T *semaphore_as() const;
  const Halide::Serialize::IntImm *semaphore_as_IntImm() const {
    return semaphore_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::UIntImm *semaphore_as_UIntImm() const {
    return semaphore_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::FloatImm *semaphore_as_FloatImm() const {
    return semaphore_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::StringImm *semaphore_as_StringImm() const {
    return semaphore_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Cast *semaphore_as_Cast() const {
    return semaphore_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *semaphore_as_Reinterpret() const {
    return semaphore_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Add *semaphore_as_Add() const {
    return semaphore_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Sub *semaphore_as_Sub() const {
    return semaphore_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Mul *semaphore_as_Mul() const {
    return semaphore_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Div *semaphore_as_Div() const {
    return semaphore_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Mod *semaphore_as_Mod() const {
    return semaphore_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Min *semaphore_as_Min() const {
    return semaphore_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Max *semaphore_as_Max() const {
    return semaphore_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::EQ *semaphore_as_EQ() const {
    return semaphore_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::NE *semaphore_as_NE() const {
    return semaphore_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::LT *semaphore_as_LT() const {
    return semaphore_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::LE *semaphore_as_LE() const {
    return semaphore_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::GT *semaphore_as_GT() const {
    return semaphore_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::GE *semaphore_as_GE() const {
    return semaphore_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::And *semaphore_as_And() const {
    return semaphore_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Or *semaphore_as_Or() const {
    return semaphore_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Not *semaphore_as_Not() const {
    return semaphore_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Select *semaphore_as_Select() const {
    return semaphore_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Load *semaphore_as_Load() const {
    return semaphore_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Ramp *semaphore_as_Ramp() const {
    return semaphore_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Broadcast *semaphore_as_Broadcast() const {
    return semaphore_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Let *semaphore_as_Let() const {
    return semaphore_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Call *semaphore_as_Call() const {
    return semaphore_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Variable *semaphore_as_Variable() const {
    return semaphore_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::Shuffle *semaphore_as_Shuffle() const {
    return semaphore_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *semaphore_as_VectorReduce() const {
    return semaphore_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(semaphore()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *semaphore_as_UndefinedExpr() const {
    return semaphore_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(semaphore()) : nullptr;
  }
  Halide::Serialize::Expr count_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_COUNT_TYPE, 0));
  }
  const void *count() const {
    return GetPointer<const void *>(VT_COUNT);
  }
  template<typename T> const T *count_as() const;
  const Halide::Serialize::IntImm *count_as_IntImm() const {
    return count_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(count()) : nullptr;
  }
  const Halide::Serialize::UIntImm *count_as_UIntImm() const {
    return count_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(count()) : nullptr;
  }
  const Halide::Serialize::FloatImm *count_as_FloatImm() const {
    return count_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(count()) : nullptr;
  }
  const Halide::Serialize::StringImm *count_as_StringImm() const {
    return count_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(count()) : nullptr;
  }
  const Halide::Serialize::Cast *count_as_Cast() const {
    return count_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(count()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *count_as_Reinterpret() const {
    return count_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(count()) : nullptr;
  }
  const Halide::Serialize::Add *count_as_Add() const {
    return count_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(count()) : nullptr;
  }
  const Halide::Serialize::Sub *count_as_Sub() const {
    return count_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(count()) : nullptr;
  }
  const Halide::Serialize::Mul *count_as_Mul() const {
    return count_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(count()) : nullptr;
  }
  const Halide::Serialize::Div *count_as_Div() const {
    return count_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(count()) : nullptr;
  }
  const Halide::Serialize::Mod *count_as_Mod() const {
    return count_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(count()) : nullptr;
  }
  const Halide::Serialize::Min *count_as_Min() const {
    return count_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(count()) : nullptr;
  }
  const Halide::Serialize::Max *count_as_Max() const {
    return count_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(count()) : nullptr;
  }
  const Halide::Serialize::EQ *count_as_EQ() const {
    return count_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(count()) : nullptr;
  }
  const Halide::Serialize::NE *count_as_NE() const {
    return count_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(count()) : nullptr;
  }
  const Halide::Serialize::LT *count_as_LT() const {
    return count_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(count()) : nullptr;
  }
  const Halide::Serialize::LE *count_as_LE() const {
    return count_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(count()) : nullptr;
  }
  const Halide::Serialize::GT *count_as_GT() const {
    return count_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(count()) : nullptr;
  }
  const Halide::Serialize::GE *count_as_GE() const {
    return count_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(count()) : nullptr;
  }
  const Halide::Serialize::And *count_as_And() const {
    return count_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(count()) : nullptr;
  }
  const Halide::Serialize::Or *count_as_Or() const {
    return count_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(count()) : nullptr;
  }
  const Halide::Serialize::Not *count_as_Not() const {
    return count_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(count()) : nullptr;
  }
  const Halide::Serialize::Select *count_as_Select() const {
    return count_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(count()) : nullptr;
  }
  const Halide::Serialize::Load *count_as_Load() const {
    return count_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(count()) : nullptr;
  }
  const Halide::Serialize::Ramp *count_as_Ramp() const {
    return count_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(count()) : nullptr;
  }
  const Halide::Serialize::Broadcast *count_as_Broadcast() const {
    return count_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(count()) : nullptr;
  }
  const Halide::Serialize::Let *count_as_Let() const {
    return count_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(count()) : nullptr;
  }
  const Halide::Serialize::Call *count_as_Call() const {
    return count_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(count()) : nullptr;
  }
  const Halide::Serialize::Variable *count_as_Variable() const {
    return count_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(count()) : nullptr;
  }
  const Halide::Serialize::Shuffle *count_as_Shuffle() const {
    return count_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(count()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *count_as_VectorReduce() const {
    return count_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(count()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *count_as_UndefinedExpr() const {
    return count_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(count()) : nullptr;
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SEMAPHORE_TYPE, 1) &&
           VerifyOffset(verifier, VT_SEMAPHORE) &&
           VerifyExpr(verifier, semaphore(), semaphore_type()) &&
           VerifyField<uint8_t>(verifier, VT_COUNT_TYPE, 1) &&
           VerifyOffset(verifier, VT_COUNT) &&
           VerifyExpr(verifier, count(), count_type()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Acquire::semaphore_as<Halide::Serialize::IntImm>() const {
  return semaphore_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Acquire::semaphore_as<Halide::Serialize::UIntImm>() const {
  return semaphore_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Acquire::semaphore_as<Halide::Serialize::FloatImm>() const {
  return semaphore_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Acquire::semaphore_as<Halide::Serialize::StringImm>() const {
  return semaphore_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Acquire::semaphore_as<Halide::Serialize::Cast>() const {
  return semaphore_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Acquire::semaphore_as<Halide::Serialize::Reinterpret>() const {
  return semaphore_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Acquire::semaphore_as<Halide::Serialize::Add>() const {
  return semaphore_as_Add();
}

template<> inline const Halide::Serialize::Sub *Acquire::semaphore_as<Halide::Serialize::Sub>() const {
  return semaphore_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Acquire::semaphore_as<Halide::Serialize::Mul>() const {
  return semaphore_as_Mul();
}

template<> inline const Halide::Serialize::Div *Acquire::semaphore_as<Halide::Serialize::Div>() const {
  return semaphore_as_Div();
}

template<> inline const Halide::Serialize::Mod *Acquire::semaphore_as<Halide::Serialize::Mod>() const {
  return semaphore_as_Mod();
}

template<> inline const Halide::Serialize::Min *Acquire::semaphore_as<Halide::Serialize::Min>() const {
  return semaphore_as_Min();
}

template<> inline const Halide::Serialize::Max *Acquire::semaphore_as<Halide::Serialize::Max>() const {
  return semaphore_as_Max();
}

template<> inline const Halide::Serialize::EQ *Acquire::semaphore_as<Halide::Serialize::EQ>() const {
  return semaphore_as_EQ();
}

template<> inline const Halide::Serialize::NE *Acquire::semaphore_as<Halide::Serialize::NE>() const {
  return semaphore_as_NE();
}

template<> inline const Halide::Serialize::LT *Acquire::semaphore_as<Halide::Serialize::LT>() const {
  return semaphore_as_LT();
}

template<> inline const Halide::Serialize::LE *Acquire::semaphore_as<Halide::Serialize::LE>() const {
  return semaphore_as_LE();
}

template<> inline const Halide::Serialize::GT *Acquire::semaphore_as<Halide::Serialize::GT>() const {
  return semaphore_as_GT();
}

template<> inline const Halide::Serialize::GE *Acquire::semaphore_as<Halide::Serialize::GE>() const {
  return semaphore_as_GE();
}

template<> inline const Halide::Serialize::And *Acquire::semaphore_as<Halide::Serialize::And>() const {
  return semaphore_as_And();
}

template<> inline const Halide::Serialize::Or *Acquire::semaphore_as<Halide::Serialize::Or>() const {
  return semaphore_as_Or();
}

template<> inline const Halide::Serialize::Not *Acquire::semaphore_as<Halide::Serialize::Not>() const {
  return semaphore_as_Not();
}

template<> inline const Halide::Serialize::Select *Acquire::semaphore_as<Halide::Serialize::Select>() const {
  return semaphore_as_Select();
}

template<> inline const Halide::Serialize::Load *Acquire::semaphore_as<Halide::Serialize::Load>() const {
  return semaphore_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Acquire::semaphore_as<Halide::Serialize::Ramp>() const {
  return semaphore_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Acquire::semaphore_as<Halide::Serialize::Broadcast>() const {
  return semaphore_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Acquire::semaphore_as<Halide::Serialize::Let>() const {
  return semaphore_as_Let();
}

template<> inline const Halide::Serialize::Call *Acquire::semaphore_as<Halide::Serialize::Call>() const {
  return semaphore_as_Call();
}

template<> inline const Halide::Serialize::Variable *Acquire::semaphore_as<Halide::Serialize::Variable>() const {
  return semaphore_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Acquire::semaphore_as<Halide::Serialize::Shuffle>() const {
  return semaphore_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Acquire::semaphore_as<Halide::Serialize::VectorReduce>() const {
  return semaphore_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Acquire::semaphore_as<Halide::Serialize::UndefinedExpr>() const {
  return semaphore_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Acquire::count_as<Halide::Serialize::IntImm>() const {
  return count_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Acquire::count_as<Halide::Serialize::UIntImm>() const {
  return count_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Acquire::count_as<Halide::Serialize::FloatImm>() const {
  return count_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Acquire::count_as<Halide::Serialize::StringImm>() const {
  return count_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Acquire::count_as<Halide::Serialize::Cast>() const {
  return count_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Acquire::count_as<Halide::Serialize::Reinterpret>() const {
  return count_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Acquire::count_as<Halide::Serialize::Add>() const {
  return count_as_Add();
}

template<> inline const Halide::Serialize::Sub *Acquire::count_as<Halide::Serialize::Sub>() const {
  return count_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Acquire::count_as<Halide::Serialize::Mul>() const {
  return count_as_Mul();
}

template<> inline const Halide::Serialize::Div *Acquire::count_as<Halide::Serialize::Div>() const {
  return count_as_Div();
}

template<> inline const Halide::Serialize::Mod *Acquire::count_as<Halide::Serialize::Mod>() const {
  return count_as_Mod();
}

template<> inline const Halide::Serialize::Min *Acquire::count_as<Halide::Serialize::Min>() const {
  return count_as_Min();
}

template<> inline const Halide::Serialize::Max *Acquire::count_as<Halide::Serialize::Max>() const {
  return count_as_Max();
}

template<> inline const Halide::Serialize::EQ *Acquire::count_as<Halide::Serialize::EQ>() const {
  return count_as_EQ();
}

template<> inline const Halide::Serialize::NE *Acquire::count_as<Halide::Serialize::NE>() const {
  return count_as_NE();
}

template<> inline const Halide::Serialize::LT *Acquire::count_as<Halide::Serialize::LT>() const {
  return count_as_LT();
}

template<> inline const Halide::Serialize::LE *Acquire::count_as<Halide::Serialize::LE>() const {
  return count_as_LE();
}

template<> inline const Halide::Serialize::GT *Acquire::count_as<Halide::Serialize::GT>() const {
  return count_as_GT();
}

template<> inline const Halide::Serialize::GE *Acquire::count_as<Halide::Serialize::GE>() const {
  return count_as_GE();
}

template<> inline const Halide::Serialize::And *Acquire::count_as<Halide::Serialize::And>() const {
  return count_as_And();
}

template<> inline const Halide::Serialize::Or *Acquire::count_as<Halide::Serialize::Or>() const {
  return count_as_Or();
}

template<> inline const Halide::Serialize::Not *Acquire::count_as<Halide::Serialize::Not>() const {
  return count_as_Not();
}

template<> inline const Halide::Serialize::Select *Acquire::count_as<Halide::Serialize::Select>() const {
  return count_as_Select();
}

template<> inline const Halide::Serialize::Load *Acquire::count_as<Halide::Serialize::Load>() const {
  return count_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Acquire::count_as<Halide::Serialize::Ramp>() const {
  return count_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Acquire::count_as<Halide::Serialize::Broadcast>() const {
  return count_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Acquire::count_as<Halide::Serialize::Let>() const {
  return count_as_Let();
}

template<> inline const Halide::Serialize::Call *Acquire::count_as<Halide::Serialize::Call>() const {
  return count_as_Call();
}

template<> inline const Halide::Serialize::Variable *Acquire::count_as<Halide::Serialize::Variable>() const {
  return count_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Acquire::count_as<Halide::Serialize::Shuffle>() const {
  return count_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Acquire::count_as<Halide::Serialize::VectorReduce>() const {
  return count_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Acquire::count_as<Halide::Serialize::UndefinedExpr>() const {
  return count_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::LetStmt *Acquire::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Acquire::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Acquire::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Acquire::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *Acquire::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *Acquire::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Acquire::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Acquire::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *Acquire::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *Acquire::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Acquire::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Acquire::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Acquire::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Acquire::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Acquire::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Acquire::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Acquire::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Acquire::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct AcquireBuilder {
  typedef Acquire Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_semaphore_type(Halide::Serialize::Expr semaphore_type) {
    fbb_.AddElement<uint8_t>(Acquire::VT_SEMAPHORE_TYPE, static_cast<uint8_t>(semaphore_type), 0);
  }
  void add_semaphore(::flatbuffers::Offset<void> semaphore) {
    fbb_.AddOffset(Acquire::VT_SEMAPHORE, semaphore);
  }
  void add_count_type(Halide::Serialize::Expr count_type) {
    fbb_.AddElement<uint8_t>(Acquire::VT_COUNT_TYPE, static_cast<uint8_t>(count_type), 0);
  }
  void add_count(::flatbuffers::Offset<void> count) {
    fbb_.AddOffset(Acquire::VT_COUNT, count);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(Acquire::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Acquire::VT_BODY, body);
  }
  explicit AcquireBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Acquire> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Acquire>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Acquire> CreateAcquire(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr semaphore_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> semaphore = 0,
    Halide::Serialize::Expr count_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> count = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  AcquireBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_count(count);
  builder_.add_semaphore(semaphore);
  builder_.add_body_type(body_type);
  builder_.add_count_type(count_type);
  builder_.add_semaphore_type(semaphore_type);
  return builder_.Finish();
}

struct Acquire::Traits {
  using type = Acquire;
  static auto constexpr Create = CreateAcquire;
};

struct Fork FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ForkBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIRST_TYPE = 4,
    VT_FIRST = 6,
    VT_REST_TYPE = 8,
    VT_REST = 10
  };
  Halide::Serialize::Stmt first_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_FIRST_TYPE, 0));
  }
  const void *first() const {
    return GetPointer<const void *>(VT_FIRST);
  }
  template<typename T> const T *first_as() const;
  const Halide::Serialize::LetStmt *first_as_LetStmt() const {
    return first_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(first()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *first_as_AssertStmt() const {
    return first_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(first()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *first_as_ProducerConsumer() const {
    return first_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(first()) : nullptr;
  }
  const Halide::Serialize::For *first_as_For() const {
    return first_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(first()) : nullptr;
  }
  const Halide::Serialize::Store *first_as_Store() const {
    return first_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(first()) : nullptr;
  }
  const Halide::Serialize::Provide *first_as_Provide() const {
    return first_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(first()) : nullptr;
  }
  const Halide::Serialize::Allocate *first_as_Allocate() const {
    return first_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(first()) : nullptr;
  }
  const Halide::Serialize::Free *first_as_Free() const {
    return first_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(first()) : nullptr;
  }
  const Halide::Serialize::Realize *first_as_Realize() const {
    return first_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(first()) : nullptr;
  }
  const Halide::Serialize::Block *first_as_Block() const {
    return first_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(first()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *first_as_IfThenElse() const {
    return first_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(first()) : nullptr;
  }
  const Halide::Serialize::Evaluate *first_as_Evaluate() const {
    return first_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(first()) : nullptr;
  }
  const Halide::Serialize::Prefetch *first_as_Prefetch() const {
    return first_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(first()) : nullptr;
  }
  const Halide::Serialize::Acquire *first_as_Acquire() const {
    return first_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(first()) : nullptr;
  }
  const Halide::Serialize::Fork *first_as_Fork() const {
    return first_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(first()) : nullptr;
  }
  const Halide::Serialize::Atomic *first_as_Atomic() const {
    return first_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(first()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *first_as_HoistedStorage() const {
    return first_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(first()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *first_as_UndefinedStmt() const {
    return first_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(first()) : nullptr;
  }
  Halide::Serialize::Stmt rest_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_REST_TYPE, 0));
  }
  const void *rest() const {
    return GetPointer<const void *>(VT_REST);
  }
  template<typename T> const T *rest_as() const;
  const Halide::Serialize::LetStmt *rest_as_LetStmt() const {
    return rest_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(rest()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *rest_as_AssertStmt() const {
    return rest_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(rest()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *rest_as_ProducerConsumer() const {
    return rest_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(rest()) : nullptr;
  }
  const Halide::Serialize::For *rest_as_For() const {
    return rest_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(rest()) : nullptr;
  }
  const Halide::Serialize::Store *rest_as_Store() const {
    return rest_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(rest()) : nullptr;
  }
  const Halide::Serialize::Provide *rest_as_Provide() const {
    return rest_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(rest()) : nullptr;
  }
  const Halide::Serialize::Allocate *rest_as_Allocate() const {
    return rest_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(rest()) : nullptr;
  }
  const Halide::Serialize::Free *rest_as_Free() const {
    return rest_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(rest()) : nullptr;
  }
  const Halide::Serialize::Realize *rest_as_Realize() const {
    return rest_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(rest()) : nullptr;
  }
  const Halide::Serialize::Block *rest_as_Block() const {
    return rest_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(rest()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *rest_as_IfThenElse() const {
    return rest_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(rest()) : nullptr;
  }
  const Halide::Serialize::Evaluate *rest_as_Evaluate() const {
    return rest_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(rest()) : nullptr;
  }
  const Halide::Serialize::Prefetch *rest_as_Prefetch() const {
    return rest_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(rest()) : nullptr;
  }
  const Halide::Serialize::Acquire *rest_as_Acquire() const {
    return rest_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(rest()) : nullptr;
  }
  const Halide::Serialize::Fork *rest_as_Fork() const {
    return rest_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(rest()) : nullptr;
  }
  const Halide::Serialize::Atomic *rest_as_Atomic() const {
    return rest_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(rest()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *rest_as_HoistedStorage() const {
    return rest_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(rest()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *rest_as_UndefinedStmt() const {
    return rest_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(rest()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FIRST_TYPE, 1) &&
           VerifyOffset(verifier, VT_FIRST) &&
           VerifyStmt(verifier, first(), first_type()) &&
           VerifyField<uint8_t>(verifier, VT_REST_TYPE, 1) &&
           VerifyOffset(verifier, VT_REST) &&
           VerifyStmt(verifier, rest(), rest_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::LetStmt *Fork::first_as<Halide::Serialize::LetStmt>() const {
  return first_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Fork::first_as<Halide::Serialize::AssertStmt>() const {
  return first_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Fork::first_as<Halide::Serialize::ProducerConsumer>() const {
  return first_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Fork::first_as<Halide::Serialize::For>() const {
  return first_as_For();
}

template<> inline const Halide::Serialize::Store *Fork::first_as<Halide::Serialize::Store>() const {
  return first_as_Store();
}

template<> inline const Halide::Serialize::Provide *Fork::first_as<Halide::Serialize::Provide>() const {
  return first_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Fork::first_as<Halide::Serialize::Allocate>() const {
  return first_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Fork::first_as<Halide::Serialize::Free>() const {
  return first_as_Free();
}

template<> inline const Halide::Serialize::Realize *Fork::first_as<Halide::Serialize::Realize>() const {
  return first_as_Realize();
}

template<> inline const Halide::Serialize::Block *Fork::first_as<Halide::Serialize::Block>() const {
  return first_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Fork::first_as<Halide::Serialize::IfThenElse>() const {
  return first_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Fork::first_as<Halide::Serialize::Evaluate>() const {
  return first_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Fork::first_as<Halide::Serialize::Prefetch>() const {
  return first_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Fork::first_as<Halide::Serialize::Acquire>() const {
  return first_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Fork::first_as<Halide::Serialize::Fork>() const {
  return first_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Fork::first_as<Halide::Serialize::Atomic>() const {
  return first_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Fork::first_as<Halide::Serialize::HoistedStorage>() const {
  return first_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Fork::first_as<Halide::Serialize::UndefinedStmt>() const {
  return first_as_UndefinedStmt();
}

template<> inline const Halide::Serialize::LetStmt *Fork::rest_as<Halide::Serialize::LetStmt>() const {
  return rest_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Fork::rest_as<Halide::Serialize::AssertStmt>() const {
  return rest_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Fork::rest_as<Halide::Serialize::ProducerConsumer>() const {
  return rest_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Fork::rest_as<Halide::Serialize::For>() const {
  return rest_as_For();
}

template<> inline const Halide::Serialize::Store *Fork::rest_as<Halide::Serialize::Store>() const {
  return rest_as_Store();
}

template<> inline const Halide::Serialize::Provide *Fork::rest_as<Halide::Serialize::Provide>() const {
  return rest_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Fork::rest_as<Halide::Serialize::Allocate>() const {
  return rest_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Fork::rest_as<Halide::Serialize::Free>() const {
  return rest_as_Free();
}

template<> inline const Halide::Serialize::Realize *Fork::rest_as<Halide::Serialize::Realize>() const {
  return rest_as_Realize();
}

template<> inline const Halide::Serialize::Block *Fork::rest_as<Halide::Serialize::Block>() const {
  return rest_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Fork::rest_as<Halide::Serialize::IfThenElse>() const {
  return rest_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Fork::rest_as<Halide::Serialize::Evaluate>() const {
  return rest_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Fork::rest_as<Halide::Serialize::Prefetch>() const {
  return rest_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Fork::rest_as<Halide::Serialize::Acquire>() const {
  return rest_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Fork::rest_as<Halide::Serialize::Fork>() const {
  return rest_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Fork::rest_as<Halide::Serialize::Atomic>() const {
  return rest_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Fork::rest_as<Halide::Serialize::HoistedStorage>() const {
  return rest_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Fork::rest_as<Halide::Serialize::UndefinedStmt>() const {
  return rest_as_UndefinedStmt();
}

struct ForkBuilder {
  typedef Fork Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_first_type(Halide::Serialize::Stmt first_type) {
    fbb_.AddElement<uint8_t>(Fork::VT_FIRST_TYPE, static_cast<uint8_t>(first_type), 0);
  }
  void add_first(::flatbuffers::Offset<void> first) {
    fbb_.AddOffset(Fork::VT_FIRST, first);
  }
  void add_rest_type(Halide::Serialize::Stmt rest_type) {
    fbb_.AddElement<uint8_t>(Fork::VT_REST_TYPE, static_cast<uint8_t>(rest_type), 0);
  }
  void add_rest(::flatbuffers::Offset<void> rest) {
    fbb_.AddOffset(Fork::VT_REST, rest);
  }
  explicit ForkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Fork> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Fork>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Fork> CreateFork(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Stmt first_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> first = 0,
    Halide::Serialize::Stmt rest_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> rest = 0) {
  ForkBuilder builder_(_fbb);
  builder_.add_rest(rest);
  builder_.add_first(first);
  builder_.add_rest_type(rest_type);
  builder_.add_first_type(first_type);
  return builder_.Finish();
}

struct Fork::Traits {
  using type = Fork;
  static auto constexpr Create = CreateFork;
};

struct Atomic FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AtomicBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRODUCER_NAME = 4,
    VT_MUTEX_NAME = 6,
    VT_BODY_TYPE = 8,
    VT_BODY = 10
  };
  const ::flatbuffers::String *producer_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCER_NAME);
  }
  const ::flatbuffers::String *mutex_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MUTEX_NAME);
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRODUCER_NAME) &&
           verifier.VerifyString(producer_name()) &&
           VerifyOffset(verifier, VT_MUTEX_NAME) &&
           verifier.VerifyString(mutex_name()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::LetStmt *Atomic::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *Atomic::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *Atomic::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *Atomic::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *Atomic::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *Atomic::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *Atomic::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *Atomic::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *Atomic::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *Atomic::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *Atomic::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *Atomic::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *Atomic::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *Atomic::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *Atomic::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *Atomic::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *Atomic::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *Atomic::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct AtomicBuilder {
  typedef Atomic Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_producer_name(::flatbuffers::Offset<::flatbuffers::String> producer_name) {
    fbb_.AddOffset(Atomic::VT_PRODUCER_NAME, producer_name);
  }
  void add_mutex_name(::flatbuffers::Offset<::flatbuffers::String> mutex_name) {
    fbb_.AddOffset(Atomic::VT_MUTEX_NAME, mutex_name);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(Atomic::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Atomic::VT_BODY, body);
  }
  explicit AtomicBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Atomic> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Atomic>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Atomic> CreateAtomic(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> producer_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mutex_name = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  AtomicBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_mutex_name(mutex_name);
  builder_.add_producer_name(producer_name);
  builder_.add_body_type(body_type);
  return builder_.Finish();
}

struct Atomic::Traits {
  using type = Atomic;
  static auto constexpr Create = CreateAtomic;
};

inline ::flatbuffers::Offset<Atomic> CreateAtomicDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *producer_name = nullptr,
    const char *mutex_name = nullptr,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto producer_name__ = producer_name ? _fbb.CreateString(producer_name) : 0;
  auto mutex_name__ = mutex_name ? _fbb.CreateString(mutex_name) : 0;
  return Halide::Serialize::CreateAtomic(
      _fbb,
      producer_name__,
      mutex_name__,
      body_type,
      body);
}

struct HoistedStorage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HoistedStorageBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BODY_TYPE = 6,
    VT_BODY = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Stmt body_type() const {
    return static_cast<Halide::Serialize::Stmt>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::LetStmt *body_as_LetStmt() const {
    return body_type() == Halide::Serialize::Stmt::LetStmt ? static_cast<const Halide::Serialize::LetStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::AssertStmt *body_as_AssertStmt() const {
    return body_type() == Halide::Serialize::Stmt::AssertStmt ? static_cast<const Halide::Serialize::AssertStmt *>(body()) : nullptr;
  }
  const Halide::Serialize::ProducerConsumer *body_as_ProducerConsumer() const {
    return body_type() == Halide::Serialize::Stmt::ProducerConsumer ? static_cast<const Halide::Serialize::ProducerConsumer *>(body()) : nullptr;
  }
  const Halide::Serialize::For *body_as_For() const {
    return body_type() == Halide::Serialize::Stmt::For ? static_cast<const Halide::Serialize::For *>(body()) : nullptr;
  }
  const Halide::Serialize::Store *body_as_Store() const {
    return body_type() == Halide::Serialize::Stmt::Store ? static_cast<const Halide::Serialize::Store *>(body()) : nullptr;
  }
  const Halide::Serialize::Provide *body_as_Provide() const {
    return body_type() == Halide::Serialize::Stmt::Provide ? static_cast<const Halide::Serialize::Provide *>(body()) : nullptr;
  }
  const Halide::Serialize::Allocate *body_as_Allocate() const {
    return body_type() == Halide::Serialize::Stmt::Allocate ? static_cast<const Halide::Serialize::Allocate *>(body()) : nullptr;
  }
  const Halide::Serialize::Free *body_as_Free() const {
    return body_type() == Halide::Serialize::Stmt::Free ? static_cast<const Halide::Serialize::Free *>(body()) : nullptr;
  }
  const Halide::Serialize::Realize *body_as_Realize() const {
    return body_type() == Halide::Serialize::Stmt::Realize ? static_cast<const Halide::Serialize::Realize *>(body()) : nullptr;
  }
  const Halide::Serialize::Block *body_as_Block() const {
    return body_type() == Halide::Serialize::Stmt::Block ? static_cast<const Halide::Serialize::Block *>(body()) : nullptr;
  }
  const Halide::Serialize::IfThenElse *body_as_IfThenElse() const {
    return body_type() == Halide::Serialize::Stmt::IfThenElse ? static_cast<const Halide::Serialize::IfThenElse *>(body()) : nullptr;
  }
  const Halide::Serialize::Evaluate *body_as_Evaluate() const {
    return body_type() == Halide::Serialize::Stmt::Evaluate ? static_cast<const Halide::Serialize::Evaluate *>(body()) : nullptr;
  }
  const Halide::Serialize::Prefetch *body_as_Prefetch() const {
    return body_type() == Halide::Serialize::Stmt::Prefetch ? static_cast<const Halide::Serialize::Prefetch *>(body()) : nullptr;
  }
  const Halide::Serialize::Acquire *body_as_Acquire() const {
    return body_type() == Halide::Serialize::Stmt::Acquire ? static_cast<const Halide::Serialize::Acquire *>(body()) : nullptr;
  }
  const Halide::Serialize::Fork *body_as_Fork() const {
    return body_type() == Halide::Serialize::Stmt::Fork ? static_cast<const Halide::Serialize::Fork *>(body()) : nullptr;
  }
  const Halide::Serialize::Atomic *body_as_Atomic() const {
    return body_type() == Halide::Serialize::Stmt::Atomic ? static_cast<const Halide::Serialize::Atomic *>(body()) : nullptr;
  }
  const Halide::Serialize::HoistedStorage *body_as_HoistedStorage() const {
    return body_type() == Halide::Serialize::Stmt::HoistedStorage ? static_cast<const Halide::Serialize::HoistedStorage *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedStmt *body_as_UndefinedStmt() const {
    return body_type() == Halide::Serialize::Stmt::UndefinedStmt ? static_cast<const Halide::Serialize::UndefinedStmt *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyStmt(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::LetStmt *HoistedStorage::body_as<Halide::Serialize::LetStmt>() const {
  return body_as_LetStmt();
}

template<> inline const Halide::Serialize::AssertStmt *HoistedStorage::body_as<Halide::Serialize::AssertStmt>() const {
  return body_as_AssertStmt();
}

template<> inline const Halide::Serialize::ProducerConsumer *HoistedStorage::body_as<Halide::Serialize::ProducerConsumer>() const {
  return body_as_ProducerConsumer();
}

template<> inline const Halide::Serialize::For *HoistedStorage::body_as<Halide::Serialize::For>() const {
  return body_as_For();
}

template<> inline const Halide::Serialize::Store *HoistedStorage::body_as<Halide::Serialize::Store>() const {
  return body_as_Store();
}

template<> inline const Halide::Serialize::Provide *HoistedStorage::body_as<Halide::Serialize::Provide>() const {
  return body_as_Provide();
}

template<> inline const Halide::Serialize::Allocate *HoistedStorage::body_as<Halide::Serialize::Allocate>() const {
  return body_as_Allocate();
}

template<> inline const Halide::Serialize::Free *HoistedStorage::body_as<Halide::Serialize::Free>() const {
  return body_as_Free();
}

template<> inline const Halide::Serialize::Realize *HoistedStorage::body_as<Halide::Serialize::Realize>() const {
  return body_as_Realize();
}

template<> inline const Halide::Serialize::Block *HoistedStorage::body_as<Halide::Serialize::Block>() const {
  return body_as_Block();
}

template<> inline const Halide::Serialize::IfThenElse *HoistedStorage::body_as<Halide::Serialize::IfThenElse>() const {
  return body_as_IfThenElse();
}

template<> inline const Halide::Serialize::Evaluate *HoistedStorage::body_as<Halide::Serialize::Evaluate>() const {
  return body_as_Evaluate();
}

template<> inline const Halide::Serialize::Prefetch *HoistedStorage::body_as<Halide::Serialize::Prefetch>() const {
  return body_as_Prefetch();
}

template<> inline const Halide::Serialize::Acquire *HoistedStorage::body_as<Halide::Serialize::Acquire>() const {
  return body_as_Acquire();
}

template<> inline const Halide::Serialize::Fork *HoistedStorage::body_as<Halide::Serialize::Fork>() const {
  return body_as_Fork();
}

template<> inline const Halide::Serialize::Atomic *HoistedStorage::body_as<Halide::Serialize::Atomic>() const {
  return body_as_Atomic();
}

template<> inline const Halide::Serialize::HoistedStorage *HoistedStorage::body_as<Halide::Serialize::HoistedStorage>() const {
  return body_as_HoistedStorage();
}

template<> inline const Halide::Serialize::UndefinedStmt *HoistedStorage::body_as<Halide::Serialize::UndefinedStmt>() const {
  return body_as_UndefinedStmt();
}

struct HoistedStorageBuilder {
  typedef HoistedStorage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(HoistedStorage::VT_NAME, name);
  }
  void add_body_type(Halide::Serialize::Stmt body_type) {
    fbb_.AddElement<uint8_t>(HoistedStorage::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(HoistedStorage::VT_BODY, body);
  }
  explicit HoistedStorageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HoistedStorage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HoistedStorage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HoistedStorage> CreateHoistedStorage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  HoistedStorageBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  return builder_.Finish();
}

struct HoistedStorage::Traits {
  using type = HoistedStorage;
  static auto constexpr Create = CreateHoistedStorage;
};

inline ::flatbuffers::Offset<HoistedStorage> CreateHoistedStorageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Stmt body_type = Halide::Serialize::Stmt::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateHoistedStorage(
      _fbb,
      name__,
      body_type,
      body);
}

struct UndefinedStmt FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UndefinedStmtBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UndefinedStmtBuilder {
  typedef UndefinedStmt Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit UndefinedStmtBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UndefinedStmt> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UndefinedStmt>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UndefinedStmt> CreateUndefinedStmt(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  UndefinedStmtBuilder builder_(_fbb);
  return builder_.Finish();
}

struct UndefinedStmt::Traits {
  using type = UndefinedStmt;
  static auto constexpr Create = CreateUndefinedStmt;
};

struct IntImm FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IntImmBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_TYPE = 6
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct IntImmBuilder {
  typedef IntImm Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(IntImm::VT_VALUE, value, 0);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(IntImm::VT_TYPE, type);
  }
  explicit IntImmBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IntImm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IntImm>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IntImm> CreateIntImm(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  IntImmBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

struct IntImm::Traits {
  using type = IntImm;
  static auto constexpr Create = CreateIntImm;
};

struct UIntImm FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UIntImmBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_TYPE = 6
  };
  uint64_t value() const {
    return GetField<uint64_t>(VT_VALUE, 0);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VALUE, 8) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct UIntImmBuilder {
  typedef UIntImm Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint64_t value) {
    fbb_.AddElement<uint64_t>(UIntImm::VT_VALUE, value, 0);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(UIntImm::VT_TYPE, type);
  }
  explicit UIntImmBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UIntImm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UIntImm>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UIntImm> CreateUIntImm(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t value = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  UIntImmBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

struct UIntImm::Traits {
  using type = UIntImm;
  static auto constexpr Create = CreateUIntImm;
};

struct FloatImm FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatImmBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_TYPE = 6
  };
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct FloatImmBuilder {
  typedef FloatImm Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(double value) {
    fbb_.AddElement<double>(FloatImm::VT_VALUE, value, 0.0);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(FloatImm::VT_TYPE, type);
  }
  explicit FloatImmBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FloatImm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloatImm>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FloatImm> CreateFloatImm(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double value = 0.0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  FloatImmBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

struct FloatImm::Traits {
  using type = FloatImm;
  static auto constexpr Create = CreateFloatImm;
};

struct StringImm FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringImmBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringImmBuilder {
  typedef StringImm Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(StringImm::VT_VALUE, value);
  }
  explicit StringImmBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringImm> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringImm>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StringImm> CreateStringImm(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringImmBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct StringImm::Traits {
  using type = StringImm;
  static auto constexpr Create = CreateStringImm;
};

inline ::flatbuffers::Offset<StringImm> CreateStringImmDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return Halide::Serialize::CreateStringImm(
      _fbb,
      value__);
}

struct Cast FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CastBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6,
    VT_TYPE = 8
  };
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Cast::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Cast::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Cast::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Cast::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Cast::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Cast::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Cast::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Cast::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Cast::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Cast::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Cast::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Cast::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Cast::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Cast::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Cast::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Cast::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Cast::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Cast::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Cast::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Cast::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Cast::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Cast::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Cast::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Cast::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Cast::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Cast::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Cast::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Cast::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Cast::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Cast::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Cast::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Cast::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

struct CastBuilder {
  typedef Cast Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Cast::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Cast::VT_VALUE, value);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Cast::VT_TYPE, type);
  }
  explicit CastBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Cast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Cast>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Cast> CreateCast(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  CastBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Cast::Traits {
  using type = Cast;
  static auto constexpr Create = CreateCast;
};

struct Reinterpret FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReinterpretBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6,
    VT_TYPE = 8
  };
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Reinterpret::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Reinterpret::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Reinterpret::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Reinterpret::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Reinterpret::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Reinterpret::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Reinterpret::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Reinterpret::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Reinterpret::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Reinterpret::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Reinterpret::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Reinterpret::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Reinterpret::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Reinterpret::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Reinterpret::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Reinterpret::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Reinterpret::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Reinterpret::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Reinterpret::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Reinterpret::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Reinterpret::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Reinterpret::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Reinterpret::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Reinterpret::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Reinterpret::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Reinterpret::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Reinterpret::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Reinterpret::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Reinterpret::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Reinterpret::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Reinterpret::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Reinterpret::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

struct ReinterpretBuilder {
  typedef Reinterpret Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Reinterpret::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Reinterpret::VT_VALUE, value);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Reinterpret::VT_TYPE, type);
  }
  explicit ReinterpretBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Reinterpret> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Reinterpret>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Reinterpret> CreateReinterpret(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  ReinterpretBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Reinterpret::Traits {
  using type = Reinterpret;
  static auto constexpr Create = CreateReinterpret;
};

struct Add FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Add::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Add::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Add::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Add::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Add::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Add::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Add::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Add::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Add::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Add::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Add::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Add::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Add::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Add::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Add::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Add::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Add::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Add::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Add::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Add::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Add::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Add::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Add::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Add::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Add::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Add::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Add::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Add::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Add::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Add::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Add::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Add::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Add::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Add::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Add::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Add::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Add::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Add::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Add::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Add::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Add::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Add::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Add::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Add::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Add::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Add::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Add::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Add::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Add::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Add::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Add::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Add::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Add::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Add::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Add::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Add::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Add::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Add::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Add::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Add::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Add::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Add::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Add::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Add::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct AddBuilder {
  typedef Add Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Add::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Add::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Add::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Add::VT_B, b);
  }
  explicit AddBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Add> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Add>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Add> CreateAdd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  AddBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Add::Traits {
  using type = Add;
  static auto constexpr Create = CreateAdd;
};

struct Sub FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Sub::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Sub::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Sub::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Sub::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Sub::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Sub::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Sub::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Sub::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Sub::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Sub::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Sub::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Sub::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Sub::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Sub::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Sub::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Sub::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Sub::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Sub::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Sub::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Sub::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Sub::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Sub::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Sub::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Sub::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Sub::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Sub::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Sub::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Sub::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Sub::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Sub::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Sub::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Sub::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Sub::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Sub::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Sub::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Sub::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Sub::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Sub::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Sub::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Sub::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Sub::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Sub::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Sub::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Sub::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Sub::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Sub::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Sub::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Sub::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Sub::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Sub::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Sub::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Sub::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Sub::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Sub::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Sub::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Sub::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Sub::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Sub::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Sub::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Sub::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Sub::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Sub::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Sub::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Sub::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct SubBuilder {
  typedef Sub Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Sub::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Sub::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Sub::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Sub::VT_B, b);
  }
  explicit SubBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sub> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sub>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sub> CreateSub(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  SubBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Sub::Traits {
  using type = Sub;
  static auto constexpr Create = CreateSub;
};

struct Mul FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MulBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Mul::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Mul::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Mul::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Mul::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Mul::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Mul::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Mul::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Mul::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Mul::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Mul::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Mul::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Mul::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Mul::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Mul::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Mul::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Mul::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Mul::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Mul::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Mul::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Mul::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Mul::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Mul::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Mul::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Mul::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Mul::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Mul::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Mul::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Mul::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Mul::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Mul::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Mul::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Mul::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Mul::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Mul::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Mul::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Mul::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Mul::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Mul::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Mul::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Mul::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Mul::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Mul::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Mul::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Mul::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Mul::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Mul::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Mul::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Mul::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Mul::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Mul::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Mul::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Mul::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Mul::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Mul::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Mul::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Mul::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Mul::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Mul::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Mul::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Mul::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Mul::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Mul::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Mul::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Mul::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct MulBuilder {
  typedef Mul Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Mul::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Mul::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Mul::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Mul::VT_B, b);
  }
  explicit MulBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mul> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mul>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mul> CreateMul(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  MulBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Mul::Traits {
  using type = Mul;
  static auto constexpr Create = CreateMul;
};

struct Div FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DivBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Div::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Div::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Div::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Div::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Div::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Div::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Div::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Div::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Div::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Div::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Div::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Div::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Div::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Div::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Div::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Div::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Div::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Div::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Div::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Div::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Div::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Div::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Div::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Div::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Div::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Div::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Div::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Div::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Div::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Div::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Div::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Div::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Div::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Div::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Div::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Div::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Div::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Div::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Div::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Div::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Div::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Div::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Div::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Div::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Div::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Div::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Div::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Div::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Div::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Div::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Div::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Div::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Div::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Div::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Div::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Div::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Div::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Div::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Div::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Div::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Div::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Div::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Div::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Div::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct DivBuilder {
  typedef Div Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Div::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Div::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Div::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Div::VT_B, b);
  }
  explicit DivBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Div> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Div>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Div> CreateDiv(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  DivBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Div::Traits {
  using type = Div;
  static auto constexpr Create = CreateDiv;
};

struct Mod FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ModBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Mod::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Mod::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Mod::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Mod::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Mod::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Mod::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Mod::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Mod::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Mod::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Mod::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Mod::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Mod::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Mod::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Mod::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Mod::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Mod::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Mod::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Mod::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Mod::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Mod::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Mod::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Mod::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Mod::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Mod::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Mod::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Mod::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Mod::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Mod::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Mod::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Mod::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Mod::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Mod::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Mod::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Mod::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Mod::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Mod::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Mod::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Mod::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Mod::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Mod::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Mod::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Mod::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Mod::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Mod::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Mod::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Mod::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Mod::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Mod::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Mod::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Mod::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Mod::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Mod::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Mod::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Mod::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Mod::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Mod::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Mod::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Mod::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Mod::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Mod::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Mod::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Mod::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Mod::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Mod::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct ModBuilder {
  typedef Mod Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Mod::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Mod::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Mod::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Mod::VT_B, b);
  }
  explicit ModBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mod> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mod>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mod> CreateMod(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  ModBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Mod::Traits {
  using type = Mod;
  static auto constexpr Create = CreateMod;
};

struct Min FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MinBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Min::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Min::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Min::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Min::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Min::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Min::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Min::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Min::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Min::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Min::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Min::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Min::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Min::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Min::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Min::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Min::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Min::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Min::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Min::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Min::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Min::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Min::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Min::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Min::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Min::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Min::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Min::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Min::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Min::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Min::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Min::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Min::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Min::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Min::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Min::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Min::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Min::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Min::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Min::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Min::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Min::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Min::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Min::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Min::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Min::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Min::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Min::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Min::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Min::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Min::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Min::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Min::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Min::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Min::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Min::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Min::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Min::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Min::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Min::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Min::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Min::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Min::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Min::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Min::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct MinBuilder {
  typedef Min Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Min::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Min::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Min::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Min::VT_B, b);
  }
  explicit MinBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Min> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Min>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Min> CreateMin(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  MinBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Min::Traits {
  using type = Min;
  static auto constexpr Create = CreateMin;
};

struct Max FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaxBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Max::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Max::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Max::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Max::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Max::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Max::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Max::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Max::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Max::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Max::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Max::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Max::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Max::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Max::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Max::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Max::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Max::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Max::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Max::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Max::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Max::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Max::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Max::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Max::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Max::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Max::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Max::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Max::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Max::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Max::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Max::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Max::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Max::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Max::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Max::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Max::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Max::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Max::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Max::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Max::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Max::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Max::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Max::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Max::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Max::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Max::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Max::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Max::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Max::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Max::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Max::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Max::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Max::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Max::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Max::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Max::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Max::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Max::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Max::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Max::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Max::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Max::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Max::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Max::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct MaxBuilder {
  typedef Max Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Max::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Max::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Max::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Max::VT_B, b);
  }
  explicit MaxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Max> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Max>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Max> CreateMax(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  MaxBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Max::Traits {
  using type = Max;
  static auto constexpr Create = CreateMax;
};

struct EQ FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EQBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *EQ::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *EQ::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *EQ::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *EQ::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *EQ::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *EQ::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *EQ::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *EQ::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *EQ::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *EQ::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *EQ::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *EQ::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *EQ::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *EQ::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *EQ::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *EQ::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *EQ::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *EQ::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *EQ::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *EQ::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *EQ::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *EQ::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *EQ::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *EQ::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *EQ::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *EQ::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *EQ::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *EQ::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *EQ::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *EQ::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *EQ::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *EQ::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *EQ::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *EQ::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *EQ::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *EQ::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *EQ::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *EQ::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *EQ::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *EQ::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *EQ::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *EQ::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *EQ::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *EQ::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *EQ::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *EQ::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *EQ::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *EQ::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *EQ::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *EQ::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *EQ::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *EQ::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *EQ::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *EQ::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *EQ::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *EQ::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *EQ::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *EQ::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *EQ::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *EQ::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *EQ::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *EQ::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *EQ::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *EQ::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct EQBuilder {
  typedef EQ Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(EQ::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(EQ::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(EQ::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(EQ::VT_B, b);
  }
  explicit EQBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EQ>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EQ> CreateEQ(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  EQBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct EQ::Traits {
  using type = EQ;
  static auto constexpr Create = CreateEQ;
};

struct NE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NEBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *NE::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *NE::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *NE::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *NE::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *NE::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *NE::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *NE::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *NE::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *NE::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *NE::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *NE::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *NE::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *NE::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *NE::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *NE::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *NE::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *NE::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *NE::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *NE::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *NE::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *NE::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *NE::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *NE::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *NE::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *NE::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *NE::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *NE::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *NE::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *NE::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *NE::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *NE::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *NE::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *NE::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *NE::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *NE::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *NE::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *NE::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *NE::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *NE::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *NE::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *NE::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *NE::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *NE::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *NE::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *NE::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *NE::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *NE::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *NE::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *NE::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *NE::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *NE::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *NE::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *NE::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *NE::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *NE::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *NE::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *NE::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *NE::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *NE::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *NE::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *NE::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *NE::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *NE::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *NE::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct NEBuilder {
  typedef NE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(NE::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(NE::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(NE::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(NE::VT_B, b);
  }
  explicit NEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NE> CreateNE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  NEBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct NE::Traits {
  using type = NE;
  static auto constexpr Create = CreateNE;
};

struct LT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LTBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *LT::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *LT::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *LT::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *LT::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *LT::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *LT::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *LT::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *LT::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *LT::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *LT::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *LT::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *LT::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *LT::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *LT::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *LT::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *LT::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *LT::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *LT::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *LT::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *LT::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *LT::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *LT::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *LT::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *LT::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *LT::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *LT::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *LT::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *LT::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *LT::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *LT::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *LT::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *LT::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *LT::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *LT::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *LT::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *LT::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *LT::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *LT::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *LT::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *LT::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *LT::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *LT::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *LT::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *LT::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *LT::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *LT::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *LT::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *LT::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *LT::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *LT::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *LT::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *LT::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *LT::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *LT::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *LT::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *LT::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *LT::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *LT::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *LT::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *LT::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *LT::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *LT::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *LT::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *LT::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct LTBuilder {
  typedef LT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(LT::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(LT::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(LT::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(LT::VT_B, b);
  }
  explicit LTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LT> CreateLT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  LTBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct LT::Traits {
  using type = LT;
  static auto constexpr Create = CreateLT;
};

struct LE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LEBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *LE::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *LE::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *LE::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *LE::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *LE::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *LE::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *LE::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *LE::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *LE::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *LE::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *LE::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *LE::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *LE::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *LE::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *LE::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *LE::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *LE::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *LE::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *LE::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *LE::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *LE::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *LE::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *LE::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *LE::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *LE::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *LE::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *LE::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *LE::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *LE::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *LE::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *LE::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *LE::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *LE::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *LE::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *LE::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *LE::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *LE::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *LE::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *LE::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *LE::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *LE::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *LE::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *LE::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *LE::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *LE::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *LE::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *LE::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *LE::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *LE::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *LE::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *LE::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *LE::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *LE::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *LE::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *LE::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *LE::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *LE::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *LE::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *LE::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *LE::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *LE::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *LE::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *LE::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *LE::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct LEBuilder {
  typedef LE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(LE::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(LE::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(LE::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(LE::VT_B, b);
  }
  explicit LEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LE> CreateLE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  LEBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct LE::Traits {
  using type = LE;
  static auto constexpr Create = CreateLE;
};

struct GT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GTBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *GT::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *GT::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *GT::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *GT::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *GT::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *GT::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *GT::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *GT::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *GT::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *GT::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *GT::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *GT::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *GT::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *GT::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *GT::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *GT::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *GT::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *GT::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *GT::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *GT::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *GT::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *GT::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *GT::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *GT::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *GT::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *GT::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *GT::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *GT::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *GT::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *GT::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *GT::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *GT::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *GT::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *GT::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *GT::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *GT::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *GT::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *GT::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *GT::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *GT::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *GT::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *GT::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *GT::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *GT::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *GT::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *GT::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *GT::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *GT::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *GT::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *GT::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *GT::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *GT::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *GT::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *GT::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *GT::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *GT::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *GT::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *GT::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *GT::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *GT::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *GT::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *GT::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *GT::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *GT::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct GTBuilder {
  typedef GT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(GT::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(GT::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(GT::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(GT::VT_B, b);
  }
  explicit GTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GT> CreateGT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  GTBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct GT::Traits {
  using type = GT;
  static auto constexpr Create = CreateGT;
};

struct GE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GEBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *GE::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *GE::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *GE::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *GE::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *GE::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *GE::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *GE::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *GE::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *GE::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *GE::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *GE::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *GE::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *GE::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *GE::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *GE::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *GE::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *GE::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *GE::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *GE::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *GE::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *GE::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *GE::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *GE::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *GE::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *GE::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *GE::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *GE::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *GE::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *GE::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *GE::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *GE::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *GE::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *GE::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *GE::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *GE::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *GE::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *GE::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *GE::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *GE::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *GE::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *GE::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *GE::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *GE::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *GE::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *GE::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *GE::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *GE::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *GE::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *GE::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *GE::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *GE::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *GE::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *GE::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *GE::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *GE::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *GE::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *GE::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *GE::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *GE::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *GE::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *GE::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *GE::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *GE::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *GE::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct GEBuilder {
  typedef GE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(GE::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(GE::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(GE::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(GE::VT_B, b);
  }
  explicit GEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GE> CreateGE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  GEBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct GE::Traits {
  using type = GE;
  static auto constexpr Create = CreateGE;
};

struct And FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AndBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *And::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *And::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *And::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *And::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *And::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *And::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *And::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *And::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *And::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *And::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *And::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *And::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *And::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *And::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *And::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *And::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *And::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *And::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *And::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *And::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *And::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *And::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *And::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *And::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *And::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *And::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *And::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *And::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *And::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *And::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *And::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *And::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *And::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *And::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *And::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *And::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *And::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *And::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *And::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *And::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *And::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *And::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *And::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *And::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *And::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *And::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *And::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *And::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *And::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *And::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *And::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *And::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *And::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *And::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *And::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *And::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *And::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *And::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *And::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *And::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *And::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *And::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *And::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *And::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct AndBuilder {
  typedef And Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(And::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(And::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(And::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(And::VT_B, b);
  }
  explicit AndBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<And> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<And>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<And> CreateAnd(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  AndBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct And::Traits {
  using type = And;
  static auto constexpr Create = CreateAnd;
};

struct Or FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6,
    VT_B_TYPE = 8,
    VT_B = 10
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  Halide::Serialize::Expr b_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_B_TYPE, 0));
  }
  const void *b() const {
    return GetPointer<const void *>(VT_B);
  }
  template<typename T> const T *b_as() const;
  const Halide::Serialize::IntImm *b_as_IntImm() const {
    return b_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::UIntImm *b_as_UIntImm() const {
    return b_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(b()) : nullptr;
  }
  const Halide::Serialize::FloatImm *b_as_FloatImm() const {
    return b_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(b()) : nullptr;
  }
  const Halide::Serialize::StringImm *b_as_StringImm() const {
    return b_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(b()) : nullptr;
  }
  const Halide::Serialize::Cast *b_as_Cast() const {
    return b_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(b()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *b_as_Reinterpret() const {
    return b_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(b()) : nullptr;
  }
  const Halide::Serialize::Add *b_as_Add() const {
    return b_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(b()) : nullptr;
  }
  const Halide::Serialize::Sub *b_as_Sub() const {
    return b_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(b()) : nullptr;
  }
  const Halide::Serialize::Mul *b_as_Mul() const {
    return b_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(b()) : nullptr;
  }
  const Halide::Serialize::Div *b_as_Div() const {
    return b_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(b()) : nullptr;
  }
  const Halide::Serialize::Mod *b_as_Mod() const {
    return b_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(b()) : nullptr;
  }
  const Halide::Serialize::Min *b_as_Min() const {
    return b_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(b()) : nullptr;
  }
  const Halide::Serialize::Max *b_as_Max() const {
    return b_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(b()) : nullptr;
  }
  const Halide::Serialize::EQ *b_as_EQ() const {
    return b_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(b()) : nullptr;
  }
  const Halide::Serialize::NE *b_as_NE() const {
    return b_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(b()) : nullptr;
  }
  const Halide::Serialize::LT *b_as_LT() const {
    return b_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(b()) : nullptr;
  }
  const Halide::Serialize::LE *b_as_LE() const {
    return b_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(b()) : nullptr;
  }
  const Halide::Serialize::GT *b_as_GT() const {
    return b_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(b()) : nullptr;
  }
  const Halide::Serialize::GE *b_as_GE() const {
    return b_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(b()) : nullptr;
  }
  const Halide::Serialize::And *b_as_And() const {
    return b_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(b()) : nullptr;
  }
  const Halide::Serialize::Or *b_as_Or() const {
    return b_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(b()) : nullptr;
  }
  const Halide::Serialize::Not *b_as_Not() const {
    return b_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(b()) : nullptr;
  }
  const Halide::Serialize::Select *b_as_Select() const {
    return b_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(b()) : nullptr;
  }
  const Halide::Serialize::Load *b_as_Load() const {
    return b_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(b()) : nullptr;
  }
  const Halide::Serialize::Ramp *b_as_Ramp() const {
    return b_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(b()) : nullptr;
  }
  const Halide::Serialize::Broadcast *b_as_Broadcast() const {
    return b_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(b()) : nullptr;
  }
  const Halide::Serialize::Let *b_as_Let() const {
    return b_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(b()) : nullptr;
  }
  const Halide::Serialize::Call *b_as_Call() const {
    return b_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(b()) : nullptr;
  }
  const Halide::Serialize::Variable *b_as_Variable() const {
    return b_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(b()) : nullptr;
  }
  const Halide::Serialize::Shuffle *b_as_Shuffle() const {
    return b_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(b()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *b_as_VectorReduce() const {
    return b_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(b()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *b_as_UndefinedExpr() const {
    return b_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(b()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           VerifyField<uint8_t>(verifier, VT_B_TYPE, 1) &&
           VerifyOffset(verifier, VT_B) &&
           VerifyExpr(verifier, b(), b_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Or::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Or::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Or::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Or::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Or::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Or::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Or::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Or::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Or::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Or::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Or::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Or::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Or::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Or::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Or::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Or::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Or::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Or::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Or::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Or::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Or::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Or::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Or::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Or::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Or::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Or::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Or::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Or::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Or::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Or::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Or::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Or::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Or::b_as<Halide::Serialize::IntImm>() const {
  return b_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Or::b_as<Halide::Serialize::UIntImm>() const {
  return b_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Or::b_as<Halide::Serialize::FloatImm>() const {
  return b_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Or::b_as<Halide::Serialize::StringImm>() const {
  return b_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Or::b_as<Halide::Serialize::Cast>() const {
  return b_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Or::b_as<Halide::Serialize::Reinterpret>() const {
  return b_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Or::b_as<Halide::Serialize::Add>() const {
  return b_as_Add();
}

template<> inline const Halide::Serialize::Sub *Or::b_as<Halide::Serialize::Sub>() const {
  return b_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Or::b_as<Halide::Serialize::Mul>() const {
  return b_as_Mul();
}

template<> inline const Halide::Serialize::Div *Or::b_as<Halide::Serialize::Div>() const {
  return b_as_Div();
}

template<> inline const Halide::Serialize::Mod *Or::b_as<Halide::Serialize::Mod>() const {
  return b_as_Mod();
}

template<> inline const Halide::Serialize::Min *Or::b_as<Halide::Serialize::Min>() const {
  return b_as_Min();
}

template<> inline const Halide::Serialize::Max *Or::b_as<Halide::Serialize::Max>() const {
  return b_as_Max();
}

template<> inline const Halide::Serialize::EQ *Or::b_as<Halide::Serialize::EQ>() const {
  return b_as_EQ();
}

template<> inline const Halide::Serialize::NE *Or::b_as<Halide::Serialize::NE>() const {
  return b_as_NE();
}

template<> inline const Halide::Serialize::LT *Or::b_as<Halide::Serialize::LT>() const {
  return b_as_LT();
}

template<> inline const Halide::Serialize::LE *Or::b_as<Halide::Serialize::LE>() const {
  return b_as_LE();
}

template<> inline const Halide::Serialize::GT *Or::b_as<Halide::Serialize::GT>() const {
  return b_as_GT();
}

template<> inline const Halide::Serialize::GE *Or::b_as<Halide::Serialize::GE>() const {
  return b_as_GE();
}

template<> inline const Halide::Serialize::And *Or::b_as<Halide::Serialize::And>() const {
  return b_as_And();
}

template<> inline const Halide::Serialize::Or *Or::b_as<Halide::Serialize::Or>() const {
  return b_as_Or();
}

template<> inline const Halide::Serialize::Not *Or::b_as<Halide::Serialize::Not>() const {
  return b_as_Not();
}

template<> inline const Halide::Serialize::Select *Or::b_as<Halide::Serialize::Select>() const {
  return b_as_Select();
}

template<> inline const Halide::Serialize::Load *Or::b_as<Halide::Serialize::Load>() const {
  return b_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Or::b_as<Halide::Serialize::Ramp>() const {
  return b_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Or::b_as<Halide::Serialize::Broadcast>() const {
  return b_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Or::b_as<Halide::Serialize::Let>() const {
  return b_as_Let();
}

template<> inline const Halide::Serialize::Call *Or::b_as<Halide::Serialize::Call>() const {
  return b_as_Call();
}

template<> inline const Halide::Serialize::Variable *Or::b_as<Halide::Serialize::Variable>() const {
  return b_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Or::b_as<Halide::Serialize::Shuffle>() const {
  return b_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Or::b_as<Halide::Serialize::VectorReduce>() const {
  return b_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Or::b_as<Halide::Serialize::UndefinedExpr>() const {
  return b_as_UndefinedExpr();
}

struct OrBuilder {
  typedef Or Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Or::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Or::VT_A, a);
  }
  void add_b_type(Halide::Serialize::Expr b_type) {
    fbb_.AddElement<uint8_t>(Or::VT_B_TYPE, static_cast<uint8_t>(b_type), 0);
  }
  void add_b(::flatbuffers::Offset<void> b) {
    fbb_.AddOffset(Or::VT_B, b);
  }
  explicit OrBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Or> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Or>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Or> CreateOr(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0,
    Halide::Serialize::Expr b_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> b = 0) {
  OrBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_b_type(b_type);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Or::Traits {
  using type = Or;
  static auto constexpr Create = CreateOr;
};

struct Not FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NotBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A_TYPE = 4,
    VT_A = 6
  };
  Halide::Serialize::Expr a_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_A_TYPE, 0));
  }
  const void *a() const {
    return GetPointer<const void *>(VT_A);
  }
  template<typename T> const T *a_as() const;
  const Halide::Serialize::IntImm *a_as_IntImm() const {
    return a_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::UIntImm *a_as_UIntImm() const {
    return a_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(a()) : nullptr;
  }
  const Halide::Serialize::FloatImm *a_as_FloatImm() const {
    return a_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(a()) : nullptr;
  }
  const Halide::Serialize::StringImm *a_as_StringImm() const {
    return a_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(a()) : nullptr;
  }
  const Halide::Serialize::Cast *a_as_Cast() const {
    return a_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(a()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *a_as_Reinterpret() const {
    return a_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(a()) : nullptr;
  }
  const Halide::Serialize::Add *a_as_Add() const {
    return a_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(a()) : nullptr;
  }
  const Halide::Serialize::Sub *a_as_Sub() const {
    return a_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(a()) : nullptr;
  }
  const Halide::Serialize::Mul *a_as_Mul() const {
    return a_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(a()) : nullptr;
  }
  const Halide::Serialize::Div *a_as_Div() const {
    return a_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(a()) : nullptr;
  }
  const Halide::Serialize::Mod *a_as_Mod() const {
    return a_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(a()) : nullptr;
  }
  const Halide::Serialize::Min *a_as_Min() const {
    return a_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(a()) : nullptr;
  }
  const Halide::Serialize::Max *a_as_Max() const {
    return a_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(a()) : nullptr;
  }
  const Halide::Serialize::EQ *a_as_EQ() const {
    return a_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(a()) : nullptr;
  }
  const Halide::Serialize::NE *a_as_NE() const {
    return a_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(a()) : nullptr;
  }
  const Halide::Serialize::LT *a_as_LT() const {
    return a_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(a()) : nullptr;
  }
  const Halide::Serialize::LE *a_as_LE() const {
    return a_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(a()) : nullptr;
  }
  const Halide::Serialize::GT *a_as_GT() const {
    return a_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(a()) : nullptr;
  }
  const Halide::Serialize::GE *a_as_GE() const {
    return a_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(a()) : nullptr;
  }
  const Halide::Serialize::And *a_as_And() const {
    return a_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(a()) : nullptr;
  }
  const Halide::Serialize::Or *a_as_Or() const {
    return a_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(a()) : nullptr;
  }
  const Halide::Serialize::Not *a_as_Not() const {
    return a_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(a()) : nullptr;
  }
  const Halide::Serialize::Select *a_as_Select() const {
    return a_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(a()) : nullptr;
  }
  const Halide::Serialize::Load *a_as_Load() const {
    return a_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(a()) : nullptr;
  }
  const Halide::Serialize::Ramp *a_as_Ramp() const {
    return a_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(a()) : nullptr;
  }
  const Halide::Serialize::Broadcast *a_as_Broadcast() const {
    return a_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(a()) : nullptr;
  }
  const Halide::Serialize::Let *a_as_Let() const {
    return a_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(a()) : nullptr;
  }
  const Halide::Serialize::Call *a_as_Call() const {
    return a_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(a()) : nullptr;
  }
  const Halide::Serialize::Variable *a_as_Variable() const {
    return a_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(a()) : nullptr;
  }
  const Halide::Serialize::Shuffle *a_as_Shuffle() const {
    return a_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(a()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *a_as_VectorReduce() const {
    return a_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(a()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *a_as_UndefinedExpr() const {
    return a_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(a()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_A_TYPE, 1) &&
           VerifyOffset(verifier, VT_A) &&
           VerifyExpr(verifier, a(), a_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Not::a_as<Halide::Serialize::IntImm>() const {
  return a_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Not::a_as<Halide::Serialize::UIntImm>() const {
  return a_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Not::a_as<Halide::Serialize::FloatImm>() const {
  return a_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Not::a_as<Halide::Serialize::StringImm>() const {
  return a_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Not::a_as<Halide::Serialize::Cast>() const {
  return a_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Not::a_as<Halide::Serialize::Reinterpret>() const {
  return a_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Not::a_as<Halide::Serialize::Add>() const {
  return a_as_Add();
}

template<> inline const Halide::Serialize::Sub *Not::a_as<Halide::Serialize::Sub>() const {
  return a_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Not::a_as<Halide::Serialize::Mul>() const {
  return a_as_Mul();
}

template<> inline const Halide::Serialize::Div *Not::a_as<Halide::Serialize::Div>() const {
  return a_as_Div();
}

template<> inline const Halide::Serialize::Mod *Not::a_as<Halide::Serialize::Mod>() const {
  return a_as_Mod();
}

template<> inline const Halide::Serialize::Min *Not::a_as<Halide::Serialize::Min>() const {
  return a_as_Min();
}

template<> inline const Halide::Serialize::Max *Not::a_as<Halide::Serialize::Max>() const {
  return a_as_Max();
}

template<> inline const Halide::Serialize::EQ *Not::a_as<Halide::Serialize::EQ>() const {
  return a_as_EQ();
}

template<> inline const Halide::Serialize::NE *Not::a_as<Halide::Serialize::NE>() const {
  return a_as_NE();
}

template<> inline const Halide::Serialize::LT *Not::a_as<Halide::Serialize::LT>() const {
  return a_as_LT();
}

template<> inline const Halide::Serialize::LE *Not::a_as<Halide::Serialize::LE>() const {
  return a_as_LE();
}

template<> inline const Halide::Serialize::GT *Not::a_as<Halide::Serialize::GT>() const {
  return a_as_GT();
}

template<> inline const Halide::Serialize::GE *Not::a_as<Halide::Serialize::GE>() const {
  return a_as_GE();
}

template<> inline const Halide::Serialize::And *Not::a_as<Halide::Serialize::And>() const {
  return a_as_And();
}

template<> inline const Halide::Serialize::Or *Not::a_as<Halide::Serialize::Or>() const {
  return a_as_Or();
}

template<> inline const Halide::Serialize::Not *Not::a_as<Halide::Serialize::Not>() const {
  return a_as_Not();
}

template<> inline const Halide::Serialize::Select *Not::a_as<Halide::Serialize::Select>() const {
  return a_as_Select();
}

template<> inline const Halide::Serialize::Load *Not::a_as<Halide::Serialize::Load>() const {
  return a_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Not::a_as<Halide::Serialize::Ramp>() const {
  return a_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Not::a_as<Halide::Serialize::Broadcast>() const {
  return a_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Not::a_as<Halide::Serialize::Let>() const {
  return a_as_Let();
}

template<> inline const Halide::Serialize::Call *Not::a_as<Halide::Serialize::Call>() const {
  return a_as_Call();
}

template<> inline const Halide::Serialize::Variable *Not::a_as<Halide::Serialize::Variable>() const {
  return a_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Not::a_as<Halide::Serialize::Shuffle>() const {
  return a_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Not::a_as<Halide::Serialize::VectorReduce>() const {
  return a_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Not::a_as<Halide::Serialize::UndefinedExpr>() const {
  return a_as_UndefinedExpr();
}

struct NotBuilder {
  typedef Not Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_a_type(Halide::Serialize::Expr a_type) {
    fbb_.AddElement<uint8_t>(Not::VT_A_TYPE, static_cast<uint8_t>(a_type), 0);
  }
  void add_a(::flatbuffers::Offset<void> a) {
    fbb_.AddOffset(Not::VT_A, a);
  }
  explicit NotBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Not> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Not>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Not> CreateNot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr a_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> a = 0) {
  NotBuilder builder_(_fbb);
  builder_.add_a(a);
  builder_.add_a_type(a_type);
  return builder_.Finish();
}

struct Not::Traits {
  using type = Not;
  static auto constexpr Create = CreateNot;
};

struct Select FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SelectBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONDITION_TYPE = 4,
    VT_CONDITION = 6,
    VT_TRUE_VALUE_TYPE = 8,
    VT_TRUE_VALUE = 10,
    VT_FALSE_VALUE_TYPE = 12,
    VT_FALSE_VALUE = 14
  };
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  Halide::Serialize::Expr true_value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_TRUE_VALUE_TYPE, 0));
  }
  const void *true_value() const {
    return GetPointer<const void *>(VT_TRUE_VALUE);
  }
  template<typename T> const T *true_value_as() const;
  const Halide::Serialize::IntImm *true_value_as_IntImm() const {
    return true_value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(true_value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *true_value_as_UIntImm() const {
    return true_value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(true_value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *true_value_as_FloatImm() const {
    return true_value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(true_value()) : nullptr;
  }
  const Halide::Serialize::StringImm *true_value_as_StringImm() const {
    return true_value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Cast *true_value_as_Cast() const {
    return true_value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *true_value_as_Reinterpret() const {
    return true_value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Add *true_value_as_Add() const {
    return true_value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Sub *true_value_as_Sub() const {
    return true_value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Mul *true_value_as_Mul() const {
    return true_value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Div *true_value_as_Div() const {
    return true_value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Mod *true_value_as_Mod() const {
    return true_value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Min *true_value_as_Min() const {
    return true_value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Max *true_value_as_Max() const {
    return true_value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(true_value()) : nullptr;
  }
  const Halide::Serialize::EQ *true_value_as_EQ() const {
    return true_value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(true_value()) : nullptr;
  }
  const Halide::Serialize::NE *true_value_as_NE() const {
    return true_value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(true_value()) : nullptr;
  }
  const Halide::Serialize::LT *true_value_as_LT() const {
    return true_value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(true_value()) : nullptr;
  }
  const Halide::Serialize::LE *true_value_as_LE() const {
    return true_value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(true_value()) : nullptr;
  }
  const Halide::Serialize::GT *true_value_as_GT() const {
    return true_value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(true_value()) : nullptr;
  }
  const Halide::Serialize::GE *true_value_as_GE() const {
    return true_value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(true_value()) : nullptr;
  }
  const Halide::Serialize::And *true_value_as_And() const {
    return true_value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Or *true_value_as_Or() const {
    return true_value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Not *true_value_as_Not() const {
    return true_value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Select *true_value_as_Select() const {
    return true_value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Load *true_value_as_Load() const {
    return true_value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Ramp *true_value_as_Ramp() const {
    return true_value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *true_value_as_Broadcast() const {
    return true_value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Let *true_value_as_Let() const {
    return true_value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Call *true_value_as_Call() const {
    return true_value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Variable *true_value_as_Variable() const {
    return true_value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(true_value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *true_value_as_Shuffle() const {
    return true_value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(true_value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *true_value_as_VectorReduce() const {
    return true_value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(true_value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *true_value_as_UndefinedExpr() const {
    return true_value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(true_value()) : nullptr;
  }
  Halide::Serialize::Expr false_value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_FALSE_VALUE_TYPE, 0));
  }
  const void *false_value() const {
    return GetPointer<const void *>(VT_FALSE_VALUE);
  }
  template<typename T> const T *false_value_as() const;
  const Halide::Serialize::IntImm *false_value_as_IntImm() const {
    return false_value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(false_value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *false_value_as_UIntImm() const {
    return false_value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(false_value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *false_value_as_FloatImm() const {
    return false_value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(false_value()) : nullptr;
  }
  const Halide::Serialize::StringImm *false_value_as_StringImm() const {
    return false_value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Cast *false_value_as_Cast() const {
    return false_value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *false_value_as_Reinterpret() const {
    return false_value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Add *false_value_as_Add() const {
    return false_value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Sub *false_value_as_Sub() const {
    return false_value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Mul *false_value_as_Mul() const {
    return false_value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Div *false_value_as_Div() const {
    return false_value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Mod *false_value_as_Mod() const {
    return false_value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Min *false_value_as_Min() const {
    return false_value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Max *false_value_as_Max() const {
    return false_value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(false_value()) : nullptr;
  }
  const Halide::Serialize::EQ *false_value_as_EQ() const {
    return false_value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(false_value()) : nullptr;
  }
  const Halide::Serialize::NE *false_value_as_NE() const {
    return false_value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(false_value()) : nullptr;
  }
  const Halide::Serialize::LT *false_value_as_LT() const {
    return false_value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(false_value()) : nullptr;
  }
  const Halide::Serialize::LE *false_value_as_LE() const {
    return false_value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(false_value()) : nullptr;
  }
  const Halide::Serialize::GT *false_value_as_GT() const {
    return false_value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(false_value()) : nullptr;
  }
  const Halide::Serialize::GE *false_value_as_GE() const {
    return false_value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(false_value()) : nullptr;
  }
  const Halide::Serialize::And *false_value_as_And() const {
    return false_value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Or *false_value_as_Or() const {
    return false_value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Not *false_value_as_Not() const {
    return false_value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Select *false_value_as_Select() const {
    return false_value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Load *false_value_as_Load() const {
    return false_value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Ramp *false_value_as_Ramp() const {
    return false_value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *false_value_as_Broadcast() const {
    return false_value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Let *false_value_as_Let() const {
    return false_value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Call *false_value_as_Call() const {
    return false_value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Variable *false_value_as_Variable() const {
    return false_value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(false_value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *false_value_as_Shuffle() const {
    return false_value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(false_value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *false_value_as_VectorReduce() const {
    return false_value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(false_value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *false_value_as_UndefinedExpr() const {
    return false_value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(false_value()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyField<uint8_t>(verifier, VT_TRUE_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_TRUE_VALUE) &&
           VerifyExpr(verifier, true_value(), true_value_type()) &&
           VerifyField<uint8_t>(verifier, VT_FALSE_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_FALSE_VALUE) &&
           VerifyExpr(verifier, false_value(), false_value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Select::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Select::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Select::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Select::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Select::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Select::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Select::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *Select::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Select::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *Select::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *Select::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *Select::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *Select::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *Select::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *Select::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *Select::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *Select::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *Select::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *Select::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *Select::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *Select::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *Select::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *Select::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *Select::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Select::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Select::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Select::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *Select::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *Select::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Select::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Select::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Select::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Select::true_value_as<Halide::Serialize::IntImm>() const {
  return true_value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Select::true_value_as<Halide::Serialize::UIntImm>() const {
  return true_value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Select::true_value_as<Halide::Serialize::FloatImm>() const {
  return true_value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Select::true_value_as<Halide::Serialize::StringImm>() const {
  return true_value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Select::true_value_as<Halide::Serialize::Cast>() const {
  return true_value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Select::true_value_as<Halide::Serialize::Reinterpret>() const {
  return true_value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Select::true_value_as<Halide::Serialize::Add>() const {
  return true_value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Select::true_value_as<Halide::Serialize::Sub>() const {
  return true_value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Select::true_value_as<Halide::Serialize::Mul>() const {
  return true_value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Select::true_value_as<Halide::Serialize::Div>() const {
  return true_value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Select::true_value_as<Halide::Serialize::Mod>() const {
  return true_value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Select::true_value_as<Halide::Serialize::Min>() const {
  return true_value_as_Min();
}

template<> inline const Halide::Serialize::Max *Select::true_value_as<Halide::Serialize::Max>() const {
  return true_value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Select::true_value_as<Halide::Serialize::EQ>() const {
  return true_value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Select::true_value_as<Halide::Serialize::NE>() const {
  return true_value_as_NE();
}

template<> inline const Halide::Serialize::LT *Select::true_value_as<Halide::Serialize::LT>() const {
  return true_value_as_LT();
}

template<> inline const Halide::Serialize::LE *Select::true_value_as<Halide::Serialize::LE>() const {
  return true_value_as_LE();
}

template<> inline const Halide::Serialize::GT *Select::true_value_as<Halide::Serialize::GT>() const {
  return true_value_as_GT();
}

template<> inline const Halide::Serialize::GE *Select::true_value_as<Halide::Serialize::GE>() const {
  return true_value_as_GE();
}

template<> inline const Halide::Serialize::And *Select::true_value_as<Halide::Serialize::And>() const {
  return true_value_as_And();
}

template<> inline const Halide::Serialize::Or *Select::true_value_as<Halide::Serialize::Or>() const {
  return true_value_as_Or();
}

template<> inline const Halide::Serialize::Not *Select::true_value_as<Halide::Serialize::Not>() const {
  return true_value_as_Not();
}

template<> inline const Halide::Serialize::Select *Select::true_value_as<Halide::Serialize::Select>() const {
  return true_value_as_Select();
}

template<> inline const Halide::Serialize::Load *Select::true_value_as<Halide::Serialize::Load>() const {
  return true_value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Select::true_value_as<Halide::Serialize::Ramp>() const {
  return true_value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Select::true_value_as<Halide::Serialize::Broadcast>() const {
  return true_value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Select::true_value_as<Halide::Serialize::Let>() const {
  return true_value_as_Let();
}

template<> inline const Halide::Serialize::Call *Select::true_value_as<Halide::Serialize::Call>() const {
  return true_value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Select::true_value_as<Halide::Serialize::Variable>() const {
  return true_value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Select::true_value_as<Halide::Serialize::Shuffle>() const {
  return true_value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Select::true_value_as<Halide::Serialize::VectorReduce>() const {
  return true_value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Select::true_value_as<Halide::Serialize::UndefinedExpr>() const {
  return true_value_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Select::false_value_as<Halide::Serialize::IntImm>() const {
  return false_value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Select::false_value_as<Halide::Serialize::UIntImm>() const {
  return false_value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Select::false_value_as<Halide::Serialize::FloatImm>() const {
  return false_value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Select::false_value_as<Halide::Serialize::StringImm>() const {
  return false_value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Select::false_value_as<Halide::Serialize::Cast>() const {
  return false_value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Select::false_value_as<Halide::Serialize::Reinterpret>() const {
  return false_value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Select::false_value_as<Halide::Serialize::Add>() const {
  return false_value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Select::false_value_as<Halide::Serialize::Sub>() const {
  return false_value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Select::false_value_as<Halide::Serialize::Mul>() const {
  return false_value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Select::false_value_as<Halide::Serialize::Div>() const {
  return false_value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Select::false_value_as<Halide::Serialize::Mod>() const {
  return false_value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Select::false_value_as<Halide::Serialize::Min>() const {
  return false_value_as_Min();
}

template<> inline const Halide::Serialize::Max *Select::false_value_as<Halide::Serialize::Max>() const {
  return false_value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Select::false_value_as<Halide::Serialize::EQ>() const {
  return false_value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Select::false_value_as<Halide::Serialize::NE>() const {
  return false_value_as_NE();
}

template<> inline const Halide::Serialize::LT *Select::false_value_as<Halide::Serialize::LT>() const {
  return false_value_as_LT();
}

template<> inline const Halide::Serialize::LE *Select::false_value_as<Halide::Serialize::LE>() const {
  return false_value_as_LE();
}

template<> inline const Halide::Serialize::GT *Select::false_value_as<Halide::Serialize::GT>() const {
  return false_value_as_GT();
}

template<> inline const Halide::Serialize::GE *Select::false_value_as<Halide::Serialize::GE>() const {
  return false_value_as_GE();
}

template<> inline const Halide::Serialize::And *Select::false_value_as<Halide::Serialize::And>() const {
  return false_value_as_And();
}

template<> inline const Halide::Serialize::Or *Select::false_value_as<Halide::Serialize::Or>() const {
  return false_value_as_Or();
}

template<> inline const Halide::Serialize::Not *Select::false_value_as<Halide::Serialize::Not>() const {
  return false_value_as_Not();
}

template<> inline const Halide::Serialize::Select *Select::false_value_as<Halide::Serialize::Select>() const {
  return false_value_as_Select();
}

template<> inline const Halide::Serialize::Load *Select::false_value_as<Halide::Serialize::Load>() const {
  return false_value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Select::false_value_as<Halide::Serialize::Ramp>() const {
  return false_value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Select::false_value_as<Halide::Serialize::Broadcast>() const {
  return false_value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Select::false_value_as<Halide::Serialize::Let>() const {
  return false_value_as_Let();
}

template<> inline const Halide::Serialize::Call *Select::false_value_as<Halide::Serialize::Call>() const {
  return false_value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Select::false_value_as<Halide::Serialize::Variable>() const {
  return false_value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Select::false_value_as<Halide::Serialize::Shuffle>() const {
  return false_value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Select::false_value_as<Halide::Serialize::VectorReduce>() const {
  return false_value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Select::false_value_as<Halide::Serialize::UndefinedExpr>() const {
  return false_value_as_UndefinedExpr();
}

struct SelectBuilder {
  typedef Select Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(Select::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(Select::VT_CONDITION, condition);
  }
  void add_true_value_type(Halide::Serialize::Expr true_value_type) {
    fbb_.AddElement<uint8_t>(Select::VT_TRUE_VALUE_TYPE, static_cast<uint8_t>(true_value_type), 0);
  }
  void add_true_value(::flatbuffers::Offset<void> true_value) {
    fbb_.AddOffset(Select::VT_TRUE_VALUE, true_value);
  }
  void add_false_value_type(Halide::Serialize::Expr false_value_type) {
    fbb_.AddElement<uint8_t>(Select::VT_FALSE_VALUE_TYPE, static_cast<uint8_t>(false_value_type), 0);
  }
  void add_false_value(::flatbuffers::Offset<void> false_value) {
    fbb_.AddOffset(Select::VT_FALSE_VALUE, false_value);
  }
  explicit SelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Select> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Select>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Select> CreateSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    Halide::Serialize::Expr true_value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> true_value = 0,
    Halide::Serialize::Expr false_value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> false_value = 0) {
  SelectBuilder builder_(_fbb);
  builder_.add_false_value(false_value);
  builder_.add_true_value(true_value);
  builder_.add_condition(condition);
  builder_.add_false_value_type(false_value_type);
  builder_.add_true_value_type(true_value_type);
  builder_.add_condition_type(condition_type);
  return builder_.Finish();
}

struct Select::Traits {
  using type = Select;
  static auto constexpr Create = CreateSelect;
};

struct Load FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoadBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PREDICATE_TYPE = 6,
    VT_PREDICATE = 8,
    VT_INDEX_TYPE = 10,
    VT_INDEX = 12,
    VT_IMAGE_NAME = 14,
    VT_PARAM_NAME = 16,
    VT_ALIGNMENT = 18,
    VT_TYPE = 20
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Expr predicate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_PREDICATE_TYPE, 0));
  }
  const void *predicate() const {
    return GetPointer<const void *>(VT_PREDICATE);
  }
  template<typename T> const T *predicate_as() const;
  const Halide::Serialize::IntImm *predicate_as_IntImm() const {
    return predicate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *predicate_as_UIntImm() const {
    return predicate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *predicate_as_FloatImm() const {
    return predicate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::StringImm *predicate_as_StringImm() const {
    return predicate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Cast *predicate_as_Cast() const {
    return predicate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *predicate_as_Reinterpret() const {
    return predicate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Add *predicate_as_Add() const {
    return predicate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Sub *predicate_as_Sub() const {
    return predicate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mul *predicate_as_Mul() const {
    return predicate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Div *predicate_as_Div() const {
    return predicate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mod *predicate_as_Mod() const {
    return predicate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Min *predicate_as_Min() const {
    return predicate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Max *predicate_as_Max() const {
    return predicate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(predicate()) : nullptr;
  }
  const Halide::Serialize::EQ *predicate_as_EQ() const {
    return predicate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(predicate()) : nullptr;
  }
  const Halide::Serialize::NE *predicate_as_NE() const {
    return predicate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LT *predicate_as_LT() const {
    return predicate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LE *predicate_as_LE() const {
    return predicate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GT *predicate_as_GT() const {
    return predicate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GE *predicate_as_GE() const {
    return predicate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::And *predicate_as_And() const {
    return predicate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Or *predicate_as_Or() const {
    return predicate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Not *predicate_as_Not() const {
    return predicate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Select *predicate_as_Select() const {
    return predicate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Load *predicate_as_Load() const {
    return predicate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Ramp *predicate_as_Ramp() const {
    return predicate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *predicate_as_Broadcast() const {
    return predicate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Let *predicate_as_Let() const {
    return predicate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Call *predicate_as_Call() const {
    return predicate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Variable *predicate_as_Variable() const {
    return predicate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *predicate_as_Shuffle() const {
    return predicate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(predicate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *predicate_as_VectorReduce() const {
    return predicate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *predicate_as_UndefinedExpr() const {
    return predicate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(predicate()) : nullptr;
  }
  Halide::Serialize::Expr index_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_INDEX_TYPE, 0));
  }
  const void *index() const {
    return GetPointer<const void *>(VT_INDEX);
  }
  template<typename T> const T *index_as() const;
  const Halide::Serialize::IntImm *index_as_IntImm() const {
    return index_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(index()) : nullptr;
  }
  const Halide::Serialize::UIntImm *index_as_UIntImm() const {
    return index_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(index()) : nullptr;
  }
  const Halide::Serialize::FloatImm *index_as_FloatImm() const {
    return index_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(index()) : nullptr;
  }
  const Halide::Serialize::StringImm *index_as_StringImm() const {
    return index_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(index()) : nullptr;
  }
  const Halide::Serialize::Cast *index_as_Cast() const {
    return index_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(index()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *index_as_Reinterpret() const {
    return index_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(index()) : nullptr;
  }
  const Halide::Serialize::Add *index_as_Add() const {
    return index_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(index()) : nullptr;
  }
  const Halide::Serialize::Sub *index_as_Sub() const {
    return index_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(index()) : nullptr;
  }
  const Halide::Serialize::Mul *index_as_Mul() const {
    return index_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(index()) : nullptr;
  }
  const Halide::Serialize::Div *index_as_Div() const {
    return index_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(index()) : nullptr;
  }
  const Halide::Serialize::Mod *index_as_Mod() const {
    return index_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(index()) : nullptr;
  }
  const Halide::Serialize::Min *index_as_Min() const {
    return index_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(index()) : nullptr;
  }
  const Halide::Serialize::Max *index_as_Max() const {
    return index_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(index()) : nullptr;
  }
  const Halide::Serialize::EQ *index_as_EQ() const {
    return index_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(index()) : nullptr;
  }
  const Halide::Serialize::NE *index_as_NE() const {
    return index_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(index()) : nullptr;
  }
  const Halide::Serialize::LT *index_as_LT() const {
    return index_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(index()) : nullptr;
  }
  const Halide::Serialize::LE *index_as_LE() const {
    return index_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(index()) : nullptr;
  }
  const Halide::Serialize::GT *index_as_GT() const {
    return index_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(index()) : nullptr;
  }
  const Halide::Serialize::GE *index_as_GE() const {
    return index_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(index()) : nullptr;
  }
  const Halide::Serialize::And *index_as_And() const {
    return index_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(index()) : nullptr;
  }
  const Halide::Serialize::Or *index_as_Or() const {
    return index_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(index()) : nullptr;
  }
  const Halide::Serialize::Not *index_as_Not() const {
    return index_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(index()) : nullptr;
  }
  const Halide::Serialize::Select *index_as_Select() const {
    return index_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(index()) : nullptr;
  }
  const Halide::Serialize::Load *index_as_Load() const {
    return index_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(index()) : nullptr;
  }
  const Halide::Serialize::Ramp *index_as_Ramp() const {
    return index_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(index()) : nullptr;
  }
  const Halide::Serialize::Broadcast *index_as_Broadcast() const {
    return index_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(index()) : nullptr;
  }
  const Halide::Serialize::Let *index_as_Let() const {
    return index_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(index()) : nullptr;
  }
  const Halide::Serialize::Call *index_as_Call() const {
    return index_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(index()) : nullptr;
  }
  const Halide::Serialize::Variable *index_as_Variable() const {
    return index_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(index()) : nullptr;
  }
  const Halide::Serialize::Shuffle *index_as_Shuffle() const {
    return index_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(index()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *index_as_VectorReduce() const {
    return index_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(index()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *index_as_UndefinedExpr() const {
    return index_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(index()) : nullptr;
  }
  const ::flatbuffers::String *image_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGE_NAME);
  }
  const ::flatbuffers::String *param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAM_NAME);
  }
  const Halide::Serialize::ModulusRemainder *alignment() const {
    return GetPointer<const Halide::Serialize::ModulusRemainder *>(VT_ALIGNMENT);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_PREDICATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PREDICATE) &&
           VerifyExpr(verifier, predicate(), predicate_type()) &&
           VerifyField<uint8_t>(verifier, VT_INDEX_TYPE, 1) &&
           VerifyOffset(verifier, VT_INDEX) &&
           VerifyExpr(verifier, index(), index_type()) &&
           VerifyOffset(verifier, VT_IMAGE_NAME) &&
           verifier.VerifyString(image_name()) &&
           VerifyOffset(verifier, VT_PARAM_NAME) &&
           verifier.VerifyString(param_name()) &&
           VerifyOffset(verifier, VT_ALIGNMENT) &&
           verifier.VerifyTable(alignment()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Load::predicate_as<Halide::Serialize::IntImm>() const {
  return predicate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Load::predicate_as<Halide::Serialize::UIntImm>() const {
  return predicate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Load::predicate_as<Halide::Serialize::FloatImm>() const {
  return predicate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Load::predicate_as<Halide::Serialize::StringImm>() const {
  return predicate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Load::predicate_as<Halide::Serialize::Cast>() const {
  return predicate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Load::predicate_as<Halide::Serialize::Reinterpret>() const {
  return predicate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Load::predicate_as<Halide::Serialize::Add>() const {
  return predicate_as_Add();
}

template<> inline const Halide::Serialize::Sub *Load::predicate_as<Halide::Serialize::Sub>() const {
  return predicate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Load::predicate_as<Halide::Serialize::Mul>() const {
  return predicate_as_Mul();
}

template<> inline const Halide::Serialize::Div *Load::predicate_as<Halide::Serialize::Div>() const {
  return predicate_as_Div();
}

template<> inline const Halide::Serialize::Mod *Load::predicate_as<Halide::Serialize::Mod>() const {
  return predicate_as_Mod();
}

template<> inline const Halide::Serialize::Min *Load::predicate_as<Halide::Serialize::Min>() const {
  return predicate_as_Min();
}

template<> inline const Halide::Serialize::Max *Load::predicate_as<Halide::Serialize::Max>() const {
  return predicate_as_Max();
}

template<> inline const Halide::Serialize::EQ *Load::predicate_as<Halide::Serialize::EQ>() const {
  return predicate_as_EQ();
}

template<> inline const Halide::Serialize::NE *Load::predicate_as<Halide::Serialize::NE>() const {
  return predicate_as_NE();
}

template<> inline const Halide::Serialize::LT *Load::predicate_as<Halide::Serialize::LT>() const {
  return predicate_as_LT();
}

template<> inline const Halide::Serialize::LE *Load::predicate_as<Halide::Serialize::LE>() const {
  return predicate_as_LE();
}

template<> inline const Halide::Serialize::GT *Load::predicate_as<Halide::Serialize::GT>() const {
  return predicate_as_GT();
}

template<> inline const Halide::Serialize::GE *Load::predicate_as<Halide::Serialize::GE>() const {
  return predicate_as_GE();
}

template<> inline const Halide::Serialize::And *Load::predicate_as<Halide::Serialize::And>() const {
  return predicate_as_And();
}

template<> inline const Halide::Serialize::Or *Load::predicate_as<Halide::Serialize::Or>() const {
  return predicate_as_Or();
}

template<> inline const Halide::Serialize::Not *Load::predicate_as<Halide::Serialize::Not>() const {
  return predicate_as_Not();
}

template<> inline const Halide::Serialize::Select *Load::predicate_as<Halide::Serialize::Select>() const {
  return predicate_as_Select();
}

template<> inline const Halide::Serialize::Load *Load::predicate_as<Halide::Serialize::Load>() const {
  return predicate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Load::predicate_as<Halide::Serialize::Ramp>() const {
  return predicate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Load::predicate_as<Halide::Serialize::Broadcast>() const {
  return predicate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Load::predicate_as<Halide::Serialize::Let>() const {
  return predicate_as_Let();
}

template<> inline const Halide::Serialize::Call *Load::predicate_as<Halide::Serialize::Call>() const {
  return predicate_as_Call();
}

template<> inline const Halide::Serialize::Variable *Load::predicate_as<Halide::Serialize::Variable>() const {
  return predicate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Load::predicate_as<Halide::Serialize::Shuffle>() const {
  return predicate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Load::predicate_as<Halide::Serialize::VectorReduce>() const {
  return predicate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Load::predicate_as<Halide::Serialize::UndefinedExpr>() const {
  return predicate_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Load::index_as<Halide::Serialize::IntImm>() const {
  return index_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Load::index_as<Halide::Serialize::UIntImm>() const {
  return index_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Load::index_as<Halide::Serialize::FloatImm>() const {
  return index_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Load::index_as<Halide::Serialize::StringImm>() const {
  return index_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Load::index_as<Halide::Serialize::Cast>() const {
  return index_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Load::index_as<Halide::Serialize::Reinterpret>() const {
  return index_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Load::index_as<Halide::Serialize::Add>() const {
  return index_as_Add();
}

template<> inline const Halide::Serialize::Sub *Load::index_as<Halide::Serialize::Sub>() const {
  return index_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Load::index_as<Halide::Serialize::Mul>() const {
  return index_as_Mul();
}

template<> inline const Halide::Serialize::Div *Load::index_as<Halide::Serialize::Div>() const {
  return index_as_Div();
}

template<> inline const Halide::Serialize::Mod *Load::index_as<Halide::Serialize::Mod>() const {
  return index_as_Mod();
}

template<> inline const Halide::Serialize::Min *Load::index_as<Halide::Serialize::Min>() const {
  return index_as_Min();
}

template<> inline const Halide::Serialize::Max *Load::index_as<Halide::Serialize::Max>() const {
  return index_as_Max();
}

template<> inline const Halide::Serialize::EQ *Load::index_as<Halide::Serialize::EQ>() const {
  return index_as_EQ();
}

template<> inline const Halide::Serialize::NE *Load::index_as<Halide::Serialize::NE>() const {
  return index_as_NE();
}

template<> inline const Halide::Serialize::LT *Load::index_as<Halide::Serialize::LT>() const {
  return index_as_LT();
}

template<> inline const Halide::Serialize::LE *Load::index_as<Halide::Serialize::LE>() const {
  return index_as_LE();
}

template<> inline const Halide::Serialize::GT *Load::index_as<Halide::Serialize::GT>() const {
  return index_as_GT();
}

template<> inline const Halide::Serialize::GE *Load::index_as<Halide::Serialize::GE>() const {
  return index_as_GE();
}

template<> inline const Halide::Serialize::And *Load::index_as<Halide::Serialize::And>() const {
  return index_as_And();
}

template<> inline const Halide::Serialize::Or *Load::index_as<Halide::Serialize::Or>() const {
  return index_as_Or();
}

template<> inline const Halide::Serialize::Not *Load::index_as<Halide::Serialize::Not>() const {
  return index_as_Not();
}

template<> inline const Halide::Serialize::Select *Load::index_as<Halide::Serialize::Select>() const {
  return index_as_Select();
}

template<> inline const Halide::Serialize::Load *Load::index_as<Halide::Serialize::Load>() const {
  return index_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Load::index_as<Halide::Serialize::Ramp>() const {
  return index_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Load::index_as<Halide::Serialize::Broadcast>() const {
  return index_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Load::index_as<Halide::Serialize::Let>() const {
  return index_as_Let();
}

template<> inline const Halide::Serialize::Call *Load::index_as<Halide::Serialize::Call>() const {
  return index_as_Call();
}

template<> inline const Halide::Serialize::Variable *Load::index_as<Halide::Serialize::Variable>() const {
  return index_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Load::index_as<Halide::Serialize::Shuffle>() const {
  return index_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Load::index_as<Halide::Serialize::VectorReduce>() const {
  return index_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Load::index_as<Halide::Serialize::UndefinedExpr>() const {
  return index_as_UndefinedExpr();
}

struct LoadBuilder {
  typedef Load Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Load::VT_NAME, name);
  }
  void add_predicate_type(Halide::Serialize::Expr predicate_type) {
    fbb_.AddElement<uint8_t>(Load::VT_PREDICATE_TYPE, static_cast<uint8_t>(predicate_type), 0);
  }
  void add_predicate(::flatbuffers::Offset<void> predicate) {
    fbb_.AddOffset(Load::VT_PREDICATE, predicate);
  }
  void add_index_type(Halide::Serialize::Expr index_type) {
    fbb_.AddElement<uint8_t>(Load::VT_INDEX_TYPE, static_cast<uint8_t>(index_type), 0);
  }
  void add_index(::flatbuffers::Offset<void> index) {
    fbb_.AddOffset(Load::VT_INDEX, index);
  }
  void add_image_name(::flatbuffers::Offset<::flatbuffers::String> image_name) {
    fbb_.AddOffset(Load::VT_IMAGE_NAME, image_name);
  }
  void add_param_name(::flatbuffers::Offset<::flatbuffers::String> param_name) {
    fbb_.AddOffset(Load::VT_PARAM_NAME, param_name);
  }
  void add_alignment(::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment) {
    fbb_.AddOffset(Load::VT_ALIGNMENT, alignment);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Load::VT_TYPE, type);
  }
  explicit LoadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Load> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Load>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Load> CreateLoad(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    Halide::Serialize::Expr index_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> index = 0,
    ::flatbuffers::Offset<::flatbuffers::String> image_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> param_name = 0,
    ::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  LoadBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_alignment(alignment);
  builder_.add_param_name(param_name);
  builder_.add_image_name(image_name);
  builder_.add_index(index);
  builder_.add_predicate(predicate);
  builder_.add_name(name);
  builder_.add_index_type(index_type);
  builder_.add_predicate_type(predicate_type);
  return builder_.Finish();
}

struct Load::Traits {
  using type = Load;
  static auto constexpr Create = CreateLoad;
};

inline ::flatbuffers::Offset<Load> CreateLoadDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    Halide::Serialize::Expr index_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> index = 0,
    const char *image_name = nullptr,
    const char *param_name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::ModulusRemainder> alignment = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto image_name__ = image_name ? _fbb.CreateString(image_name) : 0;
  auto param_name__ = param_name ? _fbb.CreateString(param_name) : 0;
  return Halide::Serialize::CreateLoad(
      _fbb,
      name__,
      predicate_type,
      predicate,
      index_type,
      index,
      image_name__,
      param_name__,
      alignment,
      type);
}

struct Ramp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RampBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_TYPE = 4,
    VT_BASE = 6,
    VT_STRIDE_TYPE = 8,
    VT_STRIDE = 10,
    VT_LANES = 12
  };
  Halide::Serialize::Expr base_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_BASE_TYPE, 0));
  }
  const void *base() const {
    return GetPointer<const void *>(VT_BASE);
  }
  template<typename T> const T *base_as() const;
  const Halide::Serialize::IntImm *base_as_IntImm() const {
    return base_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(base()) : nullptr;
  }
  const Halide::Serialize::UIntImm *base_as_UIntImm() const {
    return base_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(base()) : nullptr;
  }
  const Halide::Serialize::FloatImm *base_as_FloatImm() const {
    return base_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(base()) : nullptr;
  }
  const Halide::Serialize::StringImm *base_as_StringImm() const {
    return base_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(base()) : nullptr;
  }
  const Halide::Serialize::Cast *base_as_Cast() const {
    return base_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(base()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *base_as_Reinterpret() const {
    return base_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(base()) : nullptr;
  }
  const Halide::Serialize::Add *base_as_Add() const {
    return base_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(base()) : nullptr;
  }
  const Halide::Serialize::Sub *base_as_Sub() const {
    return base_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(base()) : nullptr;
  }
  const Halide::Serialize::Mul *base_as_Mul() const {
    return base_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(base()) : nullptr;
  }
  const Halide::Serialize::Div *base_as_Div() const {
    return base_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(base()) : nullptr;
  }
  const Halide::Serialize::Mod *base_as_Mod() const {
    return base_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(base()) : nullptr;
  }
  const Halide::Serialize::Min *base_as_Min() const {
    return base_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(base()) : nullptr;
  }
  const Halide::Serialize::Max *base_as_Max() const {
    return base_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(base()) : nullptr;
  }
  const Halide::Serialize::EQ *base_as_EQ() const {
    return base_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(base()) : nullptr;
  }
  const Halide::Serialize::NE *base_as_NE() const {
    return base_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(base()) : nullptr;
  }
  const Halide::Serialize::LT *base_as_LT() const {
    return base_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(base()) : nullptr;
  }
  const Halide::Serialize::LE *base_as_LE() const {
    return base_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(base()) : nullptr;
  }
  const Halide::Serialize::GT *base_as_GT() const {
    return base_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(base()) : nullptr;
  }
  const Halide::Serialize::GE *base_as_GE() const {
    return base_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(base()) : nullptr;
  }
  const Halide::Serialize::And *base_as_And() const {
    return base_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(base()) : nullptr;
  }
  const Halide::Serialize::Or *base_as_Or() const {
    return base_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(base()) : nullptr;
  }
  const Halide::Serialize::Not *base_as_Not() const {
    return base_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(base()) : nullptr;
  }
  const Halide::Serialize::Select *base_as_Select() const {
    return base_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(base()) : nullptr;
  }
  const Halide::Serialize::Load *base_as_Load() const {
    return base_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(base()) : nullptr;
  }
  const Halide::Serialize::Ramp *base_as_Ramp() const {
    return base_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(base()) : nullptr;
  }
  const Halide::Serialize::Broadcast *base_as_Broadcast() const {
    return base_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(base()) : nullptr;
  }
  const Halide::Serialize::Let *base_as_Let() const {
    return base_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(base()) : nullptr;
  }
  const Halide::Serialize::Call *base_as_Call() const {
    return base_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(base()) : nullptr;
  }
  const Halide::Serialize::Variable *base_as_Variable() const {
    return base_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(base()) : nullptr;
  }
  const Halide::Serialize::Shuffle *base_as_Shuffle() const {
    return base_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(base()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *base_as_VectorReduce() const {
    return base_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(base()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *base_as_UndefinedExpr() const {
    return base_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(base()) : nullptr;
  }
  Halide::Serialize::Expr stride_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_STRIDE_TYPE, 0));
  }
  const void *stride() const {
    return GetPointer<const void *>(VT_STRIDE);
  }
  template<typename T> const T *stride_as() const;
  const Halide::Serialize::IntImm *stride_as_IntImm() const {
    return stride_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::UIntImm *stride_as_UIntImm() const {
    return stride_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::FloatImm *stride_as_FloatImm() const {
    return stride_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::StringImm *stride_as_StringImm() const {
    return stride_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::Cast *stride_as_Cast() const {
    return stride_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(stride()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *stride_as_Reinterpret() const {
    return stride_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(stride()) : nullptr;
  }
  const Halide::Serialize::Add *stride_as_Add() const {
    return stride_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(stride()) : nullptr;
  }
  const Halide::Serialize::Sub *stride_as_Sub() const {
    return stride_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(stride()) : nullptr;
  }
  const Halide::Serialize::Mul *stride_as_Mul() const {
    return stride_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(stride()) : nullptr;
  }
  const Halide::Serialize::Div *stride_as_Div() const {
    return stride_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(stride()) : nullptr;
  }
  const Halide::Serialize::Mod *stride_as_Mod() const {
    return stride_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(stride()) : nullptr;
  }
  const Halide::Serialize::Min *stride_as_Min() const {
    return stride_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(stride()) : nullptr;
  }
  const Halide::Serialize::Max *stride_as_Max() const {
    return stride_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(stride()) : nullptr;
  }
  const Halide::Serialize::EQ *stride_as_EQ() const {
    return stride_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(stride()) : nullptr;
  }
  const Halide::Serialize::NE *stride_as_NE() const {
    return stride_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(stride()) : nullptr;
  }
  const Halide::Serialize::LT *stride_as_LT() const {
    return stride_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(stride()) : nullptr;
  }
  const Halide::Serialize::LE *stride_as_LE() const {
    return stride_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(stride()) : nullptr;
  }
  const Halide::Serialize::GT *stride_as_GT() const {
    return stride_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(stride()) : nullptr;
  }
  const Halide::Serialize::GE *stride_as_GE() const {
    return stride_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(stride()) : nullptr;
  }
  const Halide::Serialize::And *stride_as_And() const {
    return stride_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(stride()) : nullptr;
  }
  const Halide::Serialize::Or *stride_as_Or() const {
    return stride_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(stride()) : nullptr;
  }
  const Halide::Serialize::Not *stride_as_Not() const {
    return stride_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(stride()) : nullptr;
  }
  const Halide::Serialize::Select *stride_as_Select() const {
    return stride_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(stride()) : nullptr;
  }
  const Halide::Serialize::Load *stride_as_Load() const {
    return stride_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(stride()) : nullptr;
  }
  const Halide::Serialize::Ramp *stride_as_Ramp() const {
    return stride_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(stride()) : nullptr;
  }
  const Halide::Serialize::Broadcast *stride_as_Broadcast() const {
    return stride_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(stride()) : nullptr;
  }
  const Halide::Serialize::Let *stride_as_Let() const {
    return stride_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(stride()) : nullptr;
  }
  const Halide::Serialize::Call *stride_as_Call() const {
    return stride_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(stride()) : nullptr;
  }
  const Halide::Serialize::Variable *stride_as_Variable() const {
    return stride_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(stride()) : nullptr;
  }
  const Halide::Serialize::Shuffle *stride_as_Shuffle() const {
    return stride_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(stride()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *stride_as_VectorReduce() const {
    return stride_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(stride()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *stride_as_UndefinedExpr() const {
    return stride_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(stride()) : nullptr;
  }
  int32_t lanes() const {
    return GetField<int32_t>(VT_LANES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BASE_TYPE, 1) &&
           VerifyOffset(verifier, VT_BASE) &&
           VerifyExpr(verifier, base(), base_type()) &&
           VerifyField<uint8_t>(verifier, VT_STRIDE_TYPE, 1) &&
           VerifyOffset(verifier, VT_STRIDE) &&
           VerifyExpr(verifier, stride(), stride_type()) &&
           VerifyField<int32_t>(verifier, VT_LANES, 4) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Ramp::base_as<Halide::Serialize::IntImm>() const {
  return base_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Ramp::base_as<Halide::Serialize::UIntImm>() const {
  return base_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Ramp::base_as<Halide::Serialize::FloatImm>() const {
  return base_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Ramp::base_as<Halide::Serialize::StringImm>() const {
  return base_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Ramp::base_as<Halide::Serialize::Cast>() const {
  return base_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Ramp::base_as<Halide::Serialize::Reinterpret>() const {
  return base_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Ramp::base_as<Halide::Serialize::Add>() const {
  return base_as_Add();
}

template<> inline const Halide::Serialize::Sub *Ramp::base_as<Halide::Serialize::Sub>() const {
  return base_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Ramp::base_as<Halide::Serialize::Mul>() const {
  return base_as_Mul();
}

template<> inline const Halide::Serialize::Div *Ramp::base_as<Halide::Serialize::Div>() const {
  return base_as_Div();
}

template<> inline const Halide::Serialize::Mod *Ramp::base_as<Halide::Serialize::Mod>() const {
  return base_as_Mod();
}

template<> inline const Halide::Serialize::Min *Ramp::base_as<Halide::Serialize::Min>() const {
  return base_as_Min();
}

template<> inline const Halide::Serialize::Max *Ramp::base_as<Halide::Serialize::Max>() const {
  return base_as_Max();
}

template<> inline const Halide::Serialize::EQ *Ramp::base_as<Halide::Serialize::EQ>() const {
  return base_as_EQ();
}

template<> inline const Halide::Serialize::NE *Ramp::base_as<Halide::Serialize::NE>() const {
  return base_as_NE();
}

template<> inline const Halide::Serialize::LT *Ramp::base_as<Halide::Serialize::LT>() const {
  return base_as_LT();
}

template<> inline const Halide::Serialize::LE *Ramp::base_as<Halide::Serialize::LE>() const {
  return base_as_LE();
}

template<> inline const Halide::Serialize::GT *Ramp::base_as<Halide::Serialize::GT>() const {
  return base_as_GT();
}

template<> inline const Halide::Serialize::GE *Ramp::base_as<Halide::Serialize::GE>() const {
  return base_as_GE();
}

template<> inline const Halide::Serialize::And *Ramp::base_as<Halide::Serialize::And>() const {
  return base_as_And();
}

template<> inline const Halide::Serialize::Or *Ramp::base_as<Halide::Serialize::Or>() const {
  return base_as_Or();
}

template<> inline const Halide::Serialize::Not *Ramp::base_as<Halide::Serialize::Not>() const {
  return base_as_Not();
}

template<> inline const Halide::Serialize::Select *Ramp::base_as<Halide::Serialize::Select>() const {
  return base_as_Select();
}

template<> inline const Halide::Serialize::Load *Ramp::base_as<Halide::Serialize::Load>() const {
  return base_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Ramp::base_as<Halide::Serialize::Ramp>() const {
  return base_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Ramp::base_as<Halide::Serialize::Broadcast>() const {
  return base_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Ramp::base_as<Halide::Serialize::Let>() const {
  return base_as_Let();
}

template<> inline const Halide::Serialize::Call *Ramp::base_as<Halide::Serialize::Call>() const {
  return base_as_Call();
}

template<> inline const Halide::Serialize::Variable *Ramp::base_as<Halide::Serialize::Variable>() const {
  return base_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Ramp::base_as<Halide::Serialize::Shuffle>() const {
  return base_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Ramp::base_as<Halide::Serialize::VectorReduce>() const {
  return base_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Ramp::base_as<Halide::Serialize::UndefinedExpr>() const {
  return base_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Ramp::stride_as<Halide::Serialize::IntImm>() const {
  return stride_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Ramp::stride_as<Halide::Serialize::UIntImm>() const {
  return stride_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Ramp::stride_as<Halide::Serialize::FloatImm>() const {
  return stride_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Ramp::stride_as<Halide::Serialize::StringImm>() const {
  return stride_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Ramp::stride_as<Halide::Serialize::Cast>() const {
  return stride_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Ramp::stride_as<Halide::Serialize::Reinterpret>() const {
  return stride_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Ramp::stride_as<Halide::Serialize::Add>() const {
  return stride_as_Add();
}

template<> inline const Halide::Serialize::Sub *Ramp::stride_as<Halide::Serialize::Sub>() const {
  return stride_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Ramp::stride_as<Halide::Serialize::Mul>() const {
  return stride_as_Mul();
}

template<> inline const Halide::Serialize::Div *Ramp::stride_as<Halide::Serialize::Div>() const {
  return stride_as_Div();
}

template<> inline const Halide::Serialize::Mod *Ramp::stride_as<Halide::Serialize::Mod>() const {
  return stride_as_Mod();
}

template<> inline const Halide::Serialize::Min *Ramp::stride_as<Halide::Serialize::Min>() const {
  return stride_as_Min();
}

template<> inline const Halide::Serialize::Max *Ramp::stride_as<Halide::Serialize::Max>() const {
  return stride_as_Max();
}

template<> inline const Halide::Serialize::EQ *Ramp::stride_as<Halide::Serialize::EQ>() const {
  return stride_as_EQ();
}

template<> inline const Halide::Serialize::NE *Ramp::stride_as<Halide::Serialize::NE>() const {
  return stride_as_NE();
}

template<> inline const Halide::Serialize::LT *Ramp::stride_as<Halide::Serialize::LT>() const {
  return stride_as_LT();
}

template<> inline const Halide::Serialize::LE *Ramp::stride_as<Halide::Serialize::LE>() const {
  return stride_as_LE();
}

template<> inline const Halide::Serialize::GT *Ramp::stride_as<Halide::Serialize::GT>() const {
  return stride_as_GT();
}

template<> inline const Halide::Serialize::GE *Ramp::stride_as<Halide::Serialize::GE>() const {
  return stride_as_GE();
}

template<> inline const Halide::Serialize::And *Ramp::stride_as<Halide::Serialize::And>() const {
  return stride_as_And();
}

template<> inline const Halide::Serialize::Or *Ramp::stride_as<Halide::Serialize::Or>() const {
  return stride_as_Or();
}

template<> inline const Halide::Serialize::Not *Ramp::stride_as<Halide::Serialize::Not>() const {
  return stride_as_Not();
}

template<> inline const Halide::Serialize::Select *Ramp::stride_as<Halide::Serialize::Select>() const {
  return stride_as_Select();
}

template<> inline const Halide::Serialize::Load *Ramp::stride_as<Halide::Serialize::Load>() const {
  return stride_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Ramp::stride_as<Halide::Serialize::Ramp>() const {
  return stride_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Ramp::stride_as<Halide::Serialize::Broadcast>() const {
  return stride_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Ramp::stride_as<Halide::Serialize::Let>() const {
  return stride_as_Let();
}

template<> inline const Halide::Serialize::Call *Ramp::stride_as<Halide::Serialize::Call>() const {
  return stride_as_Call();
}

template<> inline const Halide::Serialize::Variable *Ramp::stride_as<Halide::Serialize::Variable>() const {
  return stride_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Ramp::stride_as<Halide::Serialize::Shuffle>() const {
  return stride_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Ramp::stride_as<Halide::Serialize::VectorReduce>() const {
  return stride_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Ramp::stride_as<Halide::Serialize::UndefinedExpr>() const {
  return stride_as_UndefinedExpr();
}

struct RampBuilder {
  typedef Ramp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_type(Halide::Serialize::Expr base_type) {
    fbb_.AddElement<uint8_t>(Ramp::VT_BASE_TYPE, static_cast<uint8_t>(base_type), 0);
  }
  void add_base(::flatbuffers::Offset<void> base) {
    fbb_.AddOffset(Ramp::VT_BASE, base);
  }
  void add_stride_type(Halide::Serialize::Expr stride_type) {
    fbb_.AddElement<uint8_t>(Ramp::VT_STRIDE_TYPE, static_cast<uint8_t>(stride_type), 0);
  }
  void add_stride(::flatbuffers::Offset<void> stride) {
    fbb_.AddOffset(Ramp::VT_STRIDE, stride);
  }
  void add_lanes(int32_t lanes) {
    fbb_.AddElement<int32_t>(Ramp::VT_LANES, lanes, 0);
  }
  explicit RampBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ramp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ramp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ramp> CreateRamp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr base_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> base = 0,
    Halide::Serialize::Expr stride_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> stride = 0,
    int32_t lanes = 0) {
  RampBuilder builder_(_fbb);
  builder_.add_lanes(lanes);
  builder_.add_stride(stride);
  builder_.add_base(base);
  builder_.add_stride_type(stride_type);
  builder_.add_base_type(base_type);
  return builder_.Finish();
}

struct Ramp::Traits {
  using type = Ramp;
  static auto constexpr Create = CreateRamp;
};

struct Broadcast FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BroadcastBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6,
    VT_LANES = 8
  };
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  int32_t lanes() const {
    return GetField<int32_t>(VT_LANES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyField<int32_t>(verifier, VT_LANES, 4) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Broadcast::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Broadcast::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Broadcast::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Broadcast::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Broadcast::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Broadcast::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Broadcast::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Broadcast::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Broadcast::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Broadcast::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Broadcast::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Broadcast::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Broadcast::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Broadcast::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Broadcast::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Broadcast::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Broadcast::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Broadcast::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Broadcast::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Broadcast::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Broadcast::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Broadcast::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Broadcast::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Broadcast::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Broadcast::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Broadcast::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Broadcast::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Broadcast::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Broadcast::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Broadcast::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Broadcast::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Broadcast::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

struct BroadcastBuilder {
  typedef Broadcast Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Broadcast::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Broadcast::VT_VALUE, value);
  }
  void add_lanes(int32_t lanes) {
    fbb_.AddElement<int32_t>(Broadcast::VT_LANES, lanes, 0);
  }
  explicit BroadcastBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Broadcast> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Broadcast>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Broadcast> CreateBroadcast(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    int32_t lanes = 0) {
  BroadcastBuilder builder_(_fbb);
  builder_.add_lanes(lanes);
  builder_.add_value(value);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Broadcast::Traits {
  using type = Broadcast;
  static auto constexpr Create = CreateBroadcast;
};

struct Let FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LetBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8,
    VT_BODY_TYPE = 10,
    VT_BODY = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  Halide::Serialize::Expr body_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_BODY_TYPE, 0));
  }
  const void *body() const {
    return GetPointer<const void *>(VT_BODY);
  }
  template<typename T> const T *body_as() const;
  const Halide::Serialize::IntImm *body_as_IntImm() const {
    return body_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(body()) : nullptr;
  }
  const Halide::Serialize::UIntImm *body_as_UIntImm() const {
    return body_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(body()) : nullptr;
  }
  const Halide::Serialize::FloatImm *body_as_FloatImm() const {
    return body_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(body()) : nullptr;
  }
  const Halide::Serialize::StringImm *body_as_StringImm() const {
    return body_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(body()) : nullptr;
  }
  const Halide::Serialize::Cast *body_as_Cast() const {
    return body_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(body()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *body_as_Reinterpret() const {
    return body_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(body()) : nullptr;
  }
  const Halide::Serialize::Add *body_as_Add() const {
    return body_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(body()) : nullptr;
  }
  const Halide::Serialize::Sub *body_as_Sub() const {
    return body_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(body()) : nullptr;
  }
  const Halide::Serialize::Mul *body_as_Mul() const {
    return body_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(body()) : nullptr;
  }
  const Halide::Serialize::Div *body_as_Div() const {
    return body_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(body()) : nullptr;
  }
  const Halide::Serialize::Mod *body_as_Mod() const {
    return body_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(body()) : nullptr;
  }
  const Halide::Serialize::Min *body_as_Min() const {
    return body_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(body()) : nullptr;
  }
  const Halide::Serialize::Max *body_as_Max() const {
    return body_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(body()) : nullptr;
  }
  const Halide::Serialize::EQ *body_as_EQ() const {
    return body_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(body()) : nullptr;
  }
  const Halide::Serialize::NE *body_as_NE() const {
    return body_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(body()) : nullptr;
  }
  const Halide::Serialize::LT *body_as_LT() const {
    return body_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(body()) : nullptr;
  }
  const Halide::Serialize::LE *body_as_LE() const {
    return body_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(body()) : nullptr;
  }
  const Halide::Serialize::GT *body_as_GT() const {
    return body_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(body()) : nullptr;
  }
  const Halide::Serialize::GE *body_as_GE() const {
    return body_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(body()) : nullptr;
  }
  const Halide::Serialize::And *body_as_And() const {
    return body_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(body()) : nullptr;
  }
  const Halide::Serialize::Or *body_as_Or() const {
    return body_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(body()) : nullptr;
  }
  const Halide::Serialize::Not *body_as_Not() const {
    return body_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(body()) : nullptr;
  }
  const Halide::Serialize::Select *body_as_Select() const {
    return body_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(body()) : nullptr;
  }
  const Halide::Serialize::Load *body_as_Load() const {
    return body_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(body()) : nullptr;
  }
  const Halide::Serialize::Ramp *body_as_Ramp() const {
    return body_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(body()) : nullptr;
  }
  const Halide::Serialize::Broadcast *body_as_Broadcast() const {
    return body_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(body()) : nullptr;
  }
  const Halide::Serialize::Let *body_as_Let() const {
    return body_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(body()) : nullptr;
  }
  const Halide::Serialize::Call *body_as_Call() const {
    return body_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(body()) : nullptr;
  }
  const Halide::Serialize::Variable *body_as_Variable() const {
    return body_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(body()) : nullptr;
  }
  const Halide::Serialize::Shuffle *body_as_Shuffle() const {
    return body_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(body()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *body_as_VectorReduce() const {
    return body_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(body()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *body_as_UndefinedExpr() const {
    return body_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(body()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyField<uint8_t>(verifier, VT_BODY_TYPE, 1) &&
           VerifyOffset(verifier, VT_BODY) &&
           VerifyExpr(verifier, body(), body_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Let::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Let::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Let::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Let::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Let::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Let::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Let::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *Let::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Let::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *Let::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *Let::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *Let::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *Let::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *Let::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *Let::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *Let::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *Let::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *Let::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *Let::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *Let::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *Let::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *Let::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *Let::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *Let::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Let::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Let::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Let::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *Let::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *Let::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Let::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Let::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Let::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Let::body_as<Halide::Serialize::IntImm>() const {
  return body_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Let::body_as<Halide::Serialize::UIntImm>() const {
  return body_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Let::body_as<Halide::Serialize::FloatImm>() const {
  return body_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Let::body_as<Halide::Serialize::StringImm>() const {
  return body_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Let::body_as<Halide::Serialize::Cast>() const {
  return body_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Let::body_as<Halide::Serialize::Reinterpret>() const {
  return body_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Let::body_as<Halide::Serialize::Add>() const {
  return body_as_Add();
}

template<> inline const Halide::Serialize::Sub *Let::body_as<Halide::Serialize::Sub>() const {
  return body_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Let::body_as<Halide::Serialize::Mul>() const {
  return body_as_Mul();
}

template<> inline const Halide::Serialize::Div *Let::body_as<Halide::Serialize::Div>() const {
  return body_as_Div();
}

template<> inline const Halide::Serialize::Mod *Let::body_as<Halide::Serialize::Mod>() const {
  return body_as_Mod();
}

template<> inline const Halide::Serialize::Min *Let::body_as<Halide::Serialize::Min>() const {
  return body_as_Min();
}

template<> inline const Halide::Serialize::Max *Let::body_as<Halide::Serialize::Max>() const {
  return body_as_Max();
}

template<> inline const Halide::Serialize::EQ *Let::body_as<Halide::Serialize::EQ>() const {
  return body_as_EQ();
}

template<> inline const Halide::Serialize::NE *Let::body_as<Halide::Serialize::NE>() const {
  return body_as_NE();
}

template<> inline const Halide::Serialize::LT *Let::body_as<Halide::Serialize::LT>() const {
  return body_as_LT();
}

template<> inline const Halide::Serialize::LE *Let::body_as<Halide::Serialize::LE>() const {
  return body_as_LE();
}

template<> inline const Halide::Serialize::GT *Let::body_as<Halide::Serialize::GT>() const {
  return body_as_GT();
}

template<> inline const Halide::Serialize::GE *Let::body_as<Halide::Serialize::GE>() const {
  return body_as_GE();
}

template<> inline const Halide::Serialize::And *Let::body_as<Halide::Serialize::And>() const {
  return body_as_And();
}

template<> inline const Halide::Serialize::Or *Let::body_as<Halide::Serialize::Or>() const {
  return body_as_Or();
}

template<> inline const Halide::Serialize::Not *Let::body_as<Halide::Serialize::Not>() const {
  return body_as_Not();
}

template<> inline const Halide::Serialize::Select *Let::body_as<Halide::Serialize::Select>() const {
  return body_as_Select();
}

template<> inline const Halide::Serialize::Load *Let::body_as<Halide::Serialize::Load>() const {
  return body_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Let::body_as<Halide::Serialize::Ramp>() const {
  return body_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Let::body_as<Halide::Serialize::Broadcast>() const {
  return body_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Let::body_as<Halide::Serialize::Let>() const {
  return body_as_Let();
}

template<> inline const Halide::Serialize::Call *Let::body_as<Halide::Serialize::Call>() const {
  return body_as_Call();
}

template<> inline const Halide::Serialize::Variable *Let::body_as<Halide::Serialize::Variable>() const {
  return body_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Let::body_as<Halide::Serialize::Shuffle>() const {
  return body_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Let::body_as<Halide::Serialize::VectorReduce>() const {
  return body_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Let::body_as<Halide::Serialize::UndefinedExpr>() const {
  return body_as_UndefinedExpr();
}

struct LetBuilder {
  typedef Let Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Let::VT_NAME, name);
  }
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(Let::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(Let::VT_VALUE, value);
  }
  void add_body_type(Halide::Serialize::Expr body_type) {
    fbb_.AddElement<uint8_t>(Let::VT_BODY_TYPE, static_cast<uint8_t>(body_type), 0);
  }
  void add_body(::flatbuffers::Offset<void> body) {
    fbb_.AddOffset(Let::VT_BODY, body);
  }
  explicit LetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Let> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Let>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Let> CreateLet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Expr body_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  LetBuilder builder_(_fbb);
  builder_.add_body(body);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_body_type(body_type);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct Let::Traits {
  using type = Let;
  static auto constexpr Create = CreateLet;
};

inline ::flatbuffers::Offset<Let> CreateLetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::Expr body_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> body = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateLet(
      _fbb,
      name__,
      value_type,
      value,
      body_type,
      body);
}

struct Call FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CallBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ARGS_TYPE = 6,
    VT_ARGS = 8,
    VT_CALL_TYPE = 10,
    VT_FUNC_INDEX = 12,
    VT_VALUE_INDEX = 14,
    VT_IMAGE_NAME = 16,
    VT_PARAM_NAME = 18,
    VT_TYPE = 20
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *args_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_ARGS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_ARGS);
  }
  Halide::Serialize::CallType call_type() const {
    return static_cast<Halide::Serialize::CallType>(GetField<uint8_t>(VT_CALL_TYPE, 0));
  }
  int32_t func_index() const {
    return GetField<int32_t>(VT_FUNC_INDEX, 0);
  }
  int32_t value_index() const {
    return GetField<int32_t>(VT_VALUE_INDEX, 0);
  }
  const ::flatbuffers::String *image_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGE_NAME);
  }
  const ::flatbuffers::String *param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAM_NAME);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ARGS_TYPE) &&
           verifier.VerifyVector(args_type()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyVector(args()) &&
           VerifyExprVector(verifier, args(), args_type()) &&
           VerifyField<uint8_t>(verifier, VT_CALL_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_FUNC_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_VALUE_INDEX, 4) &&
           VerifyOffset(verifier, VT_IMAGE_NAME) &&
           verifier.VerifyString(image_name()) &&
           VerifyOffset(verifier, VT_PARAM_NAME) &&
           verifier.VerifyString(param_name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           verifier.EndTable();
  }
};

struct CallBuilder {
  typedef Call Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Call::VT_NAME, name);
  }
  void add_args_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type) {
    fbb_.AddOffset(Call::VT_ARGS_TYPE, args_type);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args) {
    fbb_.AddOffset(Call::VT_ARGS, args);
  }
  void add_call_type(Halide::Serialize::CallType call_type) {
    fbb_.AddElement<uint8_t>(Call::VT_CALL_TYPE, static_cast<uint8_t>(call_type), 0);
  }
  void add_func_index(int32_t func_index) {
    fbb_.AddElement<int32_t>(Call::VT_FUNC_INDEX, func_index, 0);
  }
  void add_value_index(int32_t value_index) {
    fbb_.AddElement<int32_t>(Call::VT_VALUE_INDEX, value_index, 0);
  }
  void add_image_name(::flatbuffers::Offset<::flatbuffers::String> image_name) {
    fbb_.AddOffset(Call::VT_IMAGE_NAME, image_name);
  }
  void add_param_name(::flatbuffers::Offset<::flatbuffers::String> param_name) {
    fbb_.AddOffset(Call::VT_PARAM_NAME, param_name);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Call::VT_TYPE, type);
  }
  explicit CallBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Call> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Call>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Call> CreateCall(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args = 0,
    Halide::Serialize::CallType call_type = Halide::Serialize::CallType::Image,
    int32_t func_index = 0,
    int32_t value_index = 0,
    ::flatbuffers::Offset<::flatbuffers::String> image_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> param_name = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  CallBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_param_name(param_name);
  builder_.add_image_name(image_name);
  builder_.add_value_index(value_index);
  builder_.add_func_index(func_index);
  builder_.add_args(args);
  builder_.add_args_type(args_type);
  builder_.add_name(name);
  builder_.add_call_type(call_type);
  return builder_.Finish();
}

struct Call::Traits {
  using type = Call;
  static auto constexpr Create = CreateCall;
};

inline ::flatbuffers::Offset<Call> CreateCallDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<Halide::Serialize::Expr> *args_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *args = nullptr,
    Halide::Serialize::CallType call_type = Halide::Serialize::CallType::Image,
    int32_t func_index = 0,
    int32_t value_index = 0,
    const char *image_name = nullptr,
    const char *param_name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto args_type__ = args_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*args_type) : 0;
  auto args__ = args ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*args) : 0;
  auto image_name__ = image_name ? _fbb.CreateString(image_name) : 0;
  auto param_name__ = param_name ? _fbb.CreateString(param_name) : 0;
  return Halide::Serialize::CreateCall(
      _fbb,
      name__,
      args_type__,
      args__,
      call_type,
      func_index,
      value_index,
      image_name__,
      param_name__,
      type);
}

struct ReductionVariable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReductionVariableBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR = 4,
    VT_MIN_TYPE = 6,
    VT_MIN = 8,
    VT_EXTENT_TYPE = 10,
    VT_EXTENT = 12
  };
  const ::flatbuffers::String *var() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR);
  }
  Halide::Serialize::Expr min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_TYPE, 0));
  }
  const void *min() const {
    return GetPointer<const void *>(VT_MIN);
  }
  template<typename T> const T *min_as() const;
  const Halide::Serialize::IntImm *min_as_IntImm() const {
    return min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_as_UIntImm() const {
    return min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_as_FloatImm() const {
    return min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_as_StringImm() const {
    return min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min()) : nullptr;
  }
  const Halide::Serialize::Cast *min_as_Cast() const {
    return min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_as_Reinterpret() const {
    return min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min()) : nullptr;
  }
  const Halide::Serialize::Add *min_as_Add() const {
    return min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min()) : nullptr;
  }
  const Halide::Serialize::Sub *min_as_Sub() const {
    return min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min()) : nullptr;
  }
  const Halide::Serialize::Mul *min_as_Mul() const {
    return min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min()) : nullptr;
  }
  const Halide::Serialize::Div *min_as_Div() const {
    return min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min()) : nullptr;
  }
  const Halide::Serialize::Mod *min_as_Mod() const {
    return min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min()) : nullptr;
  }
  const Halide::Serialize::Min *min_as_Min() const {
    return min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min()) : nullptr;
  }
  const Halide::Serialize::Max *min_as_Max() const {
    return min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min()) : nullptr;
  }
  const Halide::Serialize::EQ *min_as_EQ() const {
    return min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min()) : nullptr;
  }
  const Halide::Serialize::NE *min_as_NE() const {
    return min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min()) : nullptr;
  }
  const Halide::Serialize::LT *min_as_LT() const {
    return min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min()) : nullptr;
  }
  const Halide::Serialize::LE *min_as_LE() const {
    return min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min()) : nullptr;
  }
  const Halide::Serialize::GT *min_as_GT() const {
    return min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min()) : nullptr;
  }
  const Halide::Serialize::GE *min_as_GE() const {
    return min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min()) : nullptr;
  }
  const Halide::Serialize::And *min_as_And() const {
    return min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min()) : nullptr;
  }
  const Halide::Serialize::Or *min_as_Or() const {
    return min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min()) : nullptr;
  }
  const Halide::Serialize::Not *min_as_Not() const {
    return min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min()) : nullptr;
  }
  const Halide::Serialize::Select *min_as_Select() const {
    return min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min()) : nullptr;
  }
  const Halide::Serialize::Load *min_as_Load() const {
    return min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_as_Ramp() const {
    return min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_as_Broadcast() const {
    return min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min()) : nullptr;
  }
  const Halide::Serialize::Let *min_as_Let() const {
    return min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min()) : nullptr;
  }
  const Halide::Serialize::Call *min_as_Call() const {
    return min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min()) : nullptr;
  }
  const Halide::Serialize::Variable *min_as_Variable() const {
    return min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_as_Shuffle() const {
    return min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_as_VectorReduce() const {
    return min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_as_UndefinedExpr() const {
    return min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min()) : nullptr;
  }
  Halide::Serialize::Expr extent_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_TYPE, 0));
  }
  const void *extent() const {
    return GetPointer<const void *>(VT_EXTENT);
  }
  template<typename T> const T *extent_as() const;
  const Halide::Serialize::IntImm *extent_as_IntImm() const {
    return extent_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_as_UIntImm() const {
    return extent_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_as_FloatImm() const {
    return extent_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_as_StringImm() const {
    return extent_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_as_Cast() const {
    return extent_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_as_Reinterpret() const {
    return extent_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent()) : nullptr;
  }
  const Halide::Serialize::Add *extent_as_Add() const {
    return extent_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_as_Sub() const {
    return extent_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_as_Mul() const {
    return extent_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent()) : nullptr;
  }
  const Halide::Serialize::Div *extent_as_Div() const {
    return extent_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_as_Mod() const {
    return extent_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent()) : nullptr;
  }
  const Halide::Serialize::Min *extent_as_Min() const {
    return extent_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent()) : nullptr;
  }
  const Halide::Serialize::Max *extent_as_Max() const {
    return extent_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_as_EQ() const {
    return extent_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent()) : nullptr;
  }
  const Halide::Serialize::NE *extent_as_NE() const {
    return extent_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent()) : nullptr;
  }
  const Halide::Serialize::LT *extent_as_LT() const {
    return extent_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent()) : nullptr;
  }
  const Halide::Serialize::LE *extent_as_LE() const {
    return extent_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent()) : nullptr;
  }
  const Halide::Serialize::GT *extent_as_GT() const {
    return extent_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent()) : nullptr;
  }
  const Halide::Serialize::GE *extent_as_GE() const {
    return extent_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent()) : nullptr;
  }
  const Halide::Serialize::And *extent_as_And() const {
    return extent_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent()) : nullptr;
  }
  const Halide::Serialize::Or *extent_as_Or() const {
    return extent_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent()) : nullptr;
  }
  const Halide::Serialize::Not *extent_as_Not() const {
    return extent_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent()) : nullptr;
  }
  const Halide::Serialize::Select *extent_as_Select() const {
    return extent_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent()) : nullptr;
  }
  const Halide::Serialize::Load *extent_as_Load() const {
    return extent_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_as_Ramp() const {
    return extent_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_as_Broadcast() const {
    return extent_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Let *extent_as_Let() const {
    return extent_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent()) : nullptr;
  }
  const Halide::Serialize::Call *extent_as_Call() const {
    return extent_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_as_Variable() const {
    return extent_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_as_Shuffle() const {
    return extent_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_as_VectorReduce() const {
    return extent_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_as_UndefinedExpr() const {
    return extent_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR) &&
           verifier.VerifyString(var()) &&
           VerifyField<uint8_t>(verifier, VT_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN) &&
           VerifyExpr(verifier, min(), min_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT) &&
           VerifyExpr(verifier, extent(), extent_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *ReductionVariable::min_as<Halide::Serialize::IntImm>() const {
  return min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *ReductionVariable::min_as<Halide::Serialize::UIntImm>() const {
  return min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *ReductionVariable::min_as<Halide::Serialize::FloatImm>() const {
  return min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *ReductionVariable::min_as<Halide::Serialize::StringImm>() const {
  return min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *ReductionVariable::min_as<Halide::Serialize::Cast>() const {
  return min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *ReductionVariable::min_as<Halide::Serialize::Reinterpret>() const {
  return min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *ReductionVariable::min_as<Halide::Serialize::Add>() const {
  return min_as_Add();
}

template<> inline const Halide::Serialize::Sub *ReductionVariable::min_as<Halide::Serialize::Sub>() const {
  return min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *ReductionVariable::min_as<Halide::Serialize::Mul>() const {
  return min_as_Mul();
}

template<> inline const Halide::Serialize::Div *ReductionVariable::min_as<Halide::Serialize::Div>() const {
  return min_as_Div();
}

template<> inline const Halide::Serialize::Mod *ReductionVariable::min_as<Halide::Serialize::Mod>() const {
  return min_as_Mod();
}

template<> inline const Halide::Serialize::Min *ReductionVariable::min_as<Halide::Serialize::Min>() const {
  return min_as_Min();
}

template<> inline const Halide::Serialize::Max *ReductionVariable::min_as<Halide::Serialize::Max>() const {
  return min_as_Max();
}

template<> inline const Halide::Serialize::EQ *ReductionVariable::min_as<Halide::Serialize::EQ>() const {
  return min_as_EQ();
}

template<> inline const Halide::Serialize::NE *ReductionVariable::min_as<Halide::Serialize::NE>() const {
  return min_as_NE();
}

template<> inline const Halide::Serialize::LT *ReductionVariable::min_as<Halide::Serialize::LT>() const {
  return min_as_LT();
}

template<> inline const Halide::Serialize::LE *ReductionVariable::min_as<Halide::Serialize::LE>() const {
  return min_as_LE();
}

template<> inline const Halide::Serialize::GT *ReductionVariable::min_as<Halide::Serialize::GT>() const {
  return min_as_GT();
}

template<> inline const Halide::Serialize::GE *ReductionVariable::min_as<Halide::Serialize::GE>() const {
  return min_as_GE();
}

template<> inline const Halide::Serialize::And *ReductionVariable::min_as<Halide::Serialize::And>() const {
  return min_as_And();
}

template<> inline const Halide::Serialize::Or *ReductionVariable::min_as<Halide::Serialize::Or>() const {
  return min_as_Or();
}

template<> inline const Halide::Serialize::Not *ReductionVariable::min_as<Halide::Serialize::Not>() const {
  return min_as_Not();
}

template<> inline const Halide::Serialize::Select *ReductionVariable::min_as<Halide::Serialize::Select>() const {
  return min_as_Select();
}

template<> inline const Halide::Serialize::Load *ReductionVariable::min_as<Halide::Serialize::Load>() const {
  return min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *ReductionVariable::min_as<Halide::Serialize::Ramp>() const {
  return min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *ReductionVariable::min_as<Halide::Serialize::Broadcast>() const {
  return min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *ReductionVariable::min_as<Halide::Serialize::Let>() const {
  return min_as_Let();
}

template<> inline const Halide::Serialize::Call *ReductionVariable::min_as<Halide::Serialize::Call>() const {
  return min_as_Call();
}

template<> inline const Halide::Serialize::Variable *ReductionVariable::min_as<Halide::Serialize::Variable>() const {
  return min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *ReductionVariable::min_as<Halide::Serialize::Shuffle>() const {
  return min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *ReductionVariable::min_as<Halide::Serialize::VectorReduce>() const {
  return min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *ReductionVariable::min_as<Halide::Serialize::UndefinedExpr>() const {
  return min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *ReductionVariable::extent_as<Halide::Serialize::IntImm>() const {
  return extent_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *ReductionVariable::extent_as<Halide::Serialize::UIntImm>() const {
  return extent_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *ReductionVariable::extent_as<Halide::Serialize::FloatImm>() const {
  return extent_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *ReductionVariable::extent_as<Halide::Serialize::StringImm>() const {
  return extent_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *ReductionVariable::extent_as<Halide::Serialize::Cast>() const {
  return extent_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *ReductionVariable::extent_as<Halide::Serialize::Reinterpret>() const {
  return extent_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *ReductionVariable::extent_as<Halide::Serialize::Add>() const {
  return extent_as_Add();
}

template<> inline const Halide::Serialize::Sub *ReductionVariable::extent_as<Halide::Serialize::Sub>() const {
  return extent_as_Sub();
}

template<> inline const Halide::Serialize::Mul *ReductionVariable::extent_as<Halide::Serialize::Mul>() const {
  return extent_as_Mul();
}

template<> inline const Halide::Serialize::Div *ReductionVariable::extent_as<Halide::Serialize::Div>() const {
  return extent_as_Div();
}

template<> inline const Halide::Serialize::Mod *ReductionVariable::extent_as<Halide::Serialize::Mod>() const {
  return extent_as_Mod();
}

template<> inline const Halide::Serialize::Min *ReductionVariable::extent_as<Halide::Serialize::Min>() const {
  return extent_as_Min();
}

template<> inline const Halide::Serialize::Max *ReductionVariable::extent_as<Halide::Serialize::Max>() const {
  return extent_as_Max();
}

template<> inline const Halide::Serialize::EQ *ReductionVariable::extent_as<Halide::Serialize::EQ>() const {
  return extent_as_EQ();
}

template<> inline const Halide::Serialize::NE *ReductionVariable::extent_as<Halide::Serialize::NE>() const {
  return extent_as_NE();
}

template<> inline const Halide::Serialize::LT *ReductionVariable::extent_as<Halide::Serialize::LT>() const {
  return extent_as_LT();
}

template<> inline const Halide::Serialize::LE *ReductionVariable::extent_as<Halide::Serialize::LE>() const {
  return extent_as_LE();
}

template<> inline const Halide::Serialize::GT *ReductionVariable::extent_as<Halide::Serialize::GT>() const {
  return extent_as_GT();
}

template<> inline const Halide::Serialize::GE *ReductionVariable::extent_as<Halide::Serialize::GE>() const {
  return extent_as_GE();
}

template<> inline const Halide::Serialize::And *ReductionVariable::extent_as<Halide::Serialize::And>() const {
  return extent_as_And();
}

template<> inline const Halide::Serialize::Or *ReductionVariable::extent_as<Halide::Serialize::Or>() const {
  return extent_as_Or();
}

template<> inline const Halide::Serialize::Not *ReductionVariable::extent_as<Halide::Serialize::Not>() const {
  return extent_as_Not();
}

template<> inline const Halide::Serialize::Select *ReductionVariable::extent_as<Halide::Serialize::Select>() const {
  return extent_as_Select();
}

template<> inline const Halide::Serialize::Load *ReductionVariable::extent_as<Halide::Serialize::Load>() const {
  return extent_as_Load();
}

template<> inline const Halide::Serialize::Ramp *ReductionVariable::extent_as<Halide::Serialize::Ramp>() const {
  return extent_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *ReductionVariable::extent_as<Halide::Serialize::Broadcast>() const {
  return extent_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *ReductionVariable::extent_as<Halide::Serialize::Let>() const {
  return extent_as_Let();
}

template<> inline const Halide::Serialize::Call *ReductionVariable::extent_as<Halide::Serialize::Call>() const {
  return extent_as_Call();
}

template<> inline const Halide::Serialize::Variable *ReductionVariable::extent_as<Halide::Serialize::Variable>() const {
  return extent_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *ReductionVariable::extent_as<Halide::Serialize::Shuffle>() const {
  return extent_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *ReductionVariable::extent_as<Halide::Serialize::VectorReduce>() const {
  return extent_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *ReductionVariable::extent_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_as_UndefinedExpr();
}

struct ReductionVariableBuilder {
  typedef ReductionVariable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_var(::flatbuffers::Offset<::flatbuffers::String> var) {
    fbb_.AddOffset(ReductionVariable::VT_VAR, var);
  }
  void add_min_type(Halide::Serialize::Expr min_type) {
    fbb_.AddElement<uint8_t>(ReductionVariable::VT_MIN_TYPE, static_cast<uint8_t>(min_type), 0);
  }
  void add_min(::flatbuffers::Offset<void> min) {
    fbb_.AddOffset(ReductionVariable::VT_MIN, min);
  }
  void add_extent_type(Halide::Serialize::Expr extent_type) {
    fbb_.AddElement<uint8_t>(ReductionVariable::VT_EXTENT_TYPE, static_cast<uint8_t>(extent_type), 0);
  }
  void add_extent(::flatbuffers::Offset<void> extent) {
    fbb_.AddOffset(ReductionVariable::VT_EXTENT, extent);
  }
  explicit ReductionVariableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReductionVariable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReductionVariable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReductionVariable> CreateReductionVariable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> var = 0,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0) {
  ReductionVariableBuilder builder_(_fbb);
  builder_.add_extent(extent);
  builder_.add_min(min);
  builder_.add_var(var);
  builder_.add_extent_type(extent_type);
  builder_.add_min_type(min_type);
  return builder_.Finish();
}

struct ReductionVariable::Traits {
  using type = ReductionVariable;
  static auto constexpr Create = CreateReductionVariable;
};

inline ::flatbuffers::Offset<ReductionVariable> CreateReductionVariableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *var = nullptr,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0) {
  auto var__ = var ? _fbb.CreateString(var) : 0;
  return Halide::Serialize::CreateReductionVariable(
      _fbb,
      var__,
      min_type,
      min,
      extent_type,
      extent);
}

struct ReductionDomain FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReductionDomainBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFINED = 4,
    VT_DOMAIN = 6,
    VT_PREDICATE_TYPE = 8,
    VT_PREDICATE = 10,
    VT_FROZEN = 12
  };
  bool defined() const {
    return GetField<uint8_t>(VT_DEFINED, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *domain() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *>(VT_DOMAIN);
  }
  Halide::Serialize::Expr predicate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_PREDICATE_TYPE, 0));
  }
  const void *predicate() const {
    return GetPointer<const void *>(VT_PREDICATE);
  }
  template<typename T> const T *predicate_as() const;
  const Halide::Serialize::IntImm *predicate_as_IntImm() const {
    return predicate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *predicate_as_UIntImm() const {
    return predicate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *predicate_as_FloatImm() const {
    return predicate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::StringImm *predicate_as_StringImm() const {
    return predicate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Cast *predicate_as_Cast() const {
    return predicate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *predicate_as_Reinterpret() const {
    return predicate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Add *predicate_as_Add() const {
    return predicate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Sub *predicate_as_Sub() const {
    return predicate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mul *predicate_as_Mul() const {
    return predicate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Div *predicate_as_Div() const {
    return predicate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mod *predicate_as_Mod() const {
    return predicate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Min *predicate_as_Min() const {
    return predicate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Max *predicate_as_Max() const {
    return predicate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(predicate()) : nullptr;
  }
  const Halide::Serialize::EQ *predicate_as_EQ() const {
    return predicate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(predicate()) : nullptr;
  }
  const Halide::Serialize::NE *predicate_as_NE() const {
    return predicate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LT *predicate_as_LT() const {
    return predicate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LE *predicate_as_LE() const {
    return predicate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GT *predicate_as_GT() const {
    return predicate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GE *predicate_as_GE() const {
    return predicate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::And *predicate_as_And() const {
    return predicate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Or *predicate_as_Or() const {
    return predicate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Not *predicate_as_Not() const {
    return predicate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Select *predicate_as_Select() const {
    return predicate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Load *predicate_as_Load() const {
    return predicate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Ramp *predicate_as_Ramp() const {
    return predicate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *predicate_as_Broadcast() const {
    return predicate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Let *predicate_as_Let() const {
    return predicate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Call *predicate_as_Call() const {
    return predicate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Variable *predicate_as_Variable() const {
    return predicate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *predicate_as_Shuffle() const {
    return predicate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(predicate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *predicate_as_VectorReduce() const {
    return predicate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *predicate_as_UndefinedExpr() const {
    return predicate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(predicate()) : nullptr;
  }
  bool frozen() const {
    return GetField<uint8_t>(VT_FROZEN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DEFINED, 1) &&
           VerifyOffset(verifier, VT_DOMAIN) &&
           verifier.VerifyVector(domain()) &&
           verifier.VerifyVectorOfTables(domain()) &&
           VerifyField<uint8_t>(verifier, VT_PREDICATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PREDICATE) &&
           VerifyExpr(verifier, predicate(), predicate_type()) &&
           VerifyField<uint8_t>(verifier, VT_FROZEN, 1) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *ReductionDomain::predicate_as<Halide::Serialize::IntImm>() const {
  return predicate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *ReductionDomain::predicate_as<Halide::Serialize::UIntImm>() const {
  return predicate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *ReductionDomain::predicate_as<Halide::Serialize::FloatImm>() const {
  return predicate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *ReductionDomain::predicate_as<Halide::Serialize::StringImm>() const {
  return predicate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *ReductionDomain::predicate_as<Halide::Serialize::Cast>() const {
  return predicate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *ReductionDomain::predicate_as<Halide::Serialize::Reinterpret>() const {
  return predicate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *ReductionDomain::predicate_as<Halide::Serialize::Add>() const {
  return predicate_as_Add();
}

template<> inline const Halide::Serialize::Sub *ReductionDomain::predicate_as<Halide::Serialize::Sub>() const {
  return predicate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *ReductionDomain::predicate_as<Halide::Serialize::Mul>() const {
  return predicate_as_Mul();
}

template<> inline const Halide::Serialize::Div *ReductionDomain::predicate_as<Halide::Serialize::Div>() const {
  return predicate_as_Div();
}

template<> inline const Halide::Serialize::Mod *ReductionDomain::predicate_as<Halide::Serialize::Mod>() const {
  return predicate_as_Mod();
}

template<> inline const Halide::Serialize::Min *ReductionDomain::predicate_as<Halide::Serialize::Min>() const {
  return predicate_as_Min();
}

template<> inline const Halide::Serialize::Max *ReductionDomain::predicate_as<Halide::Serialize::Max>() const {
  return predicate_as_Max();
}

template<> inline const Halide::Serialize::EQ *ReductionDomain::predicate_as<Halide::Serialize::EQ>() const {
  return predicate_as_EQ();
}

template<> inline const Halide::Serialize::NE *ReductionDomain::predicate_as<Halide::Serialize::NE>() const {
  return predicate_as_NE();
}

template<> inline const Halide::Serialize::LT *ReductionDomain::predicate_as<Halide::Serialize::LT>() const {
  return predicate_as_LT();
}

template<> inline const Halide::Serialize::LE *ReductionDomain::predicate_as<Halide::Serialize::LE>() const {
  return predicate_as_LE();
}

template<> inline const Halide::Serialize::GT *ReductionDomain::predicate_as<Halide::Serialize::GT>() const {
  return predicate_as_GT();
}

template<> inline const Halide::Serialize::GE *ReductionDomain::predicate_as<Halide::Serialize::GE>() const {
  return predicate_as_GE();
}

template<> inline const Halide::Serialize::And *ReductionDomain::predicate_as<Halide::Serialize::And>() const {
  return predicate_as_And();
}

template<> inline const Halide::Serialize::Or *ReductionDomain::predicate_as<Halide::Serialize::Or>() const {
  return predicate_as_Or();
}

template<> inline const Halide::Serialize::Not *ReductionDomain::predicate_as<Halide::Serialize::Not>() const {
  return predicate_as_Not();
}

template<> inline const Halide::Serialize::Select *ReductionDomain::predicate_as<Halide::Serialize::Select>() const {
  return predicate_as_Select();
}

template<> inline const Halide::Serialize::Load *ReductionDomain::predicate_as<Halide::Serialize::Load>() const {
  return predicate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *ReductionDomain::predicate_as<Halide::Serialize::Ramp>() const {
  return predicate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *ReductionDomain::predicate_as<Halide::Serialize::Broadcast>() const {
  return predicate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *ReductionDomain::predicate_as<Halide::Serialize::Let>() const {
  return predicate_as_Let();
}

template<> inline const Halide::Serialize::Call *ReductionDomain::predicate_as<Halide::Serialize::Call>() const {
  return predicate_as_Call();
}

template<> inline const Halide::Serialize::Variable *ReductionDomain::predicate_as<Halide::Serialize::Variable>() const {
  return predicate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *ReductionDomain::predicate_as<Halide::Serialize::Shuffle>() const {
  return predicate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *ReductionDomain::predicate_as<Halide::Serialize::VectorReduce>() const {
  return predicate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *ReductionDomain::predicate_as<Halide::Serialize::UndefinedExpr>() const {
  return predicate_as_UndefinedExpr();
}

struct ReductionDomainBuilder {
  typedef ReductionDomain Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_defined(bool defined) {
    fbb_.AddElement<uint8_t>(ReductionDomain::VT_DEFINED, static_cast<uint8_t>(defined), 0);
  }
  void add_domain(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>> domain) {
    fbb_.AddOffset(ReductionDomain::VT_DOMAIN, domain);
  }
  void add_predicate_type(Halide::Serialize::Expr predicate_type) {
    fbb_.AddElement<uint8_t>(ReductionDomain::VT_PREDICATE_TYPE, static_cast<uint8_t>(predicate_type), 0);
  }
  void add_predicate(::flatbuffers::Offset<void> predicate) {
    fbb_.AddOffset(ReductionDomain::VT_PREDICATE, predicate);
  }
  void add_frozen(bool frozen) {
    fbb_.AddElement<uint8_t>(ReductionDomain::VT_FROZEN, static_cast<uint8_t>(frozen), 0);
  }
  explicit ReductionDomainBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ReductionDomain> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ReductionDomain>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ReductionDomain> CreateReductionDomain(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>> domain = 0,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    bool frozen = false) {
  ReductionDomainBuilder builder_(_fbb);
  builder_.add_predicate(predicate);
  builder_.add_domain(domain);
  builder_.add_frozen(frozen);
  builder_.add_predicate_type(predicate_type);
  builder_.add_defined(defined);
  return builder_.Finish();
}

struct ReductionDomain::Traits {
  using type = ReductionDomain;
  static auto constexpr Create = CreateReductionDomain;
};

inline ::flatbuffers::Offset<ReductionDomain> CreateReductionDomainDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *domain = nullptr,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    bool frozen = false) {
  auto domain__ = domain ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>(*domain) : 0;
  return Halide::Serialize::CreateReductionDomain(
      _fbb,
      defined,
      domain__,
      predicate_type,
      predicate,
      frozen);
}

struct Variable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VariableBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6,
    VT_PARAM_NAME = 8,
    VT_IMAGE_NAME = 10,
    VT_REDUCTION_DOMAIN = 12
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  const ::flatbuffers::String *param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAM_NAME);
  }
  const ::flatbuffers::String *image_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGE_NAME);
  }
  const Halide::Serialize::ReductionDomain *reduction_domain() const {
    return GetPointer<const Halide::Serialize::ReductionDomain *>(VT_REDUCTION_DOMAIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyOffset(verifier, VT_PARAM_NAME) &&
           verifier.VerifyString(param_name()) &&
           VerifyOffset(verifier, VT_IMAGE_NAME) &&
           verifier.VerifyString(image_name()) &&
           VerifyOffset(verifier, VT_REDUCTION_DOMAIN) &&
           verifier.VerifyTable(reduction_domain()) &&
           verifier.EndTable();
  }
};

struct VariableBuilder {
  typedef Variable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Variable::VT_NAME, name);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Variable::VT_TYPE, type);
  }
  void add_param_name(::flatbuffers::Offset<::flatbuffers::String> param_name) {
    fbb_.AddOffset(Variable::VT_PARAM_NAME, param_name);
  }
  void add_image_name(::flatbuffers::Offset<::flatbuffers::String> image_name) {
    fbb_.AddOffset(Variable::VT_IMAGE_NAME, image_name);
  }
  void add_reduction_domain(::flatbuffers::Offset<Halide::Serialize::ReductionDomain> reduction_domain) {
    fbb_.AddOffset(Variable::VT_REDUCTION_DOMAIN, reduction_domain);
  }
  explicit VariableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Variable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Variable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Variable> CreateVariable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> param_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> image_name = 0,
    ::flatbuffers::Offset<Halide::Serialize::ReductionDomain> reduction_domain = 0) {
  VariableBuilder builder_(_fbb);
  builder_.add_reduction_domain(reduction_domain);
  builder_.add_image_name(image_name);
  builder_.add_param_name(param_name);
  builder_.add_type(type);
  builder_.add_name(name);
  return builder_.Finish();
}

struct Variable::Traits {
  using type = Variable;
  static auto constexpr Create = CreateVariable;
};

inline ::flatbuffers::Offset<Variable> CreateVariableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    const char *param_name = nullptr,
    const char *image_name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::ReductionDomain> reduction_domain = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto param_name__ = param_name ? _fbb.CreateString(param_name) : 0;
  auto image_name__ = image_name ? _fbb.CreateString(image_name) : 0;
  return Halide::Serialize::CreateVariable(
      _fbb,
      name__,
      type,
      param_name__,
      image_name__,
      reduction_domain);
}

struct Shuffle FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ShuffleBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VECTORS_TYPE = 4,
    VT_VECTORS = 6,
    VT_INDICES = 8
  };
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *vectors_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_VECTORS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *vectors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_VECTORS);
  }
  const ::flatbuffers::Vector<int32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VECTORS_TYPE) &&
           verifier.VerifyVector(vectors_type()) &&
           VerifyOffset(verifier, VT_VECTORS) &&
           verifier.VerifyVector(vectors()) &&
           VerifyExprVector(verifier, vectors(), vectors_type()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct ShuffleBuilder {
  typedef Shuffle Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vectors_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> vectors_type) {
    fbb_.AddOffset(Shuffle::VT_VECTORS_TYPE, vectors_type);
  }
  void add_vectors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> vectors) {
    fbb_.AddOffset(Shuffle::VT_VECTORS, vectors);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> indices) {
    fbb_.AddOffset(Shuffle::VT_INDICES, indices);
  }
  explicit ShuffleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Shuffle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Shuffle>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Shuffle> CreateShuffle(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> vectors_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> vectors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> indices = 0) {
  ShuffleBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vectors(vectors);
  builder_.add_vectors_type(vectors_type);
  return builder_.Finish();
}

struct Shuffle::Traits {
  using type = Shuffle;
  static auto constexpr Create = CreateShuffle;
};

inline ::flatbuffers::Offset<Shuffle> CreateShuffleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Halide::Serialize::Expr> *vectors_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *vectors = nullptr,
    const std::vector<int32_t> *indices = nullptr) {
  auto vectors_type__ = vectors_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*vectors_type) : 0;
  auto vectors__ = vectors ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*vectors) : 0;
  auto indices__ = indices ? _fbb.CreateVector<int32_t>(*indices) : 0;
  return Halide::Serialize::CreateShuffle(
      _fbb,
      vectors_type__,
      vectors__,
      indices__);
}

struct VectorReduce FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VectorReduceBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE_TYPE = 4,
    VT_VALUE = 6,
    VT_REDUCTION_OP = 8,
    VT_LANES = 10
  };
  Halide::Serialize::Expr value_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const Halide::Serialize::IntImm *value_as_IntImm() const {
    return value_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::UIntImm *value_as_UIntImm() const {
    return value_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(value()) : nullptr;
  }
  const Halide::Serialize::FloatImm *value_as_FloatImm() const {
    return value_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(value()) : nullptr;
  }
  const Halide::Serialize::StringImm *value_as_StringImm() const {
    return value_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(value()) : nullptr;
  }
  const Halide::Serialize::Cast *value_as_Cast() const {
    return value_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(value()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *value_as_Reinterpret() const {
    return value_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(value()) : nullptr;
  }
  const Halide::Serialize::Add *value_as_Add() const {
    return value_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(value()) : nullptr;
  }
  const Halide::Serialize::Sub *value_as_Sub() const {
    return value_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(value()) : nullptr;
  }
  const Halide::Serialize::Mul *value_as_Mul() const {
    return value_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(value()) : nullptr;
  }
  const Halide::Serialize::Div *value_as_Div() const {
    return value_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(value()) : nullptr;
  }
  const Halide::Serialize::Mod *value_as_Mod() const {
    return value_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(value()) : nullptr;
  }
  const Halide::Serialize::Min *value_as_Min() const {
    return value_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(value()) : nullptr;
  }
  const Halide::Serialize::Max *value_as_Max() const {
    return value_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(value()) : nullptr;
  }
  const Halide::Serialize::EQ *value_as_EQ() const {
    return value_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(value()) : nullptr;
  }
  const Halide::Serialize::NE *value_as_NE() const {
    return value_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(value()) : nullptr;
  }
  const Halide::Serialize::LT *value_as_LT() const {
    return value_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(value()) : nullptr;
  }
  const Halide::Serialize::LE *value_as_LE() const {
    return value_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(value()) : nullptr;
  }
  const Halide::Serialize::GT *value_as_GT() const {
    return value_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(value()) : nullptr;
  }
  const Halide::Serialize::GE *value_as_GE() const {
    return value_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(value()) : nullptr;
  }
  const Halide::Serialize::And *value_as_And() const {
    return value_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(value()) : nullptr;
  }
  const Halide::Serialize::Or *value_as_Or() const {
    return value_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(value()) : nullptr;
  }
  const Halide::Serialize::Not *value_as_Not() const {
    return value_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(value()) : nullptr;
  }
  const Halide::Serialize::Select *value_as_Select() const {
    return value_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(value()) : nullptr;
  }
  const Halide::Serialize::Load *value_as_Load() const {
    return value_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(value()) : nullptr;
  }
  const Halide::Serialize::Ramp *value_as_Ramp() const {
    return value_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(value()) : nullptr;
  }
  const Halide::Serialize::Broadcast *value_as_Broadcast() const {
    return value_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(value()) : nullptr;
  }
  const Halide::Serialize::Let *value_as_Let() const {
    return value_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(value()) : nullptr;
  }
  const Halide::Serialize::Call *value_as_Call() const {
    return value_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(value()) : nullptr;
  }
  const Halide::Serialize::Variable *value_as_Variable() const {
    return value_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(value()) : nullptr;
  }
  const Halide::Serialize::Shuffle *value_as_Shuffle() const {
    return value_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(value()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *value_as_VectorReduce() const {
    return value_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(value()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *value_as_UndefinedExpr() const {
    return value_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(value()) : nullptr;
  }
  Halide::Serialize::VectorReduceOp reduction_op() const {
    return static_cast<Halide::Serialize::VectorReduceOp>(GetField<uint8_t>(VT_REDUCTION_OP, 0));
  }
  int32_t lanes() const {
    return GetField<int32_t>(VT_LANES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyExpr(verifier, value(), value_type()) &&
           VerifyField<uint8_t>(verifier, VT_REDUCTION_OP, 1) &&
           VerifyField<int32_t>(verifier, VT_LANES, 4) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *VectorReduce::value_as<Halide::Serialize::IntImm>() const {
  return value_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *VectorReduce::value_as<Halide::Serialize::UIntImm>() const {
  return value_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *VectorReduce::value_as<Halide::Serialize::FloatImm>() const {
  return value_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *VectorReduce::value_as<Halide::Serialize::StringImm>() const {
  return value_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *VectorReduce::value_as<Halide::Serialize::Cast>() const {
  return value_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *VectorReduce::value_as<Halide::Serialize::Reinterpret>() const {
  return value_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *VectorReduce::value_as<Halide::Serialize::Add>() const {
  return value_as_Add();
}

template<> inline const Halide::Serialize::Sub *VectorReduce::value_as<Halide::Serialize::Sub>() const {
  return value_as_Sub();
}

template<> inline const Halide::Serialize::Mul *VectorReduce::value_as<Halide::Serialize::Mul>() const {
  return value_as_Mul();
}

template<> inline const Halide::Serialize::Div *VectorReduce::value_as<Halide::Serialize::Div>() const {
  return value_as_Div();
}

template<> inline const Halide::Serialize::Mod *VectorReduce::value_as<Halide::Serialize::Mod>() const {
  return value_as_Mod();
}

template<> inline const Halide::Serialize::Min *VectorReduce::value_as<Halide::Serialize::Min>() const {
  return value_as_Min();
}

template<> inline const Halide::Serialize::Max *VectorReduce::value_as<Halide::Serialize::Max>() const {
  return value_as_Max();
}

template<> inline const Halide::Serialize::EQ *VectorReduce::value_as<Halide::Serialize::EQ>() const {
  return value_as_EQ();
}

template<> inline const Halide::Serialize::NE *VectorReduce::value_as<Halide::Serialize::NE>() const {
  return value_as_NE();
}

template<> inline const Halide::Serialize::LT *VectorReduce::value_as<Halide::Serialize::LT>() const {
  return value_as_LT();
}

template<> inline const Halide::Serialize::LE *VectorReduce::value_as<Halide::Serialize::LE>() const {
  return value_as_LE();
}

template<> inline const Halide::Serialize::GT *VectorReduce::value_as<Halide::Serialize::GT>() const {
  return value_as_GT();
}

template<> inline const Halide::Serialize::GE *VectorReduce::value_as<Halide::Serialize::GE>() const {
  return value_as_GE();
}

template<> inline const Halide::Serialize::And *VectorReduce::value_as<Halide::Serialize::And>() const {
  return value_as_And();
}

template<> inline const Halide::Serialize::Or *VectorReduce::value_as<Halide::Serialize::Or>() const {
  return value_as_Or();
}

template<> inline const Halide::Serialize::Not *VectorReduce::value_as<Halide::Serialize::Not>() const {
  return value_as_Not();
}

template<> inline const Halide::Serialize::Select *VectorReduce::value_as<Halide::Serialize::Select>() const {
  return value_as_Select();
}

template<> inline const Halide::Serialize::Load *VectorReduce::value_as<Halide::Serialize::Load>() const {
  return value_as_Load();
}

template<> inline const Halide::Serialize::Ramp *VectorReduce::value_as<Halide::Serialize::Ramp>() const {
  return value_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *VectorReduce::value_as<Halide::Serialize::Broadcast>() const {
  return value_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *VectorReduce::value_as<Halide::Serialize::Let>() const {
  return value_as_Let();
}

template<> inline const Halide::Serialize::Call *VectorReduce::value_as<Halide::Serialize::Call>() const {
  return value_as_Call();
}

template<> inline const Halide::Serialize::Variable *VectorReduce::value_as<Halide::Serialize::Variable>() const {
  return value_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *VectorReduce::value_as<Halide::Serialize::Shuffle>() const {
  return value_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *VectorReduce::value_as<Halide::Serialize::VectorReduce>() const {
  return value_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *VectorReduce::value_as<Halide::Serialize::UndefinedExpr>() const {
  return value_as_UndefinedExpr();
}

struct VectorReduceBuilder {
  typedef VectorReduce Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value_type(Halide::Serialize::Expr value_type) {
    fbb_.AddElement<uint8_t>(VectorReduce::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(::flatbuffers::Offset<void> value) {
    fbb_.AddOffset(VectorReduce::VT_VALUE, value);
  }
  void add_reduction_op(Halide::Serialize::VectorReduceOp reduction_op) {
    fbb_.AddElement<uint8_t>(VectorReduce::VT_REDUCTION_OP, static_cast<uint8_t>(reduction_op), 0);
  }
  void add_lanes(int32_t lanes) {
    fbb_.AddElement<int32_t>(VectorReduce::VT_LANES, lanes, 0);
  }
  explicit VectorReduceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VectorReduce> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VectorReduce>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VectorReduce> CreateVectorReduce(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr value_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> value = 0,
    Halide::Serialize::VectorReduceOp reduction_op = Halide::Serialize::VectorReduceOp::Add,
    int32_t lanes = 0) {
  VectorReduceBuilder builder_(_fbb);
  builder_.add_lanes(lanes);
  builder_.add_value(value);
  builder_.add_reduction_op(reduction_op);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

struct VectorReduce::Traits {
  using type = VectorReduce;
  static auto constexpr Create = CreateVectorReduce;
};

struct UndefinedExpr FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UndefinedExprBuilder Builder;
  struct Traits;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UndefinedExprBuilder {
  typedef UndefinedExpr Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit UndefinedExprBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UndefinedExpr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UndefinedExpr>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UndefinedExpr> CreateUndefinedExpr(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  UndefinedExprBuilder builder_(_fbb);
  return builder_.Finish();
}

struct UndefinedExpr::Traits {
  using type = UndefinedExpr;
  static auto constexpr Create = CreateUndefinedExpr;
};

struct Type FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TypeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_BITS = 6,
    VT_LANES = 8
  };
  Halide::Serialize::TypeCode code() const {
    return static_cast<Halide::Serialize::TypeCode>(GetField<int8_t>(VT_CODE, 0));
  }
  uint8_t bits() const {
    return GetField<uint8_t>(VT_BITS, 0);
  }
  int32_t lanes() const {
    return GetField<int32_t>(VT_LANES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CODE, 1) &&
           VerifyField<uint8_t>(verifier, VT_BITS, 1) &&
           VerifyField<int32_t>(verifier, VT_LANES, 4) &&
           verifier.EndTable();
  }
};

struct TypeBuilder {
  typedef Type Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(Halide::Serialize::TypeCode code) {
    fbb_.AddElement<int8_t>(Type::VT_CODE, static_cast<int8_t>(code), 0);
  }
  void add_bits(uint8_t bits) {
    fbb_.AddElement<uint8_t>(Type::VT_BITS, bits, 0);
  }
  void add_lanes(int32_t lanes) {
    fbb_.AddElement<int32_t>(Type::VT_LANES, lanes, 0);
  }
  explicit TypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Type> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Type>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Type> CreateType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::TypeCode code = Halide::Serialize::TypeCode::Int,
    uint8_t bits = 0,
    int32_t lanes = 0) {
  TypeBuilder builder_(_fbb);
  builder_.add_lanes(lanes);
  builder_.add_bits(bits);
  builder_.add_code(code);
  return builder_.Finish();
}

struct Type::Traits {
  using type = Type;
  static auto constexpr Create = CreateType;
};

struct Bound FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoundBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR = 4,
    VT_MIN_TYPE = 6,
    VT_MIN = 8,
    VT_EXTENT_TYPE = 10,
    VT_EXTENT = 12,
    VT_MODULUS_TYPE = 14,
    VT_MODULUS = 16,
    VT_REMAINDER_TYPE = 18,
    VT_REMAINDER = 20
  };
  const ::flatbuffers::String *var() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR);
  }
  Halide::Serialize::Expr min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_TYPE, 0));
  }
  const void *min() const {
    return GetPointer<const void *>(VT_MIN);
  }
  template<typename T> const T *min_as() const;
  const Halide::Serialize::IntImm *min_as_IntImm() const {
    return min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_as_UIntImm() const {
    return min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_as_FloatImm() const {
    return min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_as_StringImm() const {
    return min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min()) : nullptr;
  }
  const Halide::Serialize::Cast *min_as_Cast() const {
    return min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_as_Reinterpret() const {
    return min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min()) : nullptr;
  }
  const Halide::Serialize::Add *min_as_Add() const {
    return min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min()) : nullptr;
  }
  const Halide::Serialize::Sub *min_as_Sub() const {
    return min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min()) : nullptr;
  }
  const Halide::Serialize::Mul *min_as_Mul() const {
    return min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min()) : nullptr;
  }
  const Halide::Serialize::Div *min_as_Div() const {
    return min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min()) : nullptr;
  }
  const Halide::Serialize::Mod *min_as_Mod() const {
    return min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min()) : nullptr;
  }
  const Halide::Serialize::Min *min_as_Min() const {
    return min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min()) : nullptr;
  }
  const Halide::Serialize::Max *min_as_Max() const {
    return min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min()) : nullptr;
  }
  const Halide::Serialize::EQ *min_as_EQ() const {
    return min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min()) : nullptr;
  }
  const Halide::Serialize::NE *min_as_NE() const {
    return min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min()) : nullptr;
  }
  const Halide::Serialize::LT *min_as_LT() const {
    return min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min()) : nullptr;
  }
  const Halide::Serialize::LE *min_as_LE() const {
    return min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min()) : nullptr;
  }
  const Halide::Serialize::GT *min_as_GT() const {
    return min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min()) : nullptr;
  }
  const Halide::Serialize::GE *min_as_GE() const {
    return min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min()) : nullptr;
  }
  const Halide::Serialize::And *min_as_And() const {
    return min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min()) : nullptr;
  }
  const Halide::Serialize::Or *min_as_Or() const {
    return min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min()) : nullptr;
  }
  const Halide::Serialize::Not *min_as_Not() const {
    return min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min()) : nullptr;
  }
  const Halide::Serialize::Select *min_as_Select() const {
    return min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min()) : nullptr;
  }
  const Halide::Serialize::Load *min_as_Load() const {
    return min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_as_Ramp() const {
    return min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_as_Broadcast() const {
    return min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min()) : nullptr;
  }
  const Halide::Serialize::Let *min_as_Let() const {
    return min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min()) : nullptr;
  }
  const Halide::Serialize::Call *min_as_Call() const {
    return min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min()) : nullptr;
  }
  const Halide::Serialize::Variable *min_as_Variable() const {
    return min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_as_Shuffle() const {
    return min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_as_VectorReduce() const {
    return min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_as_UndefinedExpr() const {
    return min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min()) : nullptr;
  }
  Halide::Serialize::Expr extent_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_TYPE, 0));
  }
  const void *extent() const {
    return GetPointer<const void *>(VT_EXTENT);
  }
  template<typename T> const T *extent_as() const;
  const Halide::Serialize::IntImm *extent_as_IntImm() const {
    return extent_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_as_UIntImm() const {
    return extent_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_as_FloatImm() const {
    return extent_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_as_StringImm() const {
    return extent_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_as_Cast() const {
    return extent_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_as_Reinterpret() const {
    return extent_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent()) : nullptr;
  }
  const Halide::Serialize::Add *extent_as_Add() const {
    return extent_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_as_Sub() const {
    return extent_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_as_Mul() const {
    return extent_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent()) : nullptr;
  }
  const Halide::Serialize::Div *extent_as_Div() const {
    return extent_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_as_Mod() const {
    return extent_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent()) : nullptr;
  }
  const Halide::Serialize::Min *extent_as_Min() const {
    return extent_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent()) : nullptr;
  }
  const Halide::Serialize::Max *extent_as_Max() const {
    return extent_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_as_EQ() const {
    return extent_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent()) : nullptr;
  }
  const Halide::Serialize::NE *extent_as_NE() const {
    return extent_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent()) : nullptr;
  }
  const Halide::Serialize::LT *extent_as_LT() const {
    return extent_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent()) : nullptr;
  }
  const Halide::Serialize::LE *extent_as_LE() const {
    return extent_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent()) : nullptr;
  }
  const Halide::Serialize::GT *extent_as_GT() const {
    return extent_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent()) : nullptr;
  }
  const Halide::Serialize::GE *extent_as_GE() const {
    return extent_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent()) : nullptr;
  }
  const Halide::Serialize::And *extent_as_And() const {
    return extent_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent()) : nullptr;
  }
  const Halide::Serialize::Or *extent_as_Or() const {
    return extent_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent()) : nullptr;
  }
  const Halide::Serialize::Not *extent_as_Not() const {
    return extent_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent()) : nullptr;
  }
  const Halide::Serialize::Select *extent_as_Select() const {
    return extent_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent()) : nullptr;
  }
  const Halide::Serialize::Load *extent_as_Load() const {
    return extent_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_as_Ramp() const {
    return extent_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_as_Broadcast() const {
    return extent_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Let *extent_as_Let() const {
    return extent_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent()) : nullptr;
  }
  const Halide::Serialize::Call *extent_as_Call() const {
    return extent_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_as_Variable() const {
    return extent_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_as_Shuffle() const {
    return extent_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_as_VectorReduce() const {
    return extent_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_as_UndefinedExpr() const {
    return extent_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent()) : nullptr;
  }
  Halide::Serialize::Expr modulus_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MODULUS_TYPE, 0));
  }
  const void *modulus() const {
    return GetPointer<const void *>(VT_MODULUS);
  }
  template<typename T> const T *modulus_as() const;
  const Halide::Serialize::IntImm *modulus_as_IntImm() const {
    return modulus_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(modulus()) : nullptr;
  }
  const Halide::Serialize::UIntImm *modulus_as_UIntImm() const {
    return modulus_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(modulus()) : nullptr;
  }
  const Halide::Serialize::FloatImm *modulus_as_FloatImm() const {
    return modulus_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(modulus()) : nullptr;
  }
  const Halide::Serialize::StringImm *modulus_as_StringImm() const {
    return modulus_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Cast *modulus_as_Cast() const {
    return modulus_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *modulus_as_Reinterpret() const {
    return modulus_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Add *modulus_as_Add() const {
    return modulus_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Sub *modulus_as_Sub() const {
    return modulus_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Mul *modulus_as_Mul() const {
    return modulus_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Div *modulus_as_Div() const {
    return modulus_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Mod *modulus_as_Mod() const {
    return modulus_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Min *modulus_as_Min() const {
    return modulus_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Max *modulus_as_Max() const {
    return modulus_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(modulus()) : nullptr;
  }
  const Halide::Serialize::EQ *modulus_as_EQ() const {
    return modulus_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(modulus()) : nullptr;
  }
  const Halide::Serialize::NE *modulus_as_NE() const {
    return modulus_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(modulus()) : nullptr;
  }
  const Halide::Serialize::LT *modulus_as_LT() const {
    return modulus_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(modulus()) : nullptr;
  }
  const Halide::Serialize::LE *modulus_as_LE() const {
    return modulus_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(modulus()) : nullptr;
  }
  const Halide::Serialize::GT *modulus_as_GT() const {
    return modulus_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(modulus()) : nullptr;
  }
  const Halide::Serialize::GE *modulus_as_GE() const {
    return modulus_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(modulus()) : nullptr;
  }
  const Halide::Serialize::And *modulus_as_And() const {
    return modulus_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Or *modulus_as_Or() const {
    return modulus_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Not *modulus_as_Not() const {
    return modulus_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Select *modulus_as_Select() const {
    return modulus_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Load *modulus_as_Load() const {
    return modulus_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Ramp *modulus_as_Ramp() const {
    return modulus_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Broadcast *modulus_as_Broadcast() const {
    return modulus_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Let *modulus_as_Let() const {
    return modulus_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Call *modulus_as_Call() const {
    return modulus_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Variable *modulus_as_Variable() const {
    return modulus_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(modulus()) : nullptr;
  }
  const Halide::Serialize::Shuffle *modulus_as_Shuffle() const {
    return modulus_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(modulus()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *modulus_as_VectorReduce() const {
    return modulus_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(modulus()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *modulus_as_UndefinedExpr() const {
    return modulus_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(modulus()) : nullptr;
  }
  Halide::Serialize::Expr remainder_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_REMAINDER_TYPE, 0));
  }
  const void *remainder() const {
    return GetPointer<const void *>(VT_REMAINDER);
  }
  template<typename T> const T *remainder_as() const;
  const Halide::Serialize::IntImm *remainder_as_IntImm() const {
    return remainder_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(remainder()) : nullptr;
  }
  const Halide::Serialize::UIntImm *remainder_as_UIntImm() const {
    return remainder_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(remainder()) : nullptr;
  }
  const Halide::Serialize::FloatImm *remainder_as_FloatImm() const {
    return remainder_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(remainder()) : nullptr;
  }
  const Halide::Serialize::StringImm *remainder_as_StringImm() const {
    return remainder_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Cast *remainder_as_Cast() const {
    return remainder_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *remainder_as_Reinterpret() const {
    return remainder_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Add *remainder_as_Add() const {
    return remainder_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Sub *remainder_as_Sub() const {
    return remainder_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Mul *remainder_as_Mul() const {
    return remainder_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Div *remainder_as_Div() const {
    return remainder_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Mod *remainder_as_Mod() const {
    return remainder_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Min *remainder_as_Min() const {
    return remainder_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Max *remainder_as_Max() const {
    return remainder_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(remainder()) : nullptr;
  }
  const Halide::Serialize::EQ *remainder_as_EQ() const {
    return remainder_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(remainder()) : nullptr;
  }
  const Halide::Serialize::NE *remainder_as_NE() const {
    return remainder_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(remainder()) : nullptr;
  }
  const Halide::Serialize::LT *remainder_as_LT() const {
    return remainder_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(remainder()) : nullptr;
  }
  const Halide::Serialize::LE *remainder_as_LE() const {
    return remainder_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(remainder()) : nullptr;
  }
  const Halide::Serialize::GT *remainder_as_GT() const {
    return remainder_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(remainder()) : nullptr;
  }
  const Halide::Serialize::GE *remainder_as_GE() const {
    return remainder_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(remainder()) : nullptr;
  }
  const Halide::Serialize::And *remainder_as_And() const {
    return remainder_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Or *remainder_as_Or() const {
    return remainder_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Not *remainder_as_Not() const {
    return remainder_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Select *remainder_as_Select() const {
    return remainder_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Load *remainder_as_Load() const {
    return remainder_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Ramp *remainder_as_Ramp() const {
    return remainder_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Broadcast *remainder_as_Broadcast() const {
    return remainder_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Let *remainder_as_Let() const {
    return remainder_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Call *remainder_as_Call() const {
    return remainder_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Variable *remainder_as_Variable() const {
    return remainder_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(remainder()) : nullptr;
  }
  const Halide::Serialize::Shuffle *remainder_as_Shuffle() const {
    return remainder_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(remainder()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *remainder_as_VectorReduce() const {
    return remainder_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(remainder()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *remainder_as_UndefinedExpr() const {
    return remainder_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(remainder()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR) &&
           verifier.VerifyString(var()) &&
           VerifyField<uint8_t>(verifier, VT_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN) &&
           VerifyExpr(verifier, min(), min_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT) &&
           VerifyExpr(verifier, extent(), extent_type()) &&
           VerifyField<uint8_t>(verifier, VT_MODULUS_TYPE, 1) &&
           VerifyOffset(verifier, VT_MODULUS) &&
           VerifyExpr(verifier, modulus(), modulus_type()) &&
           VerifyField<uint8_t>(verifier, VT_REMAINDER_TYPE, 1) &&
           VerifyOffset(verifier, VT_REMAINDER) &&
           VerifyExpr(verifier, remainder(), remainder_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Bound::min_as<Halide::Serialize::IntImm>() const {
  return min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Bound::min_as<Halide::Serialize::UIntImm>() const {
  return min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Bound::min_as<Halide::Serialize::FloatImm>() const {
  return min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Bound::min_as<Halide::Serialize::StringImm>() const {
  return min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Bound::min_as<Halide::Serialize::Cast>() const {
  return min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Bound::min_as<Halide::Serialize::Reinterpret>() const {
  return min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Bound::min_as<Halide::Serialize::Add>() const {
  return min_as_Add();
}

template<> inline const Halide::Serialize::Sub *Bound::min_as<Halide::Serialize::Sub>() const {
  return min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Bound::min_as<Halide::Serialize::Mul>() const {
  return min_as_Mul();
}

template<> inline const Halide::Serialize::Div *Bound::min_as<Halide::Serialize::Div>() const {
  return min_as_Div();
}

template<> inline const Halide::Serialize::Mod *Bound::min_as<Halide::Serialize::Mod>() const {
  return min_as_Mod();
}

template<> inline const Halide::Serialize::Min *Bound::min_as<Halide::Serialize::Min>() const {
  return min_as_Min();
}

template<> inline const Halide::Serialize::Max *Bound::min_as<Halide::Serialize::Max>() const {
  return min_as_Max();
}

template<> inline const Halide::Serialize::EQ *Bound::min_as<Halide::Serialize::EQ>() const {
  return min_as_EQ();
}

template<> inline const Halide::Serialize::NE *Bound::min_as<Halide::Serialize::NE>() const {
  return min_as_NE();
}

template<> inline const Halide::Serialize::LT *Bound::min_as<Halide::Serialize::LT>() const {
  return min_as_LT();
}

template<> inline const Halide::Serialize::LE *Bound::min_as<Halide::Serialize::LE>() const {
  return min_as_LE();
}

template<> inline const Halide::Serialize::GT *Bound::min_as<Halide::Serialize::GT>() const {
  return min_as_GT();
}

template<> inline const Halide::Serialize::GE *Bound::min_as<Halide::Serialize::GE>() const {
  return min_as_GE();
}

template<> inline const Halide::Serialize::And *Bound::min_as<Halide::Serialize::And>() const {
  return min_as_And();
}

template<> inline const Halide::Serialize::Or *Bound::min_as<Halide::Serialize::Or>() const {
  return min_as_Or();
}

template<> inline const Halide::Serialize::Not *Bound::min_as<Halide::Serialize::Not>() const {
  return min_as_Not();
}

template<> inline const Halide::Serialize::Select *Bound::min_as<Halide::Serialize::Select>() const {
  return min_as_Select();
}

template<> inline const Halide::Serialize::Load *Bound::min_as<Halide::Serialize::Load>() const {
  return min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Bound::min_as<Halide::Serialize::Ramp>() const {
  return min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Bound::min_as<Halide::Serialize::Broadcast>() const {
  return min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Bound::min_as<Halide::Serialize::Let>() const {
  return min_as_Let();
}

template<> inline const Halide::Serialize::Call *Bound::min_as<Halide::Serialize::Call>() const {
  return min_as_Call();
}

template<> inline const Halide::Serialize::Variable *Bound::min_as<Halide::Serialize::Variable>() const {
  return min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Bound::min_as<Halide::Serialize::Shuffle>() const {
  return min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Bound::min_as<Halide::Serialize::VectorReduce>() const {
  return min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Bound::min_as<Halide::Serialize::UndefinedExpr>() const {
  return min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Bound::extent_as<Halide::Serialize::IntImm>() const {
  return extent_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Bound::extent_as<Halide::Serialize::UIntImm>() const {
  return extent_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Bound::extent_as<Halide::Serialize::FloatImm>() const {
  return extent_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Bound::extent_as<Halide::Serialize::StringImm>() const {
  return extent_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Bound::extent_as<Halide::Serialize::Cast>() const {
  return extent_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Bound::extent_as<Halide::Serialize::Reinterpret>() const {
  return extent_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Bound::extent_as<Halide::Serialize::Add>() const {
  return extent_as_Add();
}

template<> inline const Halide::Serialize::Sub *Bound::extent_as<Halide::Serialize::Sub>() const {
  return extent_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Bound::extent_as<Halide::Serialize::Mul>() const {
  return extent_as_Mul();
}

template<> inline const Halide::Serialize::Div *Bound::extent_as<Halide::Serialize::Div>() const {
  return extent_as_Div();
}

template<> inline const Halide::Serialize::Mod *Bound::extent_as<Halide::Serialize::Mod>() const {
  return extent_as_Mod();
}

template<> inline const Halide::Serialize::Min *Bound::extent_as<Halide::Serialize::Min>() const {
  return extent_as_Min();
}

template<> inline const Halide::Serialize::Max *Bound::extent_as<Halide::Serialize::Max>() const {
  return extent_as_Max();
}

template<> inline const Halide::Serialize::EQ *Bound::extent_as<Halide::Serialize::EQ>() const {
  return extent_as_EQ();
}

template<> inline const Halide::Serialize::NE *Bound::extent_as<Halide::Serialize::NE>() const {
  return extent_as_NE();
}

template<> inline const Halide::Serialize::LT *Bound::extent_as<Halide::Serialize::LT>() const {
  return extent_as_LT();
}

template<> inline const Halide::Serialize::LE *Bound::extent_as<Halide::Serialize::LE>() const {
  return extent_as_LE();
}

template<> inline const Halide::Serialize::GT *Bound::extent_as<Halide::Serialize::GT>() const {
  return extent_as_GT();
}

template<> inline const Halide::Serialize::GE *Bound::extent_as<Halide::Serialize::GE>() const {
  return extent_as_GE();
}

template<> inline const Halide::Serialize::And *Bound::extent_as<Halide::Serialize::And>() const {
  return extent_as_And();
}

template<> inline const Halide::Serialize::Or *Bound::extent_as<Halide::Serialize::Or>() const {
  return extent_as_Or();
}

template<> inline const Halide::Serialize::Not *Bound::extent_as<Halide::Serialize::Not>() const {
  return extent_as_Not();
}

template<> inline const Halide::Serialize::Select *Bound::extent_as<Halide::Serialize::Select>() const {
  return extent_as_Select();
}

template<> inline const Halide::Serialize::Load *Bound::extent_as<Halide::Serialize::Load>() const {
  return extent_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Bound::extent_as<Halide::Serialize::Ramp>() const {
  return extent_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Bound::extent_as<Halide::Serialize::Broadcast>() const {
  return extent_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Bound::extent_as<Halide::Serialize::Let>() const {
  return extent_as_Let();
}

template<> inline const Halide::Serialize::Call *Bound::extent_as<Halide::Serialize::Call>() const {
  return extent_as_Call();
}

template<> inline const Halide::Serialize::Variable *Bound::extent_as<Halide::Serialize::Variable>() const {
  return extent_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Bound::extent_as<Halide::Serialize::Shuffle>() const {
  return extent_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Bound::extent_as<Halide::Serialize::VectorReduce>() const {
  return extent_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Bound::extent_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Bound::modulus_as<Halide::Serialize::IntImm>() const {
  return modulus_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Bound::modulus_as<Halide::Serialize::UIntImm>() const {
  return modulus_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Bound::modulus_as<Halide::Serialize::FloatImm>() const {
  return modulus_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Bound::modulus_as<Halide::Serialize::StringImm>() const {
  return modulus_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Bound::modulus_as<Halide::Serialize::Cast>() const {
  return modulus_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Bound::modulus_as<Halide::Serialize::Reinterpret>() const {
  return modulus_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Bound::modulus_as<Halide::Serialize::Add>() const {
  return modulus_as_Add();
}

template<> inline const Halide::Serialize::Sub *Bound::modulus_as<Halide::Serialize::Sub>() const {
  return modulus_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Bound::modulus_as<Halide::Serialize::Mul>() const {
  return modulus_as_Mul();
}

template<> inline const Halide::Serialize::Div *Bound::modulus_as<Halide::Serialize::Div>() const {
  return modulus_as_Div();
}

template<> inline const Halide::Serialize::Mod *Bound::modulus_as<Halide::Serialize::Mod>() const {
  return modulus_as_Mod();
}

template<> inline const Halide::Serialize::Min *Bound::modulus_as<Halide::Serialize::Min>() const {
  return modulus_as_Min();
}

template<> inline const Halide::Serialize::Max *Bound::modulus_as<Halide::Serialize::Max>() const {
  return modulus_as_Max();
}

template<> inline const Halide::Serialize::EQ *Bound::modulus_as<Halide::Serialize::EQ>() const {
  return modulus_as_EQ();
}

template<> inline const Halide::Serialize::NE *Bound::modulus_as<Halide::Serialize::NE>() const {
  return modulus_as_NE();
}

template<> inline const Halide::Serialize::LT *Bound::modulus_as<Halide::Serialize::LT>() const {
  return modulus_as_LT();
}

template<> inline const Halide::Serialize::LE *Bound::modulus_as<Halide::Serialize::LE>() const {
  return modulus_as_LE();
}

template<> inline const Halide::Serialize::GT *Bound::modulus_as<Halide::Serialize::GT>() const {
  return modulus_as_GT();
}

template<> inline const Halide::Serialize::GE *Bound::modulus_as<Halide::Serialize::GE>() const {
  return modulus_as_GE();
}

template<> inline const Halide::Serialize::And *Bound::modulus_as<Halide::Serialize::And>() const {
  return modulus_as_And();
}

template<> inline const Halide::Serialize::Or *Bound::modulus_as<Halide::Serialize::Or>() const {
  return modulus_as_Or();
}

template<> inline const Halide::Serialize::Not *Bound::modulus_as<Halide::Serialize::Not>() const {
  return modulus_as_Not();
}

template<> inline const Halide::Serialize::Select *Bound::modulus_as<Halide::Serialize::Select>() const {
  return modulus_as_Select();
}

template<> inline const Halide::Serialize::Load *Bound::modulus_as<Halide::Serialize::Load>() const {
  return modulus_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Bound::modulus_as<Halide::Serialize::Ramp>() const {
  return modulus_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Bound::modulus_as<Halide::Serialize::Broadcast>() const {
  return modulus_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Bound::modulus_as<Halide::Serialize::Let>() const {
  return modulus_as_Let();
}

template<> inline const Halide::Serialize::Call *Bound::modulus_as<Halide::Serialize::Call>() const {
  return modulus_as_Call();
}

template<> inline const Halide::Serialize::Variable *Bound::modulus_as<Halide::Serialize::Variable>() const {
  return modulus_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Bound::modulus_as<Halide::Serialize::Shuffle>() const {
  return modulus_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Bound::modulus_as<Halide::Serialize::VectorReduce>() const {
  return modulus_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Bound::modulus_as<Halide::Serialize::UndefinedExpr>() const {
  return modulus_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Bound::remainder_as<Halide::Serialize::IntImm>() const {
  return remainder_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Bound::remainder_as<Halide::Serialize::UIntImm>() const {
  return remainder_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Bound::remainder_as<Halide::Serialize::FloatImm>() const {
  return remainder_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Bound::remainder_as<Halide::Serialize::StringImm>() const {
  return remainder_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Bound::remainder_as<Halide::Serialize::Cast>() const {
  return remainder_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Bound::remainder_as<Halide::Serialize::Reinterpret>() const {
  return remainder_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Bound::remainder_as<Halide::Serialize::Add>() const {
  return remainder_as_Add();
}

template<> inline const Halide::Serialize::Sub *Bound::remainder_as<Halide::Serialize::Sub>() const {
  return remainder_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Bound::remainder_as<Halide::Serialize::Mul>() const {
  return remainder_as_Mul();
}

template<> inline const Halide::Serialize::Div *Bound::remainder_as<Halide::Serialize::Div>() const {
  return remainder_as_Div();
}

template<> inline const Halide::Serialize::Mod *Bound::remainder_as<Halide::Serialize::Mod>() const {
  return remainder_as_Mod();
}

template<> inline const Halide::Serialize::Min *Bound::remainder_as<Halide::Serialize::Min>() const {
  return remainder_as_Min();
}

template<> inline const Halide::Serialize::Max *Bound::remainder_as<Halide::Serialize::Max>() const {
  return remainder_as_Max();
}

template<> inline const Halide::Serialize::EQ *Bound::remainder_as<Halide::Serialize::EQ>() const {
  return remainder_as_EQ();
}

template<> inline const Halide::Serialize::NE *Bound::remainder_as<Halide::Serialize::NE>() const {
  return remainder_as_NE();
}

template<> inline const Halide::Serialize::LT *Bound::remainder_as<Halide::Serialize::LT>() const {
  return remainder_as_LT();
}

template<> inline const Halide::Serialize::LE *Bound::remainder_as<Halide::Serialize::LE>() const {
  return remainder_as_LE();
}

template<> inline const Halide::Serialize::GT *Bound::remainder_as<Halide::Serialize::GT>() const {
  return remainder_as_GT();
}

template<> inline const Halide::Serialize::GE *Bound::remainder_as<Halide::Serialize::GE>() const {
  return remainder_as_GE();
}

template<> inline const Halide::Serialize::And *Bound::remainder_as<Halide::Serialize::And>() const {
  return remainder_as_And();
}

template<> inline const Halide::Serialize::Or *Bound::remainder_as<Halide::Serialize::Or>() const {
  return remainder_as_Or();
}

template<> inline const Halide::Serialize::Not *Bound::remainder_as<Halide::Serialize::Not>() const {
  return remainder_as_Not();
}

template<> inline const Halide::Serialize::Select *Bound::remainder_as<Halide::Serialize::Select>() const {
  return remainder_as_Select();
}

template<> inline const Halide::Serialize::Load *Bound::remainder_as<Halide::Serialize::Load>() const {
  return remainder_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Bound::remainder_as<Halide::Serialize::Ramp>() const {
  return remainder_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Bound::remainder_as<Halide::Serialize::Broadcast>() const {
  return remainder_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Bound::remainder_as<Halide::Serialize::Let>() const {
  return remainder_as_Let();
}

template<> inline const Halide::Serialize::Call *Bound::remainder_as<Halide::Serialize::Call>() const {
  return remainder_as_Call();
}

template<> inline const Halide::Serialize::Variable *Bound::remainder_as<Halide::Serialize::Variable>() const {
  return remainder_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Bound::remainder_as<Halide::Serialize::Shuffle>() const {
  return remainder_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Bound::remainder_as<Halide::Serialize::VectorReduce>() const {
  return remainder_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Bound::remainder_as<Halide::Serialize::UndefinedExpr>() const {
  return remainder_as_UndefinedExpr();
}

struct BoundBuilder {
  typedef Bound Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_var(::flatbuffers::Offset<::flatbuffers::String> var) {
    fbb_.AddOffset(Bound::VT_VAR, var);
  }
  void add_min_type(Halide::Serialize::Expr min_type) {
    fbb_.AddElement<uint8_t>(Bound::VT_MIN_TYPE, static_cast<uint8_t>(min_type), 0);
  }
  void add_min(::flatbuffers::Offset<void> min) {
    fbb_.AddOffset(Bound::VT_MIN, min);
  }
  void add_extent_type(Halide::Serialize::Expr extent_type) {
    fbb_.AddElement<uint8_t>(Bound::VT_EXTENT_TYPE, static_cast<uint8_t>(extent_type), 0);
  }
  void add_extent(::flatbuffers::Offset<void> extent) {
    fbb_.AddOffset(Bound::VT_EXTENT, extent);
  }
  void add_modulus_type(Halide::Serialize::Expr modulus_type) {
    fbb_.AddElement<uint8_t>(Bound::VT_MODULUS_TYPE, static_cast<uint8_t>(modulus_type), 0);
  }
  void add_modulus(::flatbuffers::Offset<void> modulus) {
    fbb_.AddOffset(Bound::VT_MODULUS, modulus);
  }
  void add_remainder_type(Halide::Serialize::Expr remainder_type) {
    fbb_.AddElement<uint8_t>(Bound::VT_REMAINDER_TYPE, static_cast<uint8_t>(remainder_type), 0);
  }
  void add_remainder(::flatbuffers::Offset<void> remainder) {
    fbb_.AddOffset(Bound::VT_REMAINDER, remainder);
  }
  explicit BoundBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Bound> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Bound>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Bound> CreateBound(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> var = 0,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0,
    Halide::Serialize::Expr modulus_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> modulus = 0,
    Halide::Serialize::Expr remainder_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> remainder = 0) {
  BoundBuilder builder_(_fbb);
  builder_.add_remainder(remainder);
  builder_.add_modulus(modulus);
  builder_.add_extent(extent);
  builder_.add_min(min);
  builder_.add_var(var);
  builder_.add_remainder_type(remainder_type);
  builder_.add_modulus_type(modulus_type);
  builder_.add_extent_type(extent_type);
  builder_.add_min_type(min_type);
  return builder_.Finish();
}

struct Bound::Traits {
  using type = Bound;
  static auto constexpr Create = CreateBound;
};

inline ::flatbuffers::Offset<Bound> CreateBoundDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *var = nullptr,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0,
    Halide::Serialize::Expr modulus_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> modulus = 0,
    Halide::Serialize::Expr remainder_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> remainder = 0) {
  auto var__ = var ? _fbb.CreateString(var) : 0;
  return Halide::Serialize::CreateBound(
      _fbb,
      var__,
      min_type,
      min,
      extent_type,
      extent,
      modulus_type,
      modulus,
      remainder_type,
      remainder);
}

struct StorageDim FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StorageDimBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR = 4,
    VT_ALIGNMENT_TYPE = 6,
    VT_ALIGNMENT = 8,
    VT_BOUND_TYPE = 10,
    VT_BOUND = 12,
    VT_FOLD_FACTOR_TYPE = 14,
    VT_FOLD_FACTOR = 16,
    VT_FOLD_FORWARD = 18
  };
  const ::flatbuffers::String *var() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR);
  }
  Halide::Serialize::Expr alignment_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_ALIGNMENT_TYPE, 0));
  }
  const void *alignment() const {
    return GetPointer<const void *>(VT_ALIGNMENT);
  }
  template<typename T> const T *alignment_as() const;
  const Halide::Serialize::IntImm *alignment_as_IntImm() const {
    return alignment_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(alignment()) : nullptr;
  }
  const Halide::Serialize::UIntImm *alignment_as_UIntImm() const {
    return alignment_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(alignment()) : nullptr;
  }
  const Halide::Serialize::FloatImm *alignment_as_FloatImm() const {
    return alignment_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(alignment()) : nullptr;
  }
  const Halide::Serialize::StringImm *alignment_as_StringImm() const {
    return alignment_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Cast *alignment_as_Cast() const {
    return alignment_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *alignment_as_Reinterpret() const {
    return alignment_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Add *alignment_as_Add() const {
    return alignment_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Sub *alignment_as_Sub() const {
    return alignment_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Mul *alignment_as_Mul() const {
    return alignment_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Div *alignment_as_Div() const {
    return alignment_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Mod *alignment_as_Mod() const {
    return alignment_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Min *alignment_as_Min() const {
    return alignment_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Max *alignment_as_Max() const {
    return alignment_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(alignment()) : nullptr;
  }
  const Halide::Serialize::EQ *alignment_as_EQ() const {
    return alignment_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(alignment()) : nullptr;
  }
  const Halide::Serialize::NE *alignment_as_NE() const {
    return alignment_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(alignment()) : nullptr;
  }
  const Halide::Serialize::LT *alignment_as_LT() const {
    return alignment_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(alignment()) : nullptr;
  }
  const Halide::Serialize::LE *alignment_as_LE() const {
    return alignment_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(alignment()) : nullptr;
  }
  const Halide::Serialize::GT *alignment_as_GT() const {
    return alignment_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(alignment()) : nullptr;
  }
  const Halide::Serialize::GE *alignment_as_GE() const {
    return alignment_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(alignment()) : nullptr;
  }
  const Halide::Serialize::And *alignment_as_And() const {
    return alignment_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Or *alignment_as_Or() const {
    return alignment_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Not *alignment_as_Not() const {
    return alignment_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Select *alignment_as_Select() const {
    return alignment_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Load *alignment_as_Load() const {
    return alignment_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Ramp *alignment_as_Ramp() const {
    return alignment_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Broadcast *alignment_as_Broadcast() const {
    return alignment_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Let *alignment_as_Let() const {
    return alignment_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Call *alignment_as_Call() const {
    return alignment_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Variable *alignment_as_Variable() const {
    return alignment_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(alignment()) : nullptr;
  }
  const Halide::Serialize::Shuffle *alignment_as_Shuffle() const {
    return alignment_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(alignment()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *alignment_as_VectorReduce() const {
    return alignment_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(alignment()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *alignment_as_UndefinedExpr() const {
    return alignment_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(alignment()) : nullptr;
  }
  Halide::Serialize::Expr bound_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_BOUND_TYPE, 0));
  }
  const void *bound() const {
    return GetPointer<const void *>(VT_BOUND);
  }
  template<typename T> const T *bound_as() const;
  const Halide::Serialize::IntImm *bound_as_IntImm() const {
    return bound_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(bound()) : nullptr;
  }
  const Halide::Serialize::UIntImm *bound_as_UIntImm() const {
    return bound_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(bound()) : nullptr;
  }
  const Halide::Serialize::FloatImm *bound_as_FloatImm() const {
    return bound_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(bound()) : nullptr;
  }
  const Halide::Serialize::StringImm *bound_as_StringImm() const {
    return bound_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(bound()) : nullptr;
  }
  const Halide::Serialize::Cast *bound_as_Cast() const {
    return bound_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(bound()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *bound_as_Reinterpret() const {
    return bound_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(bound()) : nullptr;
  }
  const Halide::Serialize::Add *bound_as_Add() const {
    return bound_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(bound()) : nullptr;
  }
  const Halide::Serialize::Sub *bound_as_Sub() const {
    return bound_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(bound()) : nullptr;
  }
  const Halide::Serialize::Mul *bound_as_Mul() const {
    return bound_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(bound()) : nullptr;
  }
  const Halide::Serialize::Div *bound_as_Div() const {
    return bound_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(bound()) : nullptr;
  }
  const Halide::Serialize::Mod *bound_as_Mod() const {
    return bound_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(bound()) : nullptr;
  }
  const Halide::Serialize::Min *bound_as_Min() const {
    return bound_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(bound()) : nullptr;
  }
  const Halide::Serialize::Max *bound_as_Max() const {
    return bound_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(bound()) : nullptr;
  }
  const Halide::Serialize::EQ *bound_as_EQ() const {
    return bound_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(bound()) : nullptr;
  }
  const Halide::Serialize::NE *bound_as_NE() const {
    return bound_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(bound()) : nullptr;
  }
  const Halide::Serialize::LT *bound_as_LT() const {
    return bound_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(bound()) : nullptr;
  }
  const Halide::Serialize::LE *bound_as_LE() const {
    return bound_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(bound()) : nullptr;
  }
  const Halide::Serialize::GT *bound_as_GT() const {
    return bound_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(bound()) : nullptr;
  }
  const Halide::Serialize::GE *bound_as_GE() const {
    return bound_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(bound()) : nullptr;
  }
  const Halide::Serialize::And *bound_as_And() const {
    return bound_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(bound()) : nullptr;
  }
  const Halide::Serialize::Or *bound_as_Or() const {
    return bound_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(bound()) : nullptr;
  }
  const Halide::Serialize::Not *bound_as_Not() const {
    return bound_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(bound()) : nullptr;
  }
  const Halide::Serialize::Select *bound_as_Select() const {
    return bound_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(bound()) : nullptr;
  }
  const Halide::Serialize::Load *bound_as_Load() const {
    return bound_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(bound()) : nullptr;
  }
  const Halide::Serialize::Ramp *bound_as_Ramp() const {
    return bound_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(bound()) : nullptr;
  }
  const Halide::Serialize::Broadcast *bound_as_Broadcast() const {
    return bound_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(bound()) : nullptr;
  }
  const Halide::Serialize::Let *bound_as_Let() const {
    return bound_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(bound()) : nullptr;
  }
  const Halide::Serialize::Call *bound_as_Call() const {
    return bound_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(bound()) : nullptr;
  }
  const Halide::Serialize::Variable *bound_as_Variable() const {
    return bound_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(bound()) : nullptr;
  }
  const Halide::Serialize::Shuffle *bound_as_Shuffle() const {
    return bound_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(bound()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *bound_as_VectorReduce() const {
    return bound_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(bound()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *bound_as_UndefinedExpr() const {
    return bound_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(bound()) : nullptr;
  }
  Halide::Serialize::Expr fold_factor_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_FOLD_FACTOR_TYPE, 0));
  }
  const void *fold_factor() const {
    return GetPointer<const void *>(VT_FOLD_FACTOR);
  }
  template<typename T> const T *fold_factor_as() const;
  const Halide::Serialize::IntImm *fold_factor_as_IntImm() const {
    return fold_factor_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::UIntImm *fold_factor_as_UIntImm() const {
    return fold_factor_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::FloatImm *fold_factor_as_FloatImm() const {
    return fold_factor_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::StringImm *fold_factor_as_StringImm() const {
    return fold_factor_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Cast *fold_factor_as_Cast() const {
    return fold_factor_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *fold_factor_as_Reinterpret() const {
    return fold_factor_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Add *fold_factor_as_Add() const {
    return fold_factor_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Sub *fold_factor_as_Sub() const {
    return fold_factor_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Mul *fold_factor_as_Mul() const {
    return fold_factor_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Div *fold_factor_as_Div() const {
    return fold_factor_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Mod *fold_factor_as_Mod() const {
    return fold_factor_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Min *fold_factor_as_Min() const {
    return fold_factor_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Max *fold_factor_as_Max() const {
    return fold_factor_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::EQ *fold_factor_as_EQ() const {
    return fold_factor_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::NE *fold_factor_as_NE() const {
    return fold_factor_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::LT *fold_factor_as_LT() const {
    return fold_factor_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::LE *fold_factor_as_LE() const {
    return fold_factor_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::GT *fold_factor_as_GT() const {
    return fold_factor_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::GE *fold_factor_as_GE() const {
    return fold_factor_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::And *fold_factor_as_And() const {
    return fold_factor_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Or *fold_factor_as_Or() const {
    return fold_factor_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Not *fold_factor_as_Not() const {
    return fold_factor_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Select *fold_factor_as_Select() const {
    return fold_factor_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Load *fold_factor_as_Load() const {
    return fold_factor_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Ramp *fold_factor_as_Ramp() const {
    return fold_factor_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Broadcast *fold_factor_as_Broadcast() const {
    return fold_factor_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Let *fold_factor_as_Let() const {
    return fold_factor_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Call *fold_factor_as_Call() const {
    return fold_factor_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Variable *fold_factor_as_Variable() const {
    return fold_factor_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::Shuffle *fold_factor_as_Shuffle() const {
    return fold_factor_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *fold_factor_as_VectorReduce() const {
    return fold_factor_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(fold_factor()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *fold_factor_as_UndefinedExpr() const {
    return fold_factor_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(fold_factor()) : nullptr;
  }
  bool fold_forward() const {
    return GetField<uint8_t>(VT_FOLD_FORWARD, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR) &&
           verifier.VerifyString(var()) &&
           VerifyField<uint8_t>(verifier, VT_ALIGNMENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_ALIGNMENT) &&
           VerifyExpr(verifier, alignment(), alignment_type()) &&
           VerifyField<uint8_t>(verifier, VT_BOUND_TYPE, 1) &&
           VerifyOffset(verifier, VT_BOUND) &&
           VerifyExpr(verifier, bound(), bound_type()) &&
           VerifyField<uint8_t>(verifier, VT_FOLD_FACTOR_TYPE, 1) &&
           VerifyOffset(verifier, VT_FOLD_FACTOR) &&
           VerifyExpr(verifier, fold_factor(), fold_factor_type()) &&
           VerifyField<uint8_t>(verifier, VT_FOLD_FORWARD, 1) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *StorageDim::alignment_as<Halide::Serialize::IntImm>() const {
  return alignment_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *StorageDim::alignment_as<Halide::Serialize::UIntImm>() const {
  return alignment_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *StorageDim::alignment_as<Halide::Serialize::FloatImm>() const {
  return alignment_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *StorageDim::alignment_as<Halide::Serialize::StringImm>() const {
  return alignment_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *StorageDim::alignment_as<Halide::Serialize::Cast>() const {
  return alignment_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *StorageDim::alignment_as<Halide::Serialize::Reinterpret>() const {
  return alignment_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *StorageDim::alignment_as<Halide::Serialize::Add>() const {
  return alignment_as_Add();
}

template<> inline const Halide::Serialize::Sub *StorageDim::alignment_as<Halide::Serialize::Sub>() const {
  return alignment_as_Sub();
}

template<> inline const Halide::Serialize::Mul *StorageDim::alignment_as<Halide::Serialize::Mul>() const {
  return alignment_as_Mul();
}

template<> inline const Halide::Serialize::Div *StorageDim::alignment_as<Halide::Serialize::Div>() const {
  return alignment_as_Div();
}

template<> inline const Halide::Serialize::Mod *StorageDim::alignment_as<Halide::Serialize::Mod>() const {
  return alignment_as_Mod();
}

template<> inline const Halide::Serialize::Min *StorageDim::alignment_as<Halide::Serialize::Min>() const {
  return alignment_as_Min();
}

template<> inline const Halide::Serialize::Max *StorageDim::alignment_as<Halide::Serialize::Max>() const {
  return alignment_as_Max();
}

template<> inline const Halide::Serialize::EQ *StorageDim::alignment_as<Halide::Serialize::EQ>() const {
  return alignment_as_EQ();
}

template<> inline const Halide::Serialize::NE *StorageDim::alignment_as<Halide::Serialize::NE>() const {
  return alignment_as_NE();
}

template<> inline const Halide::Serialize::LT *StorageDim::alignment_as<Halide::Serialize::LT>() const {
  return alignment_as_LT();
}

template<> inline const Halide::Serialize::LE *StorageDim::alignment_as<Halide::Serialize::LE>() const {
  return alignment_as_LE();
}

template<> inline const Halide::Serialize::GT *StorageDim::alignment_as<Halide::Serialize::GT>() const {
  return alignment_as_GT();
}

template<> inline const Halide::Serialize::GE *StorageDim::alignment_as<Halide::Serialize::GE>() const {
  return alignment_as_GE();
}

template<> inline const Halide::Serialize::And *StorageDim::alignment_as<Halide::Serialize::And>() const {
  return alignment_as_And();
}

template<> inline const Halide::Serialize::Or *StorageDim::alignment_as<Halide::Serialize::Or>() const {
  return alignment_as_Or();
}

template<> inline const Halide::Serialize::Not *StorageDim::alignment_as<Halide::Serialize::Not>() const {
  return alignment_as_Not();
}

template<> inline const Halide::Serialize::Select *StorageDim::alignment_as<Halide::Serialize::Select>() const {
  return alignment_as_Select();
}

template<> inline const Halide::Serialize::Load *StorageDim::alignment_as<Halide::Serialize::Load>() const {
  return alignment_as_Load();
}

template<> inline const Halide::Serialize::Ramp *StorageDim::alignment_as<Halide::Serialize::Ramp>() const {
  return alignment_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *StorageDim::alignment_as<Halide::Serialize::Broadcast>() const {
  return alignment_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *StorageDim::alignment_as<Halide::Serialize::Let>() const {
  return alignment_as_Let();
}

template<> inline const Halide::Serialize::Call *StorageDim::alignment_as<Halide::Serialize::Call>() const {
  return alignment_as_Call();
}

template<> inline const Halide::Serialize::Variable *StorageDim::alignment_as<Halide::Serialize::Variable>() const {
  return alignment_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *StorageDim::alignment_as<Halide::Serialize::Shuffle>() const {
  return alignment_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *StorageDim::alignment_as<Halide::Serialize::VectorReduce>() const {
  return alignment_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *StorageDim::alignment_as<Halide::Serialize::UndefinedExpr>() const {
  return alignment_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *StorageDim::bound_as<Halide::Serialize::IntImm>() const {
  return bound_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *StorageDim::bound_as<Halide::Serialize::UIntImm>() const {
  return bound_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *StorageDim::bound_as<Halide::Serialize::FloatImm>() const {
  return bound_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *StorageDim::bound_as<Halide::Serialize::StringImm>() const {
  return bound_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *StorageDim::bound_as<Halide::Serialize::Cast>() const {
  return bound_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *StorageDim::bound_as<Halide::Serialize::Reinterpret>() const {
  return bound_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *StorageDim::bound_as<Halide::Serialize::Add>() const {
  return bound_as_Add();
}

template<> inline const Halide::Serialize::Sub *StorageDim::bound_as<Halide::Serialize::Sub>() const {
  return bound_as_Sub();
}

template<> inline const Halide::Serialize::Mul *StorageDim::bound_as<Halide::Serialize::Mul>() const {
  return bound_as_Mul();
}

template<> inline const Halide::Serialize::Div *StorageDim::bound_as<Halide::Serialize::Div>() const {
  return bound_as_Div();
}

template<> inline const Halide::Serialize::Mod *StorageDim::bound_as<Halide::Serialize::Mod>() const {
  return bound_as_Mod();
}

template<> inline const Halide::Serialize::Min *StorageDim::bound_as<Halide::Serialize::Min>() const {
  return bound_as_Min();
}

template<> inline const Halide::Serialize::Max *StorageDim::bound_as<Halide::Serialize::Max>() const {
  return bound_as_Max();
}

template<> inline const Halide::Serialize::EQ *StorageDim::bound_as<Halide::Serialize::EQ>() const {
  return bound_as_EQ();
}

template<> inline const Halide::Serialize::NE *StorageDim::bound_as<Halide::Serialize::NE>() const {
  return bound_as_NE();
}

template<> inline const Halide::Serialize::LT *StorageDim::bound_as<Halide::Serialize::LT>() const {
  return bound_as_LT();
}

template<> inline const Halide::Serialize::LE *StorageDim::bound_as<Halide::Serialize::LE>() const {
  return bound_as_LE();
}

template<> inline const Halide::Serialize::GT *StorageDim::bound_as<Halide::Serialize::GT>() const {
  return bound_as_GT();
}

template<> inline const Halide::Serialize::GE *StorageDim::bound_as<Halide::Serialize::GE>() const {
  return bound_as_GE();
}

template<> inline const Halide::Serialize::And *StorageDim::bound_as<Halide::Serialize::And>() const {
  return bound_as_And();
}

template<> inline const Halide::Serialize::Or *StorageDim::bound_as<Halide::Serialize::Or>() const {
  return bound_as_Or();
}

template<> inline const Halide::Serialize::Not *StorageDim::bound_as<Halide::Serialize::Not>() const {
  return bound_as_Not();
}

template<> inline const Halide::Serialize::Select *StorageDim::bound_as<Halide::Serialize::Select>() const {
  return bound_as_Select();
}

template<> inline const Halide::Serialize::Load *StorageDim::bound_as<Halide::Serialize::Load>() const {
  return bound_as_Load();
}

template<> inline const Halide::Serialize::Ramp *StorageDim::bound_as<Halide::Serialize::Ramp>() const {
  return bound_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *StorageDim::bound_as<Halide::Serialize::Broadcast>() const {
  return bound_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *StorageDim::bound_as<Halide::Serialize::Let>() const {
  return bound_as_Let();
}

template<> inline const Halide::Serialize::Call *StorageDim::bound_as<Halide::Serialize::Call>() const {
  return bound_as_Call();
}

template<> inline const Halide::Serialize::Variable *StorageDim::bound_as<Halide::Serialize::Variable>() const {
  return bound_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *StorageDim::bound_as<Halide::Serialize::Shuffle>() const {
  return bound_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *StorageDim::bound_as<Halide::Serialize::VectorReduce>() const {
  return bound_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *StorageDim::bound_as<Halide::Serialize::UndefinedExpr>() const {
  return bound_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *StorageDim::fold_factor_as<Halide::Serialize::IntImm>() const {
  return fold_factor_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *StorageDim::fold_factor_as<Halide::Serialize::UIntImm>() const {
  return fold_factor_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *StorageDim::fold_factor_as<Halide::Serialize::FloatImm>() const {
  return fold_factor_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *StorageDim::fold_factor_as<Halide::Serialize::StringImm>() const {
  return fold_factor_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *StorageDim::fold_factor_as<Halide::Serialize::Cast>() const {
  return fold_factor_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *StorageDim::fold_factor_as<Halide::Serialize::Reinterpret>() const {
  return fold_factor_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *StorageDim::fold_factor_as<Halide::Serialize::Add>() const {
  return fold_factor_as_Add();
}

template<> inline const Halide::Serialize::Sub *StorageDim::fold_factor_as<Halide::Serialize::Sub>() const {
  return fold_factor_as_Sub();
}

template<> inline const Halide::Serialize::Mul *StorageDim::fold_factor_as<Halide::Serialize::Mul>() const {
  return fold_factor_as_Mul();
}

template<> inline const Halide::Serialize::Div *StorageDim::fold_factor_as<Halide::Serialize::Div>() const {
  return fold_factor_as_Div();
}

template<> inline const Halide::Serialize::Mod *StorageDim::fold_factor_as<Halide::Serialize::Mod>() const {
  return fold_factor_as_Mod();
}

template<> inline const Halide::Serialize::Min *StorageDim::fold_factor_as<Halide::Serialize::Min>() const {
  return fold_factor_as_Min();
}

template<> inline const Halide::Serialize::Max *StorageDim::fold_factor_as<Halide::Serialize::Max>() const {
  return fold_factor_as_Max();
}

template<> inline const Halide::Serialize::EQ *StorageDim::fold_factor_as<Halide::Serialize::EQ>() const {
  return fold_factor_as_EQ();
}

template<> inline const Halide::Serialize::NE *StorageDim::fold_factor_as<Halide::Serialize::NE>() const {
  return fold_factor_as_NE();
}

template<> inline const Halide::Serialize::LT *StorageDim::fold_factor_as<Halide::Serialize::LT>() const {
  return fold_factor_as_LT();
}

template<> inline const Halide::Serialize::LE *StorageDim::fold_factor_as<Halide::Serialize::LE>() const {
  return fold_factor_as_LE();
}

template<> inline const Halide::Serialize::GT *StorageDim::fold_factor_as<Halide::Serialize::GT>() const {
  return fold_factor_as_GT();
}

template<> inline const Halide::Serialize::GE *StorageDim::fold_factor_as<Halide::Serialize::GE>() const {
  return fold_factor_as_GE();
}

template<> inline const Halide::Serialize::And *StorageDim::fold_factor_as<Halide::Serialize::And>() const {
  return fold_factor_as_And();
}

template<> inline const Halide::Serialize::Or *StorageDim::fold_factor_as<Halide::Serialize::Or>() const {
  return fold_factor_as_Or();
}

template<> inline const Halide::Serialize::Not *StorageDim::fold_factor_as<Halide::Serialize::Not>() const {
  return fold_factor_as_Not();
}

template<> inline const Halide::Serialize::Select *StorageDim::fold_factor_as<Halide::Serialize::Select>() const {
  return fold_factor_as_Select();
}

template<> inline const Halide::Serialize::Load *StorageDim::fold_factor_as<Halide::Serialize::Load>() const {
  return fold_factor_as_Load();
}

template<> inline const Halide::Serialize::Ramp *StorageDim::fold_factor_as<Halide::Serialize::Ramp>() const {
  return fold_factor_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *StorageDim::fold_factor_as<Halide::Serialize::Broadcast>() const {
  return fold_factor_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *StorageDim::fold_factor_as<Halide::Serialize::Let>() const {
  return fold_factor_as_Let();
}

template<> inline const Halide::Serialize::Call *StorageDim::fold_factor_as<Halide::Serialize::Call>() const {
  return fold_factor_as_Call();
}

template<> inline const Halide::Serialize::Variable *StorageDim::fold_factor_as<Halide::Serialize::Variable>() const {
  return fold_factor_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *StorageDim::fold_factor_as<Halide::Serialize::Shuffle>() const {
  return fold_factor_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *StorageDim::fold_factor_as<Halide::Serialize::VectorReduce>() const {
  return fold_factor_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *StorageDim::fold_factor_as<Halide::Serialize::UndefinedExpr>() const {
  return fold_factor_as_UndefinedExpr();
}

struct StorageDimBuilder {
  typedef StorageDim Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_var(::flatbuffers::Offset<::flatbuffers::String> var) {
    fbb_.AddOffset(StorageDim::VT_VAR, var);
  }
  void add_alignment_type(Halide::Serialize::Expr alignment_type) {
    fbb_.AddElement<uint8_t>(StorageDim::VT_ALIGNMENT_TYPE, static_cast<uint8_t>(alignment_type), 0);
  }
  void add_alignment(::flatbuffers::Offset<void> alignment) {
    fbb_.AddOffset(StorageDim::VT_ALIGNMENT, alignment);
  }
  void add_bound_type(Halide::Serialize::Expr bound_type) {
    fbb_.AddElement<uint8_t>(StorageDim::VT_BOUND_TYPE, static_cast<uint8_t>(bound_type), 0);
  }
  void add_bound(::flatbuffers::Offset<void> bound) {
    fbb_.AddOffset(StorageDim::VT_BOUND, bound);
  }
  void add_fold_factor_type(Halide::Serialize::Expr fold_factor_type) {
    fbb_.AddElement<uint8_t>(StorageDim::VT_FOLD_FACTOR_TYPE, static_cast<uint8_t>(fold_factor_type), 0);
  }
  void add_fold_factor(::flatbuffers::Offset<void> fold_factor) {
    fbb_.AddOffset(StorageDim::VT_FOLD_FACTOR, fold_factor);
  }
  void add_fold_forward(bool fold_forward) {
    fbb_.AddElement<uint8_t>(StorageDim::VT_FOLD_FORWARD, static_cast<uint8_t>(fold_forward), 0);
  }
  explicit StorageDimBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StorageDim> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StorageDim>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StorageDim> CreateStorageDim(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> var = 0,
    Halide::Serialize::Expr alignment_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> alignment = 0,
    Halide::Serialize::Expr bound_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> bound = 0,
    Halide::Serialize::Expr fold_factor_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> fold_factor = 0,
    bool fold_forward = false) {
  StorageDimBuilder builder_(_fbb);
  builder_.add_fold_factor(fold_factor);
  builder_.add_bound(bound);
  builder_.add_alignment(alignment);
  builder_.add_var(var);
  builder_.add_fold_forward(fold_forward);
  builder_.add_fold_factor_type(fold_factor_type);
  builder_.add_bound_type(bound_type);
  builder_.add_alignment_type(alignment_type);
  return builder_.Finish();
}

struct StorageDim::Traits {
  using type = StorageDim;
  static auto constexpr Create = CreateStorageDim;
};

inline ::flatbuffers::Offset<StorageDim> CreateStorageDimDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *var = nullptr,
    Halide::Serialize::Expr alignment_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> alignment = 0,
    Halide::Serialize::Expr bound_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> bound = 0,
    Halide::Serialize::Expr fold_factor_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> fold_factor = 0,
    bool fold_forward = false) {
  auto var__ = var ? _fbb.CreateString(var) : 0;
  return Halide::Serialize::CreateStorageDim(
      _fbb,
      var__,
      alignment_type,
      alignment,
      bound_type,
      bound,
      fold_factor_type,
      fold_factor,
      fold_forward);
}

struct LoopLevel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoopLevelBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUNC_NAME = 4,
    VT_STAGE_INDEX = 6,
    VT_VAR_NAME = 8,
    VT_IS_RVAR = 10,
    VT_LOCKED = 12
  };
  const ::flatbuffers::String *func_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNC_NAME);
  }
  int32_t stage_index() const {
    return GetField<int32_t>(VT_STAGE_INDEX, 0);
  }
  const ::flatbuffers::String *var_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR_NAME);
  }
  bool is_rvar() const {
    return GetField<uint8_t>(VT_IS_RVAR, 0) != 0;
  }
  bool locked() const {
    return GetField<uint8_t>(VT_LOCKED, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUNC_NAME) &&
           verifier.VerifyString(func_name()) &&
           VerifyField<int32_t>(verifier, VT_STAGE_INDEX, 4) &&
           VerifyOffset(verifier, VT_VAR_NAME) &&
           verifier.VerifyString(var_name()) &&
           VerifyField<uint8_t>(verifier, VT_IS_RVAR, 1) &&
           VerifyField<uint8_t>(verifier, VT_LOCKED, 1) &&
           verifier.EndTable();
  }
};

struct LoopLevelBuilder {
  typedef LoopLevel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_func_name(::flatbuffers::Offset<::flatbuffers::String> func_name) {
    fbb_.AddOffset(LoopLevel::VT_FUNC_NAME, func_name);
  }
  void add_stage_index(int32_t stage_index) {
    fbb_.AddElement<int32_t>(LoopLevel::VT_STAGE_INDEX, stage_index, 0);
  }
  void add_var_name(::flatbuffers::Offset<::flatbuffers::String> var_name) {
    fbb_.AddOffset(LoopLevel::VT_VAR_NAME, var_name);
  }
  void add_is_rvar(bool is_rvar) {
    fbb_.AddElement<uint8_t>(LoopLevel::VT_IS_RVAR, static_cast<uint8_t>(is_rvar), 0);
  }
  void add_locked(bool locked) {
    fbb_.AddElement<uint8_t>(LoopLevel::VT_LOCKED, static_cast<uint8_t>(locked), 0);
  }
  explicit LoopLevelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoopLevel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoopLevel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoopLevel> CreateLoopLevel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> func_name = 0,
    int32_t stage_index = 0,
    ::flatbuffers::Offset<::flatbuffers::String> var_name = 0,
    bool is_rvar = false,
    bool locked = false) {
  LoopLevelBuilder builder_(_fbb);
  builder_.add_var_name(var_name);
  builder_.add_stage_index(stage_index);
  builder_.add_func_name(func_name);
  builder_.add_locked(locked);
  builder_.add_is_rvar(is_rvar);
  return builder_.Finish();
}

struct LoopLevel::Traits {
  using type = LoopLevel;
  static auto constexpr Create = CreateLoopLevel;
};

inline ::flatbuffers::Offset<LoopLevel> CreateLoopLevelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *func_name = nullptr,
    int32_t stage_index = 0,
    const char *var_name = nullptr,
    bool is_rvar = false,
    bool locked = false) {
  auto func_name__ = func_name ? _fbb.CreateString(func_name) : 0;
  auto var_name__ = var_name ? _fbb.CreateString(var_name) : 0;
  return Halide::Serialize::CreateLoopLevel(
      _fbb,
      func_name__,
      stage_index,
      var_name__,
      is_rvar,
      locked);
}

struct WrapperRef FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WrapperRefBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUNC_NAME = 4,
    VT_FUNC_INDEX = 6
  };
  const ::flatbuffers::String *func_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNC_NAME);
  }
  int32_t func_index() const {
    return GetField<int32_t>(VT_FUNC_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUNC_NAME) &&
           verifier.VerifyString(func_name()) &&
           VerifyField<int32_t>(verifier, VT_FUNC_INDEX, 4) &&
           verifier.EndTable();
  }
};

struct WrapperRefBuilder {
  typedef WrapperRef Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_func_name(::flatbuffers::Offset<::flatbuffers::String> func_name) {
    fbb_.AddOffset(WrapperRef::VT_FUNC_NAME, func_name);
  }
  void add_func_index(int32_t func_index) {
    fbb_.AddElement<int32_t>(WrapperRef::VT_FUNC_INDEX, func_index, 0);
  }
  explicit WrapperRefBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WrapperRef> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WrapperRef>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WrapperRef> CreateWrapperRef(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> func_name = 0,
    int32_t func_index = 0) {
  WrapperRefBuilder builder_(_fbb);
  builder_.add_func_index(func_index);
  builder_.add_func_name(func_name);
  return builder_.Finish();
}

struct WrapperRef::Traits {
  using type = WrapperRef;
  static auto constexpr Create = CreateWrapperRef;
};

inline ::flatbuffers::Offset<WrapperRef> CreateWrapperRefDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *func_name = nullptr,
    int32_t func_index = 0) {
  auto func_name__ = func_name ? _fbb.CreateString(func_name) : 0;
  return Halide::Serialize::CreateWrapperRef(
      _fbb,
      func_name__,
      func_index);
}

struct FuncSchedule FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FuncScheduleBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STORE_LEVEL = 4,
    VT_COMPUTE_LEVEL = 6,
    VT_HOIST_STORAGE_LEVEL = 8,
    VT_STORAGE_DIMS = 10,
    VT_BOUNDS = 12,
    VT_ESTIMATES = 14,
    VT_WRAPPERS = 16,
    VT_MEMORY_TYPE = 18,
    VT_MEMOIZED = 20,
    VT_ASYNC = 22,
    VT_MEMOIZE_EVICTION_KEY_TYPE = 24,
    VT_MEMOIZE_EVICTION_KEY = 26
  };
  const Halide::Serialize::LoopLevel *store_level() const {
    return GetPointer<const Halide::Serialize::LoopLevel *>(VT_STORE_LEVEL);
  }
  const Halide::Serialize::LoopLevel *compute_level() const {
    return GetPointer<const Halide::Serialize::LoopLevel *>(VT_COMPUTE_LEVEL);
  }
  const Halide::Serialize::LoopLevel *hoist_storage_level() const {
    return GetPointer<const Halide::Serialize::LoopLevel *>(VT_HOIST_STORAGE_LEVEL);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::StorageDim>> *storage_dims() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::StorageDim>> *>(VT_STORAGE_DIMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *bounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *>(VT_BOUNDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *estimates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *>(VT_ESTIMATES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>> *wrappers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>> *>(VT_WRAPPERS);
  }
  Halide::Serialize::MemoryType memory_type() const {
    return static_cast<Halide::Serialize::MemoryType>(GetField<int8_t>(VT_MEMORY_TYPE, 0));
  }
  bool memoized() const {
    return GetField<uint8_t>(VT_MEMOIZED, 0) != 0;
  }
  bool async() const {
    return GetField<uint8_t>(VT_ASYNC, 0) != 0;
  }
  Halide::Serialize::Expr memoize_eviction_key_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MEMOIZE_EVICTION_KEY_TYPE, 0));
  }
  const void *memoize_eviction_key() const {
    return GetPointer<const void *>(VT_MEMOIZE_EVICTION_KEY);
  }
  template<typename T> const T *memoize_eviction_key_as() const;
  const Halide::Serialize::IntImm *memoize_eviction_key_as_IntImm() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::UIntImm *memoize_eviction_key_as_UIntImm() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::FloatImm *memoize_eviction_key_as_FloatImm() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::StringImm *memoize_eviction_key_as_StringImm() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Cast *memoize_eviction_key_as_Cast() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *memoize_eviction_key_as_Reinterpret() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Add *memoize_eviction_key_as_Add() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Sub *memoize_eviction_key_as_Sub() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Mul *memoize_eviction_key_as_Mul() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Div *memoize_eviction_key_as_Div() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Mod *memoize_eviction_key_as_Mod() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Min *memoize_eviction_key_as_Min() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Max *memoize_eviction_key_as_Max() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::EQ *memoize_eviction_key_as_EQ() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::NE *memoize_eviction_key_as_NE() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::LT *memoize_eviction_key_as_LT() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::LE *memoize_eviction_key_as_LE() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::GT *memoize_eviction_key_as_GT() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::GE *memoize_eviction_key_as_GE() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::And *memoize_eviction_key_as_And() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Or *memoize_eviction_key_as_Or() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Not *memoize_eviction_key_as_Not() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Select *memoize_eviction_key_as_Select() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Load *memoize_eviction_key_as_Load() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Ramp *memoize_eviction_key_as_Ramp() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Broadcast *memoize_eviction_key_as_Broadcast() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Let *memoize_eviction_key_as_Let() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Call *memoize_eviction_key_as_Call() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Variable *memoize_eviction_key_as_Variable() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::Shuffle *memoize_eviction_key_as_Shuffle() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *memoize_eviction_key_as_VectorReduce() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(memoize_eviction_key()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *memoize_eviction_key_as_UndefinedExpr() const {
    return memoize_eviction_key_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(memoize_eviction_key()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STORE_LEVEL) &&
           verifier.VerifyTable(store_level()) &&
           VerifyOffset(verifier, VT_COMPUTE_LEVEL) &&
           verifier.VerifyTable(compute_level()) &&
           VerifyOffset(verifier, VT_HOIST_STORAGE_LEVEL) &&
           verifier.VerifyTable(hoist_storage_level()) &&
           VerifyOffset(verifier, VT_STORAGE_DIMS) &&
           verifier.VerifyVector(storage_dims()) &&
           verifier.VerifyVectorOfTables(storage_dims()) &&
           VerifyOffset(verifier, VT_BOUNDS) &&
           verifier.VerifyVector(bounds()) &&
           verifier.VerifyVectorOfTables(bounds()) &&
           VerifyOffset(verifier, VT_ESTIMATES) &&
           verifier.VerifyVector(estimates()) &&
           verifier.VerifyVectorOfTables(estimates()) &&
           VerifyOffset(verifier, VT_WRAPPERS) &&
           verifier.VerifyVector(wrappers()) &&
           verifier.VerifyVectorOfTables(wrappers()) &&
           VerifyField<int8_t>(verifier, VT_MEMORY_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_MEMOIZED, 1) &&
           VerifyField<uint8_t>(verifier, VT_ASYNC, 1) &&
           VerifyField<uint8_t>(verifier, VT_MEMOIZE_EVICTION_KEY_TYPE, 1) &&
           VerifyOffset(verifier, VT_MEMOIZE_EVICTION_KEY) &&
           VerifyExpr(verifier, memoize_eviction_key(), memoize_eviction_key_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::IntImm>() const {
  return memoize_eviction_key_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::UIntImm>() const {
  return memoize_eviction_key_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::FloatImm>() const {
  return memoize_eviction_key_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::StringImm>() const {
  return memoize_eviction_key_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Cast>() const {
  return memoize_eviction_key_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Reinterpret>() const {
  return memoize_eviction_key_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Add>() const {
  return memoize_eviction_key_as_Add();
}

template<> inline const Halide::Serialize::Sub *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Sub>() const {
  return memoize_eviction_key_as_Sub();
}

template<> inline const Halide::Serialize::Mul *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Mul>() const {
  return memoize_eviction_key_as_Mul();
}

template<> inline const Halide::Serialize::Div *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Div>() const {
  return memoize_eviction_key_as_Div();
}

template<> inline const Halide::Serialize::Mod *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Mod>() const {
  return memoize_eviction_key_as_Mod();
}

template<> inline const Halide::Serialize::Min *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Min>() const {
  return memoize_eviction_key_as_Min();
}

template<> inline const Halide::Serialize::Max *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Max>() const {
  return memoize_eviction_key_as_Max();
}

template<> inline const Halide::Serialize::EQ *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::EQ>() const {
  return memoize_eviction_key_as_EQ();
}

template<> inline const Halide::Serialize::NE *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::NE>() const {
  return memoize_eviction_key_as_NE();
}

template<> inline const Halide::Serialize::LT *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::LT>() const {
  return memoize_eviction_key_as_LT();
}

template<> inline const Halide::Serialize::LE *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::LE>() const {
  return memoize_eviction_key_as_LE();
}

template<> inline const Halide::Serialize::GT *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::GT>() const {
  return memoize_eviction_key_as_GT();
}

template<> inline const Halide::Serialize::GE *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::GE>() const {
  return memoize_eviction_key_as_GE();
}

template<> inline const Halide::Serialize::And *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::And>() const {
  return memoize_eviction_key_as_And();
}

template<> inline const Halide::Serialize::Or *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Or>() const {
  return memoize_eviction_key_as_Or();
}

template<> inline const Halide::Serialize::Not *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Not>() const {
  return memoize_eviction_key_as_Not();
}

template<> inline const Halide::Serialize::Select *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Select>() const {
  return memoize_eviction_key_as_Select();
}

template<> inline const Halide::Serialize::Load *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Load>() const {
  return memoize_eviction_key_as_Load();
}

template<> inline const Halide::Serialize::Ramp *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Ramp>() const {
  return memoize_eviction_key_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Broadcast>() const {
  return memoize_eviction_key_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Let>() const {
  return memoize_eviction_key_as_Let();
}

template<> inline const Halide::Serialize::Call *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Call>() const {
  return memoize_eviction_key_as_Call();
}

template<> inline const Halide::Serialize::Variable *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Variable>() const {
  return memoize_eviction_key_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::Shuffle>() const {
  return memoize_eviction_key_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::VectorReduce>() const {
  return memoize_eviction_key_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *FuncSchedule::memoize_eviction_key_as<Halide::Serialize::UndefinedExpr>() const {
  return memoize_eviction_key_as_UndefinedExpr();
}

struct FuncScheduleBuilder {
  typedef FuncSchedule Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_store_level(::flatbuffers::Offset<Halide::Serialize::LoopLevel> store_level) {
    fbb_.AddOffset(FuncSchedule::VT_STORE_LEVEL, store_level);
  }
  void add_compute_level(::flatbuffers::Offset<Halide::Serialize::LoopLevel> compute_level) {
    fbb_.AddOffset(FuncSchedule::VT_COMPUTE_LEVEL, compute_level);
  }
  void add_hoist_storage_level(::flatbuffers::Offset<Halide::Serialize::LoopLevel> hoist_storage_level) {
    fbb_.AddOffset(FuncSchedule::VT_HOIST_STORAGE_LEVEL, hoist_storage_level);
  }
  void add_storage_dims(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::StorageDim>>> storage_dims) {
    fbb_.AddOffset(FuncSchedule::VT_STORAGE_DIMS, storage_dims);
  }
  void add_bounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>>> bounds) {
    fbb_.AddOffset(FuncSchedule::VT_BOUNDS, bounds);
  }
  void add_estimates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>>> estimates) {
    fbb_.AddOffset(FuncSchedule::VT_ESTIMATES, estimates);
  }
  void add_wrappers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>>> wrappers) {
    fbb_.AddOffset(FuncSchedule::VT_WRAPPERS, wrappers);
  }
  void add_memory_type(Halide::Serialize::MemoryType memory_type) {
    fbb_.AddElement<int8_t>(FuncSchedule::VT_MEMORY_TYPE, static_cast<int8_t>(memory_type), 0);
  }
  void add_memoized(bool memoized) {
    fbb_.AddElement<uint8_t>(FuncSchedule::VT_MEMOIZED, static_cast<uint8_t>(memoized), 0);
  }
  void add_async(bool async) {
    fbb_.AddElement<uint8_t>(FuncSchedule::VT_ASYNC, static_cast<uint8_t>(async), 0);
  }
  void add_memoize_eviction_key_type(Halide::Serialize::Expr memoize_eviction_key_type) {
    fbb_.AddElement<uint8_t>(FuncSchedule::VT_MEMOIZE_EVICTION_KEY_TYPE, static_cast<uint8_t>(memoize_eviction_key_type), 0);
  }
  void add_memoize_eviction_key(::flatbuffers::Offset<void> memoize_eviction_key) {
    fbb_.AddOffset(FuncSchedule::VT_MEMOIZE_EVICTION_KEY, memoize_eviction_key);
  }
  explicit FuncScheduleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FuncSchedule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FuncSchedule>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FuncSchedule> CreateFuncSchedule(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> store_level = 0,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> compute_level = 0,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> hoist_storage_level = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::StorageDim>>> storage_dims = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>>> bounds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Bound>>> estimates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>>> wrappers = 0,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    bool memoized = false,
    bool async = false,
    Halide::Serialize::Expr memoize_eviction_key_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> memoize_eviction_key = 0) {
  FuncScheduleBuilder builder_(_fbb);
  builder_.add_memoize_eviction_key(memoize_eviction_key);
  builder_.add_wrappers(wrappers);
  builder_.add_estimates(estimates);
  builder_.add_bounds(bounds);
  builder_.add_storage_dims(storage_dims);
  builder_.add_hoist_storage_level(hoist_storage_level);
  builder_.add_compute_level(compute_level);
  builder_.add_store_level(store_level);
  builder_.add_memoize_eviction_key_type(memoize_eviction_key_type);
  builder_.add_async(async);
  builder_.add_memoized(memoized);
  builder_.add_memory_type(memory_type);
  return builder_.Finish();
}

struct FuncSchedule::Traits {
  using type = FuncSchedule;
  static auto constexpr Create = CreateFuncSchedule;
};

inline ::flatbuffers::Offset<FuncSchedule> CreateFuncScheduleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> store_level = 0,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> compute_level = 0,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> hoist_storage_level = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::StorageDim>> *storage_dims = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *bounds = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Bound>> *estimates = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>> *wrappers = nullptr,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    bool memoized = false,
    bool async = false,
    Halide::Serialize::Expr memoize_eviction_key_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> memoize_eviction_key = 0) {
  auto storage_dims__ = storage_dims ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::StorageDim>>(*storage_dims) : 0;
  auto bounds__ = bounds ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Bound>>(*bounds) : 0;
  auto estimates__ = estimates ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Bound>>(*estimates) : 0;
  auto wrappers__ = wrappers ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::WrapperRef>>(*wrappers) : 0;
  return Halide::Serialize::CreateFuncSchedule(
      _fbb,
      store_level,
      compute_level,
      hoist_storage_level,
      storage_dims__,
      bounds__,
      estimates__,
      wrappers__,
      memory_type,
      memoized,
      async,
      memoize_eviction_key_type,
      memoize_eviction_key);
}

struct Specialization FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpecializationBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONDITION_TYPE = 4,
    VT_CONDITION = 6,
    VT_DEFINITION = 8,
    VT_FAILURE_MESSAGE = 10
  };
  Halide::Serialize::Expr condition_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_CONDITION_TYPE, 0));
  }
  const void *condition() const {
    return GetPointer<const void *>(VT_CONDITION);
  }
  template<typename T> const T *condition_as() const;
  const Halide::Serialize::IntImm *condition_as_IntImm() const {
    return condition_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::UIntImm *condition_as_UIntImm() const {
    return condition_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::FloatImm *condition_as_FloatImm() const {
    return condition_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::StringImm *condition_as_StringImm() const {
    return condition_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(condition()) : nullptr;
  }
  const Halide::Serialize::Cast *condition_as_Cast() const {
    return condition_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *condition_as_Reinterpret() const {
    return condition_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(condition()) : nullptr;
  }
  const Halide::Serialize::Add *condition_as_Add() const {
    return condition_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(condition()) : nullptr;
  }
  const Halide::Serialize::Sub *condition_as_Sub() const {
    return condition_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mul *condition_as_Mul() const {
    return condition_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(condition()) : nullptr;
  }
  const Halide::Serialize::Div *condition_as_Div() const {
    return condition_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(condition()) : nullptr;
  }
  const Halide::Serialize::Mod *condition_as_Mod() const {
    return condition_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(condition()) : nullptr;
  }
  const Halide::Serialize::Min *condition_as_Min() const {
    return condition_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(condition()) : nullptr;
  }
  const Halide::Serialize::Max *condition_as_Max() const {
    return condition_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(condition()) : nullptr;
  }
  const Halide::Serialize::EQ *condition_as_EQ() const {
    return condition_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(condition()) : nullptr;
  }
  const Halide::Serialize::NE *condition_as_NE() const {
    return condition_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(condition()) : nullptr;
  }
  const Halide::Serialize::LT *condition_as_LT() const {
    return condition_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(condition()) : nullptr;
  }
  const Halide::Serialize::LE *condition_as_LE() const {
    return condition_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(condition()) : nullptr;
  }
  const Halide::Serialize::GT *condition_as_GT() const {
    return condition_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(condition()) : nullptr;
  }
  const Halide::Serialize::GE *condition_as_GE() const {
    return condition_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(condition()) : nullptr;
  }
  const Halide::Serialize::And *condition_as_And() const {
    return condition_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(condition()) : nullptr;
  }
  const Halide::Serialize::Or *condition_as_Or() const {
    return condition_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(condition()) : nullptr;
  }
  const Halide::Serialize::Not *condition_as_Not() const {
    return condition_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(condition()) : nullptr;
  }
  const Halide::Serialize::Select *condition_as_Select() const {
    return condition_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(condition()) : nullptr;
  }
  const Halide::Serialize::Load *condition_as_Load() const {
    return condition_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(condition()) : nullptr;
  }
  const Halide::Serialize::Ramp *condition_as_Ramp() const {
    return condition_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(condition()) : nullptr;
  }
  const Halide::Serialize::Broadcast *condition_as_Broadcast() const {
    return condition_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(condition()) : nullptr;
  }
  const Halide::Serialize::Let *condition_as_Let() const {
    return condition_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(condition()) : nullptr;
  }
  const Halide::Serialize::Call *condition_as_Call() const {
    return condition_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(condition()) : nullptr;
  }
  const Halide::Serialize::Variable *condition_as_Variable() const {
    return condition_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(condition()) : nullptr;
  }
  const Halide::Serialize::Shuffle *condition_as_Shuffle() const {
    return condition_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(condition()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *condition_as_VectorReduce() const {
    return condition_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(condition()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *condition_as_UndefinedExpr() const {
    return condition_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(condition()) : nullptr;
  }
  const Halide::Serialize::Definition *definition() const {
    return GetPointer<const Halide::Serialize::Definition *>(VT_DEFINITION);
  }
  const ::flatbuffers::String *failure_message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAILURE_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONDITION_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           VerifyExpr(verifier, condition(), condition_type()) &&
           VerifyOffset(verifier, VT_DEFINITION) &&
           verifier.VerifyTable(definition()) &&
           VerifyOffset(verifier, VT_FAILURE_MESSAGE) &&
           verifier.VerifyString(failure_message()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Specialization::condition_as<Halide::Serialize::IntImm>() const {
  return condition_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Specialization::condition_as<Halide::Serialize::UIntImm>() const {
  return condition_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Specialization::condition_as<Halide::Serialize::FloatImm>() const {
  return condition_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Specialization::condition_as<Halide::Serialize::StringImm>() const {
  return condition_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Specialization::condition_as<Halide::Serialize::Cast>() const {
  return condition_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Specialization::condition_as<Halide::Serialize::Reinterpret>() const {
  return condition_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Specialization::condition_as<Halide::Serialize::Add>() const {
  return condition_as_Add();
}

template<> inline const Halide::Serialize::Sub *Specialization::condition_as<Halide::Serialize::Sub>() const {
  return condition_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Specialization::condition_as<Halide::Serialize::Mul>() const {
  return condition_as_Mul();
}

template<> inline const Halide::Serialize::Div *Specialization::condition_as<Halide::Serialize::Div>() const {
  return condition_as_Div();
}

template<> inline const Halide::Serialize::Mod *Specialization::condition_as<Halide::Serialize::Mod>() const {
  return condition_as_Mod();
}

template<> inline const Halide::Serialize::Min *Specialization::condition_as<Halide::Serialize::Min>() const {
  return condition_as_Min();
}

template<> inline const Halide::Serialize::Max *Specialization::condition_as<Halide::Serialize::Max>() const {
  return condition_as_Max();
}

template<> inline const Halide::Serialize::EQ *Specialization::condition_as<Halide::Serialize::EQ>() const {
  return condition_as_EQ();
}

template<> inline const Halide::Serialize::NE *Specialization::condition_as<Halide::Serialize::NE>() const {
  return condition_as_NE();
}

template<> inline const Halide::Serialize::LT *Specialization::condition_as<Halide::Serialize::LT>() const {
  return condition_as_LT();
}

template<> inline const Halide::Serialize::LE *Specialization::condition_as<Halide::Serialize::LE>() const {
  return condition_as_LE();
}

template<> inline const Halide::Serialize::GT *Specialization::condition_as<Halide::Serialize::GT>() const {
  return condition_as_GT();
}

template<> inline const Halide::Serialize::GE *Specialization::condition_as<Halide::Serialize::GE>() const {
  return condition_as_GE();
}

template<> inline const Halide::Serialize::And *Specialization::condition_as<Halide::Serialize::And>() const {
  return condition_as_And();
}

template<> inline const Halide::Serialize::Or *Specialization::condition_as<Halide::Serialize::Or>() const {
  return condition_as_Or();
}

template<> inline const Halide::Serialize::Not *Specialization::condition_as<Halide::Serialize::Not>() const {
  return condition_as_Not();
}

template<> inline const Halide::Serialize::Select *Specialization::condition_as<Halide::Serialize::Select>() const {
  return condition_as_Select();
}

template<> inline const Halide::Serialize::Load *Specialization::condition_as<Halide::Serialize::Load>() const {
  return condition_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Specialization::condition_as<Halide::Serialize::Ramp>() const {
  return condition_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Specialization::condition_as<Halide::Serialize::Broadcast>() const {
  return condition_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Specialization::condition_as<Halide::Serialize::Let>() const {
  return condition_as_Let();
}

template<> inline const Halide::Serialize::Call *Specialization::condition_as<Halide::Serialize::Call>() const {
  return condition_as_Call();
}

template<> inline const Halide::Serialize::Variable *Specialization::condition_as<Halide::Serialize::Variable>() const {
  return condition_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Specialization::condition_as<Halide::Serialize::Shuffle>() const {
  return condition_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Specialization::condition_as<Halide::Serialize::VectorReduce>() const {
  return condition_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Specialization::condition_as<Halide::Serialize::UndefinedExpr>() const {
  return condition_as_UndefinedExpr();
}

struct SpecializationBuilder {
  typedef Specialization Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_condition_type(Halide::Serialize::Expr condition_type) {
    fbb_.AddElement<uint8_t>(Specialization::VT_CONDITION_TYPE, static_cast<uint8_t>(condition_type), 0);
  }
  void add_condition(::flatbuffers::Offset<void> condition) {
    fbb_.AddOffset(Specialization::VT_CONDITION, condition);
  }
  void add_definition(::flatbuffers::Offset<Halide::Serialize::Definition> definition) {
    fbb_.AddOffset(Specialization::VT_DEFINITION, definition);
  }
  void add_failure_message(::flatbuffers::Offset<::flatbuffers::String> failure_message) {
    fbb_.AddOffset(Specialization::VT_FAILURE_MESSAGE, failure_message);
  }
  explicit SpecializationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Specialization> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Specialization>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Specialization> CreateSpecialization(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    ::flatbuffers::Offset<Halide::Serialize::Definition> definition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> failure_message = 0) {
  SpecializationBuilder builder_(_fbb);
  builder_.add_failure_message(failure_message);
  builder_.add_definition(definition);
  builder_.add_condition(condition);
  builder_.add_condition_type(condition_type);
  return builder_.Finish();
}

struct Specialization::Traits {
  using type = Specialization;
  static auto constexpr Create = CreateSpecialization;
};

inline ::flatbuffers::Offset<Specialization> CreateSpecializationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr condition_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> condition = 0,
    ::flatbuffers::Offset<Halide::Serialize::Definition> definition = 0,
    const char *failure_message = nullptr) {
  auto failure_message__ = failure_message ? _fbb.CreateString(failure_message) : 0;
  return Halide::Serialize::CreateSpecialization(
      _fbb,
      condition_type,
      condition,
      definition,
      failure_message__);
}

struct Split FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SplitBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OLD_VAR = 4,
    VT_OUTER = 6,
    VT_INNER = 8,
    VT_FACTOR_TYPE = 10,
    VT_FACTOR = 12,
    VT_EXACT = 14,
    VT_TAIL = 16,
    VT_SPLIT_TYPE = 18
  };
  const ::flatbuffers::String *old_var() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OLD_VAR);
  }
  const ::flatbuffers::String *outer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OUTER);
  }
  const ::flatbuffers::String *inner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INNER);
  }
  Halide::Serialize::Expr factor_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_FACTOR_TYPE, 0));
  }
  const void *factor() const {
    return GetPointer<const void *>(VT_FACTOR);
  }
  template<typename T> const T *factor_as() const;
  const Halide::Serialize::IntImm *factor_as_IntImm() const {
    return factor_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(factor()) : nullptr;
  }
  const Halide::Serialize::UIntImm *factor_as_UIntImm() const {
    return factor_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(factor()) : nullptr;
  }
  const Halide::Serialize::FloatImm *factor_as_FloatImm() const {
    return factor_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(factor()) : nullptr;
  }
  const Halide::Serialize::StringImm *factor_as_StringImm() const {
    return factor_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(factor()) : nullptr;
  }
  const Halide::Serialize::Cast *factor_as_Cast() const {
    return factor_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(factor()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *factor_as_Reinterpret() const {
    return factor_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(factor()) : nullptr;
  }
  const Halide::Serialize::Add *factor_as_Add() const {
    return factor_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(factor()) : nullptr;
  }
  const Halide::Serialize::Sub *factor_as_Sub() const {
    return factor_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(factor()) : nullptr;
  }
  const Halide::Serialize::Mul *factor_as_Mul() const {
    return factor_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(factor()) : nullptr;
  }
  const Halide::Serialize::Div *factor_as_Div() const {
    return factor_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(factor()) : nullptr;
  }
  const Halide::Serialize::Mod *factor_as_Mod() const {
    return factor_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(factor()) : nullptr;
  }
  const Halide::Serialize::Min *factor_as_Min() const {
    return factor_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(factor()) : nullptr;
  }
  const Halide::Serialize::Max *factor_as_Max() const {
    return factor_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(factor()) : nullptr;
  }
  const Halide::Serialize::EQ *factor_as_EQ() const {
    return factor_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(factor()) : nullptr;
  }
  const Halide::Serialize::NE *factor_as_NE() const {
    return factor_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(factor()) : nullptr;
  }
  const Halide::Serialize::LT *factor_as_LT() const {
    return factor_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(factor()) : nullptr;
  }
  const Halide::Serialize::LE *factor_as_LE() const {
    return factor_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(factor()) : nullptr;
  }
  const Halide::Serialize::GT *factor_as_GT() const {
    return factor_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(factor()) : nullptr;
  }
  const Halide::Serialize::GE *factor_as_GE() const {
    return factor_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(factor()) : nullptr;
  }
  const Halide::Serialize::And *factor_as_And() const {
    return factor_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(factor()) : nullptr;
  }
  const Halide::Serialize::Or *factor_as_Or() const {
    return factor_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(factor()) : nullptr;
  }
  const Halide::Serialize::Not *factor_as_Not() const {
    return factor_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(factor()) : nullptr;
  }
  const Halide::Serialize::Select *factor_as_Select() const {
    return factor_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(factor()) : nullptr;
  }
  const Halide::Serialize::Load *factor_as_Load() const {
    return factor_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(factor()) : nullptr;
  }
  const Halide::Serialize::Ramp *factor_as_Ramp() const {
    return factor_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(factor()) : nullptr;
  }
  const Halide::Serialize::Broadcast *factor_as_Broadcast() const {
    return factor_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(factor()) : nullptr;
  }
  const Halide::Serialize::Let *factor_as_Let() const {
    return factor_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(factor()) : nullptr;
  }
  const Halide::Serialize::Call *factor_as_Call() const {
    return factor_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(factor()) : nullptr;
  }
  const Halide::Serialize::Variable *factor_as_Variable() const {
    return factor_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(factor()) : nullptr;
  }
  const Halide::Serialize::Shuffle *factor_as_Shuffle() const {
    return factor_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(factor()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *factor_as_VectorReduce() const {
    return factor_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(factor()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *factor_as_UndefinedExpr() const {
    return factor_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(factor()) : nullptr;
  }
  bool exact() const {
    return GetField<uint8_t>(VT_EXACT, 0) != 0;
  }
  Halide::Serialize::TailStrategy tail() const {
    return static_cast<Halide::Serialize::TailStrategy>(GetField<uint8_t>(VT_TAIL, 0));
  }
  Halide::Serialize::SplitType split_type() const {
    return static_cast<Halide::Serialize::SplitType>(GetField<uint8_t>(VT_SPLIT_TYPE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OLD_VAR) &&
           verifier.VerifyString(old_var()) &&
           VerifyOffset(verifier, VT_OUTER) &&
           verifier.VerifyString(outer()) &&
           VerifyOffset(verifier, VT_INNER) &&
           verifier.VerifyString(inner()) &&
           VerifyField<uint8_t>(verifier, VT_FACTOR_TYPE, 1) &&
           VerifyOffset(verifier, VT_FACTOR) &&
           VerifyExpr(verifier, factor(), factor_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXACT, 1) &&
           VerifyField<uint8_t>(verifier, VT_TAIL, 1) &&
           VerifyField<uint8_t>(verifier, VT_SPLIT_TYPE, 1) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Split::factor_as<Halide::Serialize::IntImm>() const {
  return factor_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Split::factor_as<Halide::Serialize::UIntImm>() const {
  return factor_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Split::factor_as<Halide::Serialize::FloatImm>() const {
  return factor_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Split::factor_as<Halide::Serialize::StringImm>() const {
  return factor_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Split::factor_as<Halide::Serialize::Cast>() const {
  return factor_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Split::factor_as<Halide::Serialize::Reinterpret>() const {
  return factor_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Split::factor_as<Halide::Serialize::Add>() const {
  return factor_as_Add();
}

template<> inline const Halide::Serialize::Sub *Split::factor_as<Halide::Serialize::Sub>() const {
  return factor_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Split::factor_as<Halide::Serialize::Mul>() const {
  return factor_as_Mul();
}

template<> inline const Halide::Serialize::Div *Split::factor_as<Halide::Serialize::Div>() const {
  return factor_as_Div();
}

template<> inline const Halide::Serialize::Mod *Split::factor_as<Halide::Serialize::Mod>() const {
  return factor_as_Mod();
}

template<> inline const Halide::Serialize::Min *Split::factor_as<Halide::Serialize::Min>() const {
  return factor_as_Min();
}

template<> inline const Halide::Serialize::Max *Split::factor_as<Halide::Serialize::Max>() const {
  return factor_as_Max();
}

template<> inline const Halide::Serialize::EQ *Split::factor_as<Halide::Serialize::EQ>() const {
  return factor_as_EQ();
}

template<> inline const Halide::Serialize::NE *Split::factor_as<Halide::Serialize::NE>() const {
  return factor_as_NE();
}

template<> inline const Halide::Serialize::LT *Split::factor_as<Halide::Serialize::LT>() const {
  return factor_as_LT();
}

template<> inline const Halide::Serialize::LE *Split::factor_as<Halide::Serialize::LE>() const {
  return factor_as_LE();
}

template<> inline const Halide::Serialize::GT *Split::factor_as<Halide::Serialize::GT>() const {
  return factor_as_GT();
}

template<> inline const Halide::Serialize::GE *Split::factor_as<Halide::Serialize::GE>() const {
  return factor_as_GE();
}

template<> inline const Halide::Serialize::And *Split::factor_as<Halide::Serialize::And>() const {
  return factor_as_And();
}

template<> inline const Halide::Serialize::Or *Split::factor_as<Halide::Serialize::Or>() const {
  return factor_as_Or();
}

template<> inline const Halide::Serialize::Not *Split::factor_as<Halide::Serialize::Not>() const {
  return factor_as_Not();
}

template<> inline const Halide::Serialize::Select *Split::factor_as<Halide::Serialize::Select>() const {
  return factor_as_Select();
}

template<> inline const Halide::Serialize::Load *Split::factor_as<Halide::Serialize::Load>() const {
  return factor_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Split::factor_as<Halide::Serialize::Ramp>() const {
  return factor_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Split::factor_as<Halide::Serialize::Broadcast>() const {
  return factor_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Split::factor_as<Halide::Serialize::Let>() const {
  return factor_as_Let();
}

template<> inline const Halide::Serialize::Call *Split::factor_as<Halide::Serialize::Call>() const {
  return factor_as_Call();
}

template<> inline const Halide::Serialize::Variable *Split::factor_as<Halide::Serialize::Variable>() const {
  return factor_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Split::factor_as<Halide::Serialize::Shuffle>() const {
  return factor_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Split::factor_as<Halide::Serialize::VectorReduce>() const {
  return factor_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Split::factor_as<Halide::Serialize::UndefinedExpr>() const {
  return factor_as_UndefinedExpr();
}

struct SplitBuilder {
  typedef Split Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_old_var(::flatbuffers::Offset<::flatbuffers::String> old_var) {
    fbb_.AddOffset(Split::VT_OLD_VAR, old_var);
  }
  void add_outer(::flatbuffers::Offset<::flatbuffers::String> outer) {
    fbb_.AddOffset(Split::VT_OUTER, outer);
  }
  void add_inner(::flatbuffers::Offset<::flatbuffers::String> inner) {
    fbb_.AddOffset(Split::VT_INNER, inner);
  }
  void add_factor_type(Halide::Serialize::Expr factor_type) {
    fbb_.AddElement<uint8_t>(Split::VT_FACTOR_TYPE, static_cast<uint8_t>(factor_type), 0);
  }
  void add_factor(::flatbuffers::Offset<void> factor) {
    fbb_.AddOffset(Split::VT_FACTOR, factor);
  }
  void add_exact(bool exact) {
    fbb_.AddElement<uint8_t>(Split::VT_EXACT, static_cast<uint8_t>(exact), 0);
  }
  void add_tail(Halide::Serialize::TailStrategy tail) {
    fbb_.AddElement<uint8_t>(Split::VT_TAIL, static_cast<uint8_t>(tail), 0);
  }
  void add_split_type(Halide::Serialize::SplitType split_type) {
    fbb_.AddElement<uint8_t>(Split::VT_SPLIT_TYPE, static_cast<uint8_t>(split_type), 0);
  }
  explicit SplitBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Split> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Split>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Split> CreateSplit(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> old_var = 0,
    ::flatbuffers::Offset<::flatbuffers::String> outer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> inner = 0,
    Halide::Serialize::Expr factor_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> factor = 0,
    bool exact = false,
    Halide::Serialize::TailStrategy tail = Halide::Serialize::TailStrategy::RoundUp,
    Halide::Serialize::SplitType split_type = Halide::Serialize::SplitType::SplitVar) {
  SplitBuilder builder_(_fbb);
  builder_.add_factor(factor);
  builder_.add_inner(inner);
  builder_.add_outer(outer);
  builder_.add_old_var(old_var);
  builder_.add_split_type(split_type);
  builder_.add_tail(tail);
  builder_.add_exact(exact);
  builder_.add_factor_type(factor_type);
  return builder_.Finish();
}

struct Split::Traits {
  using type = Split;
  static auto constexpr Create = CreateSplit;
};

inline ::flatbuffers::Offset<Split> CreateSplitDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *old_var = nullptr,
    const char *outer = nullptr,
    const char *inner = nullptr,
    Halide::Serialize::Expr factor_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> factor = 0,
    bool exact = false,
    Halide::Serialize::TailStrategy tail = Halide::Serialize::TailStrategy::RoundUp,
    Halide::Serialize::SplitType split_type = Halide::Serialize::SplitType::SplitVar) {
  auto old_var__ = old_var ? _fbb.CreateString(old_var) : 0;
  auto outer__ = outer ? _fbb.CreateString(outer) : 0;
  auto inner__ = inner ? _fbb.CreateString(inner) : 0;
  return Halide::Serialize::CreateSplit(
      _fbb,
      old_var__,
      outer__,
      inner__,
      factor_type,
      factor,
      exact,
      tail,
      split_type);
}

struct Dim FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DimBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VAR = 4,
    VT_FOR_TYPE = 6,
    VT_DEVICE_API = 8,
    VT_DIM_TYPE = 10,
    VT_PARTITION_POLICY = 12
  };
  const ::flatbuffers::String *var() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR);
  }
  Halide::Serialize::ForType for_type() const {
    return static_cast<Halide::Serialize::ForType>(GetField<int8_t>(VT_FOR_TYPE, 0));
  }
  Halide::Serialize::DeviceAPI device_api() const {
    return static_cast<Halide::Serialize::DeviceAPI>(GetField<int8_t>(VT_DEVICE_API, 0));
  }
  Halide::Serialize::DimType dim_type() const {
    return static_cast<Halide::Serialize::DimType>(GetField<uint8_t>(VT_DIM_TYPE, 0));
  }
  Halide::Serialize::Partition partition_policy() const {
    return static_cast<Halide::Serialize::Partition>(GetField<int8_t>(VT_PARTITION_POLICY, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VAR) &&
           verifier.VerifyString(var()) &&
           VerifyField<int8_t>(verifier, VT_FOR_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_DEVICE_API, 1) &&
           VerifyField<uint8_t>(verifier, VT_DIM_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_PARTITION_POLICY, 1) &&
           verifier.EndTable();
  }
};

struct DimBuilder {
  typedef Dim Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_var(::flatbuffers::Offset<::flatbuffers::String> var) {
    fbb_.AddOffset(Dim::VT_VAR, var);
  }
  void add_for_type(Halide::Serialize::ForType for_type) {
    fbb_.AddElement<int8_t>(Dim::VT_FOR_TYPE, static_cast<int8_t>(for_type), 0);
  }
  void add_device_api(Halide::Serialize::DeviceAPI device_api) {
    fbb_.AddElement<int8_t>(Dim::VT_DEVICE_API, static_cast<int8_t>(device_api), 0);
  }
  void add_dim_type(Halide::Serialize::DimType dim_type) {
    fbb_.AddElement<uint8_t>(Dim::VT_DIM_TYPE, static_cast<uint8_t>(dim_type), 0);
  }
  void add_partition_policy(Halide::Serialize::Partition partition_policy) {
    fbb_.AddElement<int8_t>(Dim::VT_PARTITION_POLICY, static_cast<int8_t>(partition_policy), 0);
  }
  explicit DimBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Dim> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Dim>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Dim> CreateDim(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> var = 0,
    Halide::Serialize::ForType for_type = Halide::Serialize::ForType::Serial,
    Halide::Serialize::DeviceAPI device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::DimType dim_type = Halide::Serialize::DimType::PureVar,
    Halide::Serialize::Partition partition_policy = Halide::Serialize::Partition::Auto) {
  DimBuilder builder_(_fbb);
  builder_.add_var(var);
  builder_.add_partition_policy(partition_policy);
  builder_.add_dim_type(dim_type);
  builder_.add_device_api(device_api);
  builder_.add_for_type(for_type);
  return builder_.Finish();
}

struct Dim::Traits {
  using type = Dim;
  static auto constexpr Create = CreateDim;
};

inline ::flatbuffers::Offset<Dim> CreateDimDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *var = nullptr,
    Halide::Serialize::ForType for_type = Halide::Serialize::ForType::Serial,
    Halide::Serialize::DeviceAPI device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::DimType dim_type = Halide::Serialize::DimType::PureVar,
    Halide::Serialize::Partition partition_policy = Halide::Serialize::Partition::Auto) {
  auto var__ = var ? _fbb.CreateString(var) : 0;
  return Halide::Serialize::CreateDim(
      _fbb,
      var__,
      for_type,
      device_api,
      dim_type,
      partition_policy);
}

struct FuseLoopLevel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FuseLoopLevelBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSE_LEVEL = 4,
    VT_ALIGN_DIMENSION_NAMES = 6,
    VT_ALIGN_STRATEGIES = 8
  };
  const Halide::Serialize::LoopLevel *fuse_level() const {
    return GetPointer<const Halide::Serialize::LoopLevel *>(VT_FUSE_LEVEL);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *align_dimension_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ALIGN_DIMENSION_NAMES);
  }
  const ::flatbuffers::Vector<Halide::Serialize::LoopAlignStrategy> *align_strategies() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::LoopAlignStrategy> *>(VT_ALIGN_STRATEGIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUSE_LEVEL) &&
           verifier.VerifyTable(fuse_level()) &&
           VerifyOffset(verifier, VT_ALIGN_DIMENSION_NAMES) &&
           verifier.VerifyVector(align_dimension_names()) &&
           verifier.VerifyVectorOfStrings(align_dimension_names()) &&
           VerifyOffset(verifier, VT_ALIGN_STRATEGIES) &&
           verifier.VerifyVector(align_strategies()) &&
           verifier.EndTable();
  }
};

struct FuseLoopLevelBuilder {
  typedef FuseLoopLevel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_fuse_level(::flatbuffers::Offset<Halide::Serialize::LoopLevel> fuse_level) {
    fbb_.AddOffset(FuseLoopLevel::VT_FUSE_LEVEL, fuse_level);
  }
  void add_align_dimension_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> align_dimension_names) {
    fbb_.AddOffset(FuseLoopLevel::VT_ALIGN_DIMENSION_NAMES, align_dimension_names);
  }
  void add_align_strategies(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::LoopAlignStrategy>> align_strategies) {
    fbb_.AddOffset(FuseLoopLevel::VT_ALIGN_STRATEGIES, align_strategies);
  }
  explicit FuseLoopLevelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FuseLoopLevel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FuseLoopLevel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FuseLoopLevel> CreateFuseLoopLevel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> fuse_level = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> align_dimension_names = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::LoopAlignStrategy>> align_strategies = 0) {
  FuseLoopLevelBuilder builder_(_fbb);
  builder_.add_align_strategies(align_strategies);
  builder_.add_align_dimension_names(align_dimension_names);
  builder_.add_fuse_level(fuse_level);
  return builder_.Finish();
}

struct FuseLoopLevel::Traits {
  using type = FuseLoopLevel;
  static auto constexpr Create = CreateFuseLoopLevel;
};

inline ::flatbuffers::Offset<FuseLoopLevel> CreateFuseLoopLevelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Halide::Serialize::LoopLevel> fuse_level = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *align_dimension_names = nullptr,
    const std::vector<Halide::Serialize::LoopAlignStrategy> *align_strategies = nullptr) {
  auto align_dimension_names__ = align_dimension_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*align_dimension_names) : 0;
  auto align_strategies__ = align_strategies ? _fbb.CreateVector<Halide::Serialize::LoopAlignStrategy>(*align_strategies) : 0;
  return Halide::Serialize::CreateFuseLoopLevel(
      _fbb,
      fuse_level,
      align_dimension_names__,
      align_strategies__);
}

struct FusedPair FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FusedPairBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUNC_1 = 4,
    VT_FUNC_2 = 6,
    VT_STAGE_1 = 8,
    VT_STAGE_2 = 10,
    VT_VAR_NAME = 12
  };
  const ::flatbuffers::String *func_1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNC_1);
  }
  const ::flatbuffers::String *func_2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNC_2);
  }
  int32_t stage_1() const {
    return GetField<int32_t>(VT_STAGE_1, 0);
  }
  int32_t stage_2() const {
    return GetField<int32_t>(VT_STAGE_2, 0);
  }
  const ::flatbuffers::String *var_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VAR_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUNC_1) &&
           verifier.VerifyString(func_1()) &&
           VerifyOffset(verifier, VT_FUNC_2) &&
           verifier.VerifyString(func_2()) &&
           VerifyField<int32_t>(verifier, VT_STAGE_1, 4) &&
           VerifyField<int32_t>(verifier, VT_STAGE_2, 4) &&
           VerifyOffset(verifier, VT_VAR_NAME) &&
           verifier.VerifyString(var_name()) &&
           verifier.EndTable();
  }
};

struct FusedPairBuilder {
  typedef FusedPair Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_func_1(::flatbuffers::Offset<::flatbuffers::String> func_1) {
    fbb_.AddOffset(FusedPair::VT_FUNC_1, func_1);
  }
  void add_func_2(::flatbuffers::Offset<::flatbuffers::String> func_2) {
    fbb_.AddOffset(FusedPair::VT_FUNC_2, func_2);
  }
  void add_stage_1(int32_t stage_1) {
    fbb_.AddElement<int32_t>(FusedPair::VT_STAGE_1, stage_1, 0);
  }
  void add_stage_2(int32_t stage_2) {
    fbb_.AddElement<int32_t>(FusedPair::VT_STAGE_2, stage_2, 0);
  }
  void add_var_name(::flatbuffers::Offset<::flatbuffers::String> var_name) {
    fbb_.AddOffset(FusedPair::VT_VAR_NAME, var_name);
  }
  explicit FusedPairBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FusedPair> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FusedPair>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FusedPair> CreateFusedPair(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> func_1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> func_2 = 0,
    int32_t stage_1 = 0,
    int32_t stage_2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> var_name = 0) {
  FusedPairBuilder builder_(_fbb);
  builder_.add_var_name(var_name);
  builder_.add_stage_2(stage_2);
  builder_.add_stage_1(stage_1);
  builder_.add_func_2(func_2);
  builder_.add_func_1(func_1);
  return builder_.Finish();
}

struct FusedPair::Traits {
  using type = FusedPair;
  static auto constexpr Create = CreateFusedPair;
};

inline ::flatbuffers::Offset<FusedPair> CreateFusedPairDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *func_1 = nullptr,
    const char *func_2 = nullptr,
    int32_t stage_1 = 0,
    int32_t stage_2 = 0,
    const char *var_name = nullptr) {
  auto func_1__ = func_1 ? _fbb.CreateString(func_1) : 0;
  auto func_2__ = func_2 ? _fbb.CreateString(func_2) : 0;
  auto var_name__ = var_name ? _fbb.CreateString(var_name) : 0;
  return Halide::Serialize::CreateFusedPair(
      _fbb,
      func_1__,
      func_2__,
      stage_1,
      stage_2,
      var_name__);
}

struct StageSchedule FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StageScheduleBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RVARS = 4,
    VT_SPLITS = 6,
    VT_DIMS = 8,
    VT_PREFETCHES = 10,
    VT_FUSE_LEVEL = 12,
    VT_FUSED_PAIRS = 14,
    VT_TOUCHED = 16,
    VT_ALLOW_RACE_CONDITIONS = 18,
    VT_ATOMIC = 20,
    VT_OVERRIDE_ATOMIC_ASSOCIATIVITY_TEST = 22
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *rvars() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *>(VT_RVARS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Split>> *splits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Split>> *>(VT_SPLITS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Dim>> *dims() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Dim>> *>(VT_DIMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>> *prefetches() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>> *>(VT_PREFETCHES);
  }
  const Halide::Serialize::FuseLoopLevel *fuse_level() const {
    return GetPointer<const Halide::Serialize::FuseLoopLevel *>(VT_FUSE_LEVEL);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::FusedPair>> *fused_pairs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::FusedPair>> *>(VT_FUSED_PAIRS);
  }
  bool touched() const {
    return GetField<uint8_t>(VT_TOUCHED, 0) != 0;
  }
  bool allow_race_conditions() const {
    return GetField<uint8_t>(VT_ALLOW_RACE_CONDITIONS, 0) != 0;
  }
  bool atomic() const {
    return GetField<uint8_t>(VT_ATOMIC, 0) != 0;
  }
  bool override_atomic_associativity_test() const {
    return GetField<uint8_t>(VT_OVERRIDE_ATOMIC_ASSOCIATIVITY_TEST, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RVARS) &&
           verifier.VerifyVector(rvars()) &&
           verifier.VerifyVectorOfTables(rvars()) &&
           VerifyOffset(verifier, VT_SPLITS) &&
           verifier.VerifyVector(splits()) &&
           verifier.VerifyVectorOfTables(splits()) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           verifier.VerifyVectorOfTables(dims()) &&
           VerifyOffset(verifier, VT_PREFETCHES) &&
           verifier.VerifyVector(prefetches()) &&
           verifier.VerifyVectorOfTables(prefetches()) &&
           VerifyOffset(verifier, VT_FUSE_LEVEL) &&
           verifier.VerifyTable(fuse_level()) &&
           VerifyOffset(verifier, VT_FUSED_PAIRS) &&
           verifier.VerifyVector(fused_pairs()) &&
           verifier.VerifyVectorOfTables(fused_pairs()) &&
           VerifyField<uint8_t>(verifier, VT_TOUCHED, 1) &&
           VerifyField<uint8_t>(verifier, VT_ALLOW_RACE_CONDITIONS, 1) &&
           VerifyField<uint8_t>(verifier, VT_ATOMIC, 1) &&
           VerifyField<uint8_t>(verifier, VT_OVERRIDE_ATOMIC_ASSOCIATIVITY_TEST, 1) &&
           verifier.EndTable();
  }
};

struct StageScheduleBuilder {
  typedef StageSchedule Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_rvars(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>> rvars) {
    fbb_.AddOffset(StageSchedule::VT_RVARS, rvars);
  }
  void add_splits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Split>>> splits) {
    fbb_.AddOffset(StageSchedule::VT_SPLITS, splits);
  }
  void add_dims(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Dim>>> dims) {
    fbb_.AddOffset(StageSchedule::VT_DIMS, dims);
  }
  void add_prefetches(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>>> prefetches) {
    fbb_.AddOffset(StageSchedule::VT_PREFETCHES, prefetches);
  }
  void add_fuse_level(::flatbuffers::Offset<Halide::Serialize::FuseLoopLevel> fuse_level) {
    fbb_.AddOffset(StageSchedule::VT_FUSE_LEVEL, fuse_level);
  }
  void add_fused_pairs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::FusedPair>>> fused_pairs) {
    fbb_.AddOffset(StageSchedule::VT_FUSED_PAIRS, fused_pairs);
  }
  void add_touched(bool touched) {
    fbb_.AddElement<uint8_t>(StageSchedule::VT_TOUCHED, static_cast<uint8_t>(touched), 0);
  }
  void add_allow_race_conditions(bool allow_race_conditions) {
    fbb_.AddElement<uint8_t>(StageSchedule::VT_ALLOW_RACE_CONDITIONS, static_cast<uint8_t>(allow_race_conditions), 0);
  }
  void add_atomic(bool atomic) {
    fbb_.AddElement<uint8_t>(StageSchedule::VT_ATOMIC, static_cast<uint8_t>(atomic), 0);
  }
  void add_override_atomic_associativity_test(bool override_atomic_associativity_test) {
    fbb_.AddElement<uint8_t>(StageSchedule::VT_OVERRIDE_ATOMIC_ASSOCIATIVITY_TEST, static_cast<uint8_t>(override_atomic_associativity_test), 0);
  }
  explicit StageScheduleBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StageSchedule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StageSchedule>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StageSchedule> CreateStageSchedule(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>> rvars = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Split>>> splits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Dim>>> dims = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>>> prefetches = 0,
    ::flatbuffers::Offset<Halide::Serialize::FuseLoopLevel> fuse_level = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::FusedPair>>> fused_pairs = 0,
    bool touched = false,
    bool allow_race_conditions = false,
    bool atomic = false,
    bool override_atomic_associativity_test = false) {
  StageScheduleBuilder builder_(_fbb);
  builder_.add_fused_pairs(fused_pairs);
  builder_.add_fuse_level(fuse_level);
  builder_.add_prefetches(prefetches);
  builder_.add_dims(dims);
  builder_.add_splits(splits);
  builder_.add_rvars(rvars);
  builder_.add_override_atomic_associativity_test(override_atomic_associativity_test);
  builder_.add_atomic(atomic);
  builder_.add_allow_race_conditions(allow_race_conditions);
  builder_.add_touched(touched);
  return builder_.Finish();
}

struct StageSchedule::Traits {
  using type = StageSchedule;
  static auto constexpr Create = CreateStageSchedule;
};

inline ::flatbuffers::Offset<StageSchedule> CreateStageScheduleDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>> *rvars = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Split>> *splits = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Dim>> *dims = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>> *prefetches = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::FuseLoopLevel> fuse_level = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::FusedPair>> *fused_pairs = nullptr,
    bool touched = false,
    bool allow_race_conditions = false,
    bool atomic = false,
    bool override_atomic_associativity_test = false) {
  auto rvars__ = rvars ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::ReductionVariable>>(*rvars) : 0;
  auto splits__ = splits ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Split>>(*splits) : 0;
  auto dims__ = dims ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Dim>>(*dims) : 0;
  auto prefetches__ = prefetches ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::PrefetchDirective>>(*prefetches) : 0;
  auto fused_pairs__ = fused_pairs ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::FusedPair>>(*fused_pairs) : 0;
  return Halide::Serialize::CreateStageSchedule(
      _fbb,
      rvars__,
      splits__,
      dims__,
      prefetches__,
      fuse_level,
      fused_pairs__,
      touched,
      allow_race_conditions,
      atomic,
      override_atomic_associativity_test);
}

struct Definition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DefinitionBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_INIT = 4,
    VT_PREDICATE_TYPE = 6,
    VT_PREDICATE = 8,
    VT_VALUES_TYPE = 10,
    VT_VALUES = 12,
    VT_ARGS_TYPE = 14,
    VT_ARGS = 16,
    VT_STAGE_SCHEDULE = 18,
    VT_SPECIALIZATIONS = 20,
    VT_SOURCE_LOCATION = 22
  };
  bool is_init() const {
    return GetField<uint8_t>(VT_IS_INIT, 0) != 0;
  }
  Halide::Serialize::Expr predicate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_PREDICATE_TYPE, 0));
  }
  const void *predicate() const {
    return GetPointer<const void *>(VT_PREDICATE);
  }
  template<typename T> const T *predicate_as() const;
  const Halide::Serialize::IntImm *predicate_as_IntImm() const {
    return predicate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *predicate_as_UIntImm() const {
    return predicate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *predicate_as_FloatImm() const {
    return predicate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::StringImm *predicate_as_StringImm() const {
    return predicate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Cast *predicate_as_Cast() const {
    return predicate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *predicate_as_Reinterpret() const {
    return predicate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Add *predicate_as_Add() const {
    return predicate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Sub *predicate_as_Sub() const {
    return predicate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mul *predicate_as_Mul() const {
    return predicate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Div *predicate_as_Div() const {
    return predicate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Mod *predicate_as_Mod() const {
    return predicate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Min *predicate_as_Min() const {
    return predicate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Max *predicate_as_Max() const {
    return predicate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(predicate()) : nullptr;
  }
  const Halide::Serialize::EQ *predicate_as_EQ() const {
    return predicate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(predicate()) : nullptr;
  }
  const Halide::Serialize::NE *predicate_as_NE() const {
    return predicate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LT *predicate_as_LT() const {
    return predicate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::LE *predicate_as_LE() const {
    return predicate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GT *predicate_as_GT() const {
    return predicate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(predicate()) : nullptr;
  }
  const Halide::Serialize::GE *predicate_as_GE() const {
    return predicate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(predicate()) : nullptr;
  }
  const Halide::Serialize::And *predicate_as_And() const {
    return predicate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Or *predicate_as_Or() const {
    return predicate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Not *predicate_as_Not() const {
    return predicate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Select *predicate_as_Select() const {
    return predicate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Load *predicate_as_Load() const {
    return predicate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Ramp *predicate_as_Ramp() const {
    return predicate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *predicate_as_Broadcast() const {
    return predicate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Let *predicate_as_Let() const {
    return predicate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Call *predicate_as_Call() const {
    return predicate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Variable *predicate_as_Variable() const {
    return predicate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(predicate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *predicate_as_Shuffle() const {
    return predicate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(predicate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *predicate_as_VectorReduce() const {
    return predicate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(predicate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *predicate_as_UndefinedExpr() const {
    return predicate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(predicate()) : nullptr;
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *values_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_VALUES_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_VALUES);
  }
  const ::flatbuffers::Vector<Halide::Serialize::Expr> *args_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Expr> *>(VT_ARGS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_ARGS);
  }
  const Halide::Serialize::StageSchedule *stage_schedule() const {
    return GetPointer<const Halide::Serialize::StageSchedule *>(VT_STAGE_SCHEDULE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Specialization>> *specializations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Specialization>> *>(VT_SPECIALIZATIONS);
  }
  const ::flatbuffers::String *source_location() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE_LOCATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_INIT, 1) &&
           VerifyField<uint8_t>(verifier, VT_PREDICATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_PREDICATE) &&
           VerifyExpr(verifier, predicate(), predicate_type()) &&
           VerifyOffset(verifier, VT_VALUES_TYPE) &&
           verifier.VerifyVector(values_type()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyExprVector(verifier, values(), values_type()) &&
           VerifyOffset(verifier, VT_ARGS_TYPE) &&
           verifier.VerifyVector(args_type()) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyVector(args()) &&
           VerifyExprVector(verifier, args(), args_type()) &&
           VerifyOffset(verifier, VT_STAGE_SCHEDULE) &&
           verifier.VerifyTable(stage_schedule()) &&
           VerifyOffset(verifier, VT_SPECIALIZATIONS) &&
           verifier.VerifyVector(specializations()) &&
           verifier.VerifyVectorOfTables(specializations()) &&
           VerifyOffset(verifier, VT_SOURCE_LOCATION) &&
           verifier.VerifyString(source_location()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Definition::predicate_as<Halide::Serialize::IntImm>() const {
  return predicate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Definition::predicate_as<Halide::Serialize::UIntImm>() const {
  return predicate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Definition::predicate_as<Halide::Serialize::FloatImm>() const {
  return predicate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Definition::predicate_as<Halide::Serialize::StringImm>() const {
  return predicate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Definition::predicate_as<Halide::Serialize::Cast>() const {
  return predicate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Definition::predicate_as<Halide::Serialize::Reinterpret>() const {
  return predicate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Definition::predicate_as<Halide::Serialize::Add>() const {
  return predicate_as_Add();
}

template<> inline const Halide::Serialize::Sub *Definition::predicate_as<Halide::Serialize::Sub>() const {
  return predicate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Definition::predicate_as<Halide::Serialize::Mul>() const {
  return predicate_as_Mul();
}

template<> inline const Halide::Serialize::Div *Definition::predicate_as<Halide::Serialize::Div>() const {
  return predicate_as_Div();
}

template<> inline const Halide::Serialize::Mod *Definition::predicate_as<Halide::Serialize::Mod>() const {
  return predicate_as_Mod();
}

template<> inline const Halide::Serialize::Min *Definition::predicate_as<Halide::Serialize::Min>() const {
  return predicate_as_Min();
}

template<> inline const Halide::Serialize::Max *Definition::predicate_as<Halide::Serialize::Max>() const {
  return predicate_as_Max();
}

template<> inline const Halide::Serialize::EQ *Definition::predicate_as<Halide::Serialize::EQ>() const {
  return predicate_as_EQ();
}

template<> inline const Halide::Serialize::NE *Definition::predicate_as<Halide::Serialize::NE>() const {
  return predicate_as_NE();
}

template<> inline const Halide::Serialize::LT *Definition::predicate_as<Halide::Serialize::LT>() const {
  return predicate_as_LT();
}

template<> inline const Halide::Serialize::LE *Definition::predicate_as<Halide::Serialize::LE>() const {
  return predicate_as_LE();
}

template<> inline const Halide::Serialize::GT *Definition::predicate_as<Halide::Serialize::GT>() const {
  return predicate_as_GT();
}

template<> inline const Halide::Serialize::GE *Definition::predicate_as<Halide::Serialize::GE>() const {
  return predicate_as_GE();
}

template<> inline const Halide::Serialize::And *Definition::predicate_as<Halide::Serialize::And>() const {
  return predicate_as_And();
}

template<> inline const Halide::Serialize::Or *Definition::predicate_as<Halide::Serialize::Or>() const {
  return predicate_as_Or();
}

template<> inline const Halide::Serialize::Not *Definition::predicate_as<Halide::Serialize::Not>() const {
  return predicate_as_Not();
}

template<> inline const Halide::Serialize::Select *Definition::predicate_as<Halide::Serialize::Select>() const {
  return predicate_as_Select();
}

template<> inline const Halide::Serialize::Load *Definition::predicate_as<Halide::Serialize::Load>() const {
  return predicate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Definition::predicate_as<Halide::Serialize::Ramp>() const {
  return predicate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Definition::predicate_as<Halide::Serialize::Broadcast>() const {
  return predicate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Definition::predicate_as<Halide::Serialize::Let>() const {
  return predicate_as_Let();
}

template<> inline const Halide::Serialize::Call *Definition::predicate_as<Halide::Serialize::Call>() const {
  return predicate_as_Call();
}

template<> inline const Halide::Serialize::Variable *Definition::predicate_as<Halide::Serialize::Variable>() const {
  return predicate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Definition::predicate_as<Halide::Serialize::Shuffle>() const {
  return predicate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Definition::predicate_as<Halide::Serialize::VectorReduce>() const {
  return predicate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Definition::predicate_as<Halide::Serialize::UndefinedExpr>() const {
  return predicate_as_UndefinedExpr();
}

struct DefinitionBuilder {
  typedef Definition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_is_init(bool is_init) {
    fbb_.AddElement<uint8_t>(Definition::VT_IS_INIT, static_cast<uint8_t>(is_init), 0);
  }
  void add_predicate_type(Halide::Serialize::Expr predicate_type) {
    fbb_.AddElement<uint8_t>(Definition::VT_PREDICATE_TYPE, static_cast<uint8_t>(predicate_type), 0);
  }
  void add_predicate(::flatbuffers::Offset<void> predicate) {
    fbb_.AddOffset(Definition::VT_PREDICATE, predicate);
  }
  void add_values_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> values_type) {
    fbb_.AddOffset(Definition::VT_VALUES_TYPE, values_type);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> values) {
    fbb_.AddOffset(Definition::VT_VALUES, values);
  }
  void add_args_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type) {
    fbb_.AddOffset(Definition::VT_ARGS_TYPE, args_type);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args) {
    fbb_.AddOffset(Definition::VT_ARGS, args);
  }
  void add_stage_schedule(::flatbuffers::Offset<Halide::Serialize::StageSchedule> stage_schedule) {
    fbb_.AddOffset(Definition::VT_STAGE_SCHEDULE, stage_schedule);
  }
  void add_specializations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Specialization>>> specializations) {
    fbb_.AddOffset(Definition::VT_SPECIALIZATIONS, specializations);
  }
  void add_source_location(::flatbuffers::Offset<::flatbuffers::String> source_location) {
    fbb_.AddOffset(Definition::VT_SOURCE_LOCATION, source_location);
  }
  explicit DefinitionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Definition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Definition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Definition> CreateDefinition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_init = false,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> values_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Expr>> args_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> args = 0,
    ::flatbuffers::Offset<Halide::Serialize::StageSchedule> stage_schedule = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Specialization>>> specializations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source_location = 0) {
  DefinitionBuilder builder_(_fbb);
  builder_.add_source_location(source_location);
  builder_.add_specializations(specializations);
  builder_.add_stage_schedule(stage_schedule);
  builder_.add_args(args);
  builder_.add_args_type(args_type);
  builder_.add_values(values);
  builder_.add_values_type(values_type);
  builder_.add_predicate(predicate);
  builder_.add_predicate_type(predicate_type);
  builder_.add_is_init(is_init);
  return builder_.Finish();
}

struct Definition::Traits {
  using type = Definition;
  static auto constexpr Create = CreateDefinition;
};

inline ::flatbuffers::Offset<Definition> CreateDefinitionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_init = false,
    Halide::Serialize::Expr predicate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> predicate = 0,
    const std::vector<Halide::Serialize::Expr> *values_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *values = nullptr,
    const std::vector<Halide::Serialize::Expr> *args_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *args = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::StageSchedule> stage_schedule = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Specialization>> *specializations = nullptr,
    const char *source_location = nullptr) {
  auto values_type__ = values_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*values_type) : 0;
  auto values__ = values ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*values) : 0;
  auto args_type__ = args_type ? _fbb.CreateVector<Halide::Serialize::Expr>(*args_type) : 0;
  auto args__ = args ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*args) : 0;
  auto specializations__ = specializations ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Specialization>>(*specializations) : 0;
  auto source_location__ = source_location ? _fbb.CreateString(source_location) : 0;
  return Halide::Serialize::CreateDefinition(
      _fbb,
      is_init,
      predicate_type,
      predicate,
      values_type__,
      values__,
      args_type__,
      args__,
      stage_schedule,
      specializations__,
      source_location__);
}

struct FuncMapping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FuncMappingBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_INDEX = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t index() const {
    return GetField<int32_t>(VT_INDEX, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_INDEX, 4) &&
           verifier.EndTable();
  }
};

struct FuncMappingBuilder {
  typedef FuncMapping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FuncMapping::VT_NAME, name);
  }
  void add_index(int32_t index) {
    fbb_.AddElement<int32_t>(FuncMapping::VT_INDEX, index, 0);
  }
  explicit FuncMappingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FuncMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FuncMapping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FuncMapping> CreateFuncMapping(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t index = 0) {
  FuncMappingBuilder builder_(_fbb);
  builder_.add_index(index);
  builder_.add_name(name);
  return builder_.Finish();
}

struct FuncMapping::Traits {
  using type = FuncMapping;
  static auto constexpr Create = CreateFuncMapping;
};

inline ::flatbuffers::Offset<FuncMapping> CreateFuncMappingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t index = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateFuncMapping(
      _fbb,
      name__,
      index);
}

struct BufferConstraint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BufferConstraintBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN_TYPE = 4,
    VT_MIN = 6,
    VT_EXTENT_TYPE = 8,
    VT_EXTENT = 10,
    VT_STRIDE_TYPE = 12,
    VT_STRIDE = 14,
    VT_MIN_ESTIMATE_TYPE = 16,
    VT_MIN_ESTIMATE = 18,
    VT_EXTENT_ESTIMATE_TYPE = 20,
    VT_EXTENT_ESTIMATE = 22
  };
  Halide::Serialize::Expr min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_TYPE, 0));
  }
  const void *min() const {
    return GetPointer<const void *>(VT_MIN);
  }
  template<typename T> const T *min_as() const;
  const Halide::Serialize::IntImm *min_as_IntImm() const {
    return min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_as_UIntImm() const {
    return min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_as_FloatImm() const {
    return min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_as_StringImm() const {
    return min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min()) : nullptr;
  }
  const Halide::Serialize::Cast *min_as_Cast() const {
    return min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_as_Reinterpret() const {
    return min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min()) : nullptr;
  }
  const Halide::Serialize::Add *min_as_Add() const {
    return min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min()) : nullptr;
  }
  const Halide::Serialize::Sub *min_as_Sub() const {
    return min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min()) : nullptr;
  }
  const Halide::Serialize::Mul *min_as_Mul() const {
    return min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min()) : nullptr;
  }
  const Halide::Serialize::Div *min_as_Div() const {
    return min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min()) : nullptr;
  }
  const Halide::Serialize::Mod *min_as_Mod() const {
    return min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min()) : nullptr;
  }
  const Halide::Serialize::Min *min_as_Min() const {
    return min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min()) : nullptr;
  }
  const Halide::Serialize::Max *min_as_Max() const {
    return min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min()) : nullptr;
  }
  const Halide::Serialize::EQ *min_as_EQ() const {
    return min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min()) : nullptr;
  }
  const Halide::Serialize::NE *min_as_NE() const {
    return min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min()) : nullptr;
  }
  const Halide::Serialize::LT *min_as_LT() const {
    return min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min()) : nullptr;
  }
  const Halide::Serialize::LE *min_as_LE() const {
    return min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min()) : nullptr;
  }
  const Halide::Serialize::GT *min_as_GT() const {
    return min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min()) : nullptr;
  }
  const Halide::Serialize::GE *min_as_GE() const {
    return min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min()) : nullptr;
  }
  const Halide::Serialize::And *min_as_And() const {
    return min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min()) : nullptr;
  }
  const Halide::Serialize::Or *min_as_Or() const {
    return min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min()) : nullptr;
  }
  const Halide::Serialize::Not *min_as_Not() const {
    return min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min()) : nullptr;
  }
  const Halide::Serialize::Select *min_as_Select() const {
    return min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min()) : nullptr;
  }
  const Halide::Serialize::Load *min_as_Load() const {
    return min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_as_Ramp() const {
    return min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_as_Broadcast() const {
    return min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min()) : nullptr;
  }
  const Halide::Serialize::Let *min_as_Let() const {
    return min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min()) : nullptr;
  }
  const Halide::Serialize::Call *min_as_Call() const {
    return min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min()) : nullptr;
  }
  const Halide::Serialize::Variable *min_as_Variable() const {
    return min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_as_Shuffle() const {
    return min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_as_VectorReduce() const {
    return min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_as_UndefinedExpr() const {
    return min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min()) : nullptr;
  }
  Halide::Serialize::Expr extent_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_TYPE, 0));
  }
  const void *extent() const {
    return GetPointer<const void *>(VT_EXTENT);
  }
  template<typename T> const T *extent_as() const;
  const Halide::Serialize::IntImm *extent_as_IntImm() const {
    return extent_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_as_UIntImm() const {
    return extent_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_as_FloatImm() const {
    return extent_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_as_StringImm() const {
    return extent_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_as_Cast() const {
    return extent_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_as_Reinterpret() const {
    return extent_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent()) : nullptr;
  }
  const Halide::Serialize::Add *extent_as_Add() const {
    return extent_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_as_Sub() const {
    return extent_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_as_Mul() const {
    return extent_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent()) : nullptr;
  }
  const Halide::Serialize::Div *extent_as_Div() const {
    return extent_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_as_Mod() const {
    return extent_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent()) : nullptr;
  }
  const Halide::Serialize::Min *extent_as_Min() const {
    return extent_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent()) : nullptr;
  }
  const Halide::Serialize::Max *extent_as_Max() const {
    return extent_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_as_EQ() const {
    return extent_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent()) : nullptr;
  }
  const Halide::Serialize::NE *extent_as_NE() const {
    return extent_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent()) : nullptr;
  }
  const Halide::Serialize::LT *extent_as_LT() const {
    return extent_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent()) : nullptr;
  }
  const Halide::Serialize::LE *extent_as_LE() const {
    return extent_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent()) : nullptr;
  }
  const Halide::Serialize::GT *extent_as_GT() const {
    return extent_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent()) : nullptr;
  }
  const Halide::Serialize::GE *extent_as_GE() const {
    return extent_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent()) : nullptr;
  }
  const Halide::Serialize::And *extent_as_And() const {
    return extent_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent()) : nullptr;
  }
  const Halide::Serialize::Or *extent_as_Or() const {
    return extent_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent()) : nullptr;
  }
  const Halide::Serialize::Not *extent_as_Not() const {
    return extent_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent()) : nullptr;
  }
  const Halide::Serialize::Select *extent_as_Select() const {
    return extent_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent()) : nullptr;
  }
  const Halide::Serialize::Load *extent_as_Load() const {
    return extent_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_as_Ramp() const {
    return extent_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_as_Broadcast() const {
    return extent_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent()) : nullptr;
  }
  const Halide::Serialize::Let *extent_as_Let() const {
    return extent_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent()) : nullptr;
  }
  const Halide::Serialize::Call *extent_as_Call() const {
    return extent_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_as_Variable() const {
    return extent_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_as_Shuffle() const {
    return extent_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_as_VectorReduce() const {
    return extent_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_as_UndefinedExpr() const {
    return extent_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent()) : nullptr;
  }
  Halide::Serialize::Expr stride_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_STRIDE_TYPE, 0));
  }
  const void *stride() const {
    return GetPointer<const void *>(VT_STRIDE);
  }
  template<typename T> const T *stride_as() const;
  const Halide::Serialize::IntImm *stride_as_IntImm() const {
    return stride_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::UIntImm *stride_as_UIntImm() const {
    return stride_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::FloatImm *stride_as_FloatImm() const {
    return stride_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::StringImm *stride_as_StringImm() const {
    return stride_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(stride()) : nullptr;
  }
  const Halide::Serialize::Cast *stride_as_Cast() const {
    return stride_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(stride()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *stride_as_Reinterpret() const {
    return stride_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(stride()) : nullptr;
  }
  const Halide::Serialize::Add *stride_as_Add() const {
    return stride_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(stride()) : nullptr;
  }
  const Halide::Serialize::Sub *stride_as_Sub() const {
    return stride_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(stride()) : nullptr;
  }
  const Halide::Serialize::Mul *stride_as_Mul() const {
    return stride_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(stride()) : nullptr;
  }
  const Halide::Serialize::Div *stride_as_Div() const {
    return stride_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(stride()) : nullptr;
  }
  const Halide::Serialize::Mod *stride_as_Mod() const {
    return stride_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(stride()) : nullptr;
  }
  const Halide::Serialize::Min *stride_as_Min() const {
    return stride_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(stride()) : nullptr;
  }
  const Halide::Serialize::Max *stride_as_Max() const {
    return stride_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(stride()) : nullptr;
  }
  const Halide::Serialize::EQ *stride_as_EQ() const {
    return stride_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(stride()) : nullptr;
  }
  const Halide::Serialize::NE *stride_as_NE() const {
    return stride_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(stride()) : nullptr;
  }
  const Halide::Serialize::LT *stride_as_LT() const {
    return stride_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(stride()) : nullptr;
  }
  const Halide::Serialize::LE *stride_as_LE() const {
    return stride_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(stride()) : nullptr;
  }
  const Halide::Serialize::GT *stride_as_GT() const {
    return stride_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(stride()) : nullptr;
  }
  const Halide::Serialize::GE *stride_as_GE() const {
    return stride_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(stride()) : nullptr;
  }
  const Halide::Serialize::And *stride_as_And() const {
    return stride_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(stride()) : nullptr;
  }
  const Halide::Serialize::Or *stride_as_Or() const {
    return stride_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(stride()) : nullptr;
  }
  const Halide::Serialize::Not *stride_as_Not() const {
    return stride_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(stride()) : nullptr;
  }
  const Halide::Serialize::Select *stride_as_Select() const {
    return stride_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(stride()) : nullptr;
  }
  const Halide::Serialize::Load *stride_as_Load() const {
    return stride_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(stride()) : nullptr;
  }
  const Halide::Serialize::Ramp *stride_as_Ramp() const {
    return stride_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(stride()) : nullptr;
  }
  const Halide::Serialize::Broadcast *stride_as_Broadcast() const {
    return stride_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(stride()) : nullptr;
  }
  const Halide::Serialize::Let *stride_as_Let() const {
    return stride_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(stride()) : nullptr;
  }
  const Halide::Serialize::Call *stride_as_Call() const {
    return stride_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(stride()) : nullptr;
  }
  const Halide::Serialize::Variable *stride_as_Variable() const {
    return stride_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(stride()) : nullptr;
  }
  const Halide::Serialize::Shuffle *stride_as_Shuffle() const {
    return stride_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(stride()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *stride_as_VectorReduce() const {
    return stride_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(stride()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *stride_as_UndefinedExpr() const {
    return stride_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(stride()) : nullptr;
  }
  Halide::Serialize::Expr min_estimate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_MIN_ESTIMATE_TYPE, 0));
  }
  const void *min_estimate() const {
    return GetPointer<const void *>(VT_MIN_ESTIMATE);
  }
  template<typename T> const T *min_estimate_as() const;
  const Halide::Serialize::IntImm *min_estimate_as_IntImm() const {
    return min_estimate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *min_estimate_as_UIntImm() const {
    return min_estimate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *min_estimate_as_FloatImm() const {
    return min_estimate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::StringImm *min_estimate_as_StringImm() const {
    return min_estimate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Cast *min_estimate_as_Cast() const {
    return min_estimate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *min_estimate_as_Reinterpret() const {
    return min_estimate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Add *min_estimate_as_Add() const {
    return min_estimate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Sub *min_estimate_as_Sub() const {
    return min_estimate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Mul *min_estimate_as_Mul() const {
    return min_estimate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Div *min_estimate_as_Div() const {
    return min_estimate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Mod *min_estimate_as_Mod() const {
    return min_estimate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Min *min_estimate_as_Min() const {
    return min_estimate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Max *min_estimate_as_Max() const {
    return min_estimate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::EQ *min_estimate_as_EQ() const {
    return min_estimate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::NE *min_estimate_as_NE() const {
    return min_estimate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::LT *min_estimate_as_LT() const {
    return min_estimate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::LE *min_estimate_as_LE() const {
    return min_estimate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::GT *min_estimate_as_GT() const {
    return min_estimate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::GE *min_estimate_as_GE() const {
    return min_estimate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::And *min_estimate_as_And() const {
    return min_estimate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Or *min_estimate_as_Or() const {
    return min_estimate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Not *min_estimate_as_Not() const {
    return min_estimate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Select *min_estimate_as_Select() const {
    return min_estimate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Load *min_estimate_as_Load() const {
    return min_estimate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Ramp *min_estimate_as_Ramp() const {
    return min_estimate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *min_estimate_as_Broadcast() const {
    return min_estimate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Let *min_estimate_as_Let() const {
    return min_estimate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Call *min_estimate_as_Call() const {
    return min_estimate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Variable *min_estimate_as_Variable() const {
    return min_estimate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *min_estimate_as_Shuffle() const {
    return min_estimate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *min_estimate_as_VectorReduce() const {
    return min_estimate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(min_estimate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *min_estimate_as_UndefinedExpr() const {
    return min_estimate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(min_estimate()) : nullptr;
  }
  Halide::Serialize::Expr extent_estimate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTENT_ESTIMATE_TYPE, 0));
  }
  const void *extent_estimate() const {
    return GetPointer<const void *>(VT_EXTENT_ESTIMATE);
  }
  template<typename T> const T *extent_estimate_as() const;
  const Halide::Serialize::IntImm *extent_estimate_as_IntImm() const {
    return extent_estimate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extent_estimate_as_UIntImm() const {
    return extent_estimate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extent_estimate_as_FloatImm() const {
    return extent_estimate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::StringImm *extent_estimate_as_StringImm() const {
    return extent_estimate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Cast *extent_estimate_as_Cast() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extent_estimate_as_Reinterpret() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Add *extent_estimate_as_Add() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Sub *extent_estimate_as_Sub() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Mul *extent_estimate_as_Mul() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Div *extent_estimate_as_Div() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Mod *extent_estimate_as_Mod() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Min *extent_estimate_as_Min() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Max *extent_estimate_as_Max() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::EQ *extent_estimate_as_EQ() const {
    return extent_estimate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::NE *extent_estimate_as_NE() const {
    return extent_estimate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::LT *extent_estimate_as_LT() const {
    return extent_estimate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::LE *extent_estimate_as_LE() const {
    return extent_estimate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::GT *extent_estimate_as_GT() const {
    return extent_estimate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::GE *extent_estimate_as_GE() const {
    return extent_estimate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::And *extent_estimate_as_And() const {
    return extent_estimate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Or *extent_estimate_as_Or() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Not *extent_estimate_as_Not() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Select *extent_estimate_as_Select() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Load *extent_estimate_as_Load() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Ramp *extent_estimate_as_Ramp() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extent_estimate_as_Broadcast() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Let *extent_estimate_as_Let() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Call *extent_estimate_as_Call() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Variable *extent_estimate_as_Variable() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extent_estimate_as_Shuffle() const {
    return extent_estimate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extent_estimate_as_VectorReduce() const {
    return extent_estimate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extent_estimate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extent_estimate_as_UndefinedExpr() const {
    return extent_estimate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extent_estimate()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN) &&
           VerifyExpr(verifier, min(), min_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT) &&
           VerifyExpr(verifier, extent(), extent_type()) &&
           VerifyField<uint8_t>(verifier, VT_STRIDE_TYPE, 1) &&
           VerifyOffset(verifier, VT_STRIDE) &&
           VerifyExpr(verifier, stride(), stride_type()) &&
           VerifyField<uint8_t>(verifier, VT_MIN_ESTIMATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MIN_ESTIMATE) &&
           VerifyExpr(verifier, min_estimate(), min_estimate_type()) &&
           VerifyField<uint8_t>(verifier, VT_EXTENT_ESTIMATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTENT_ESTIMATE) &&
           VerifyExpr(verifier, extent_estimate(), extent_estimate_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *BufferConstraint::min_as<Halide::Serialize::IntImm>() const {
  return min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *BufferConstraint::min_as<Halide::Serialize::UIntImm>() const {
  return min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *BufferConstraint::min_as<Halide::Serialize::FloatImm>() const {
  return min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *BufferConstraint::min_as<Halide::Serialize::StringImm>() const {
  return min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *BufferConstraint::min_as<Halide::Serialize::Cast>() const {
  return min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *BufferConstraint::min_as<Halide::Serialize::Reinterpret>() const {
  return min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *BufferConstraint::min_as<Halide::Serialize::Add>() const {
  return min_as_Add();
}

template<> inline const Halide::Serialize::Sub *BufferConstraint::min_as<Halide::Serialize::Sub>() const {
  return min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *BufferConstraint::min_as<Halide::Serialize::Mul>() const {
  return min_as_Mul();
}

template<> inline const Halide::Serialize::Div *BufferConstraint::min_as<Halide::Serialize::Div>() const {
  return min_as_Div();
}

template<> inline const Halide::Serialize::Mod *BufferConstraint::min_as<Halide::Serialize::Mod>() const {
  return min_as_Mod();
}

template<> inline const Halide::Serialize::Min *BufferConstraint::min_as<Halide::Serialize::Min>() const {
  return min_as_Min();
}

template<> inline const Halide::Serialize::Max *BufferConstraint::min_as<Halide::Serialize::Max>() const {
  return min_as_Max();
}

template<> inline const Halide::Serialize::EQ *BufferConstraint::min_as<Halide::Serialize::EQ>() const {
  return min_as_EQ();
}

template<> inline const Halide::Serialize::NE *BufferConstraint::min_as<Halide::Serialize::NE>() const {
  return min_as_NE();
}

template<> inline const Halide::Serialize::LT *BufferConstraint::min_as<Halide::Serialize::LT>() const {
  return min_as_LT();
}

template<> inline const Halide::Serialize::LE *BufferConstraint::min_as<Halide::Serialize::LE>() const {
  return min_as_LE();
}

template<> inline const Halide::Serialize::GT *BufferConstraint::min_as<Halide::Serialize::GT>() const {
  return min_as_GT();
}

template<> inline const Halide::Serialize::GE *BufferConstraint::min_as<Halide::Serialize::GE>() const {
  return min_as_GE();
}

template<> inline const Halide::Serialize::And *BufferConstraint::min_as<Halide::Serialize::And>() const {
  return min_as_And();
}

template<> inline const Halide::Serialize::Or *BufferConstraint::min_as<Halide::Serialize::Or>() const {
  return min_as_Or();
}

template<> inline const Halide::Serialize::Not *BufferConstraint::min_as<Halide::Serialize::Not>() const {
  return min_as_Not();
}

template<> inline const Halide::Serialize::Select *BufferConstraint::min_as<Halide::Serialize::Select>() const {
  return min_as_Select();
}

template<> inline const Halide::Serialize::Load *BufferConstraint::min_as<Halide::Serialize::Load>() const {
  return min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *BufferConstraint::min_as<Halide::Serialize::Ramp>() const {
  return min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *BufferConstraint::min_as<Halide::Serialize::Broadcast>() const {
  return min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *BufferConstraint::min_as<Halide::Serialize::Let>() const {
  return min_as_Let();
}

template<> inline const Halide::Serialize::Call *BufferConstraint::min_as<Halide::Serialize::Call>() const {
  return min_as_Call();
}

template<> inline const Halide::Serialize::Variable *BufferConstraint::min_as<Halide::Serialize::Variable>() const {
  return min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *BufferConstraint::min_as<Halide::Serialize::Shuffle>() const {
  return min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *BufferConstraint::min_as<Halide::Serialize::VectorReduce>() const {
  return min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *BufferConstraint::min_as<Halide::Serialize::UndefinedExpr>() const {
  return min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *BufferConstraint::extent_as<Halide::Serialize::IntImm>() const {
  return extent_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *BufferConstraint::extent_as<Halide::Serialize::UIntImm>() const {
  return extent_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *BufferConstraint::extent_as<Halide::Serialize::FloatImm>() const {
  return extent_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *BufferConstraint::extent_as<Halide::Serialize::StringImm>() const {
  return extent_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *BufferConstraint::extent_as<Halide::Serialize::Cast>() const {
  return extent_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *BufferConstraint::extent_as<Halide::Serialize::Reinterpret>() const {
  return extent_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *BufferConstraint::extent_as<Halide::Serialize::Add>() const {
  return extent_as_Add();
}

template<> inline const Halide::Serialize::Sub *BufferConstraint::extent_as<Halide::Serialize::Sub>() const {
  return extent_as_Sub();
}

template<> inline const Halide::Serialize::Mul *BufferConstraint::extent_as<Halide::Serialize::Mul>() const {
  return extent_as_Mul();
}

template<> inline const Halide::Serialize::Div *BufferConstraint::extent_as<Halide::Serialize::Div>() const {
  return extent_as_Div();
}

template<> inline const Halide::Serialize::Mod *BufferConstraint::extent_as<Halide::Serialize::Mod>() const {
  return extent_as_Mod();
}

template<> inline const Halide::Serialize::Min *BufferConstraint::extent_as<Halide::Serialize::Min>() const {
  return extent_as_Min();
}

template<> inline const Halide::Serialize::Max *BufferConstraint::extent_as<Halide::Serialize::Max>() const {
  return extent_as_Max();
}

template<> inline const Halide::Serialize::EQ *BufferConstraint::extent_as<Halide::Serialize::EQ>() const {
  return extent_as_EQ();
}

template<> inline const Halide::Serialize::NE *BufferConstraint::extent_as<Halide::Serialize::NE>() const {
  return extent_as_NE();
}

template<> inline const Halide::Serialize::LT *BufferConstraint::extent_as<Halide::Serialize::LT>() const {
  return extent_as_LT();
}

template<> inline const Halide::Serialize::LE *BufferConstraint::extent_as<Halide::Serialize::LE>() const {
  return extent_as_LE();
}

template<> inline const Halide::Serialize::GT *BufferConstraint::extent_as<Halide::Serialize::GT>() const {
  return extent_as_GT();
}

template<> inline const Halide::Serialize::GE *BufferConstraint::extent_as<Halide::Serialize::GE>() const {
  return extent_as_GE();
}

template<> inline const Halide::Serialize::And *BufferConstraint::extent_as<Halide::Serialize::And>() const {
  return extent_as_And();
}

template<> inline const Halide::Serialize::Or *BufferConstraint::extent_as<Halide::Serialize::Or>() const {
  return extent_as_Or();
}

template<> inline const Halide::Serialize::Not *BufferConstraint::extent_as<Halide::Serialize::Not>() const {
  return extent_as_Not();
}

template<> inline const Halide::Serialize::Select *BufferConstraint::extent_as<Halide::Serialize::Select>() const {
  return extent_as_Select();
}

template<> inline const Halide::Serialize::Load *BufferConstraint::extent_as<Halide::Serialize::Load>() const {
  return extent_as_Load();
}

template<> inline const Halide::Serialize::Ramp *BufferConstraint::extent_as<Halide::Serialize::Ramp>() const {
  return extent_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *BufferConstraint::extent_as<Halide::Serialize::Broadcast>() const {
  return extent_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *BufferConstraint::extent_as<Halide::Serialize::Let>() const {
  return extent_as_Let();
}

template<> inline const Halide::Serialize::Call *BufferConstraint::extent_as<Halide::Serialize::Call>() const {
  return extent_as_Call();
}

template<> inline const Halide::Serialize::Variable *BufferConstraint::extent_as<Halide::Serialize::Variable>() const {
  return extent_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *BufferConstraint::extent_as<Halide::Serialize::Shuffle>() const {
  return extent_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *BufferConstraint::extent_as<Halide::Serialize::VectorReduce>() const {
  return extent_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *BufferConstraint::extent_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *BufferConstraint::stride_as<Halide::Serialize::IntImm>() const {
  return stride_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *BufferConstraint::stride_as<Halide::Serialize::UIntImm>() const {
  return stride_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *BufferConstraint::stride_as<Halide::Serialize::FloatImm>() const {
  return stride_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *BufferConstraint::stride_as<Halide::Serialize::StringImm>() const {
  return stride_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *BufferConstraint::stride_as<Halide::Serialize::Cast>() const {
  return stride_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *BufferConstraint::stride_as<Halide::Serialize::Reinterpret>() const {
  return stride_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *BufferConstraint::stride_as<Halide::Serialize::Add>() const {
  return stride_as_Add();
}

template<> inline const Halide::Serialize::Sub *BufferConstraint::stride_as<Halide::Serialize::Sub>() const {
  return stride_as_Sub();
}

template<> inline const Halide::Serialize::Mul *BufferConstraint::stride_as<Halide::Serialize::Mul>() const {
  return stride_as_Mul();
}

template<> inline const Halide::Serialize::Div *BufferConstraint::stride_as<Halide::Serialize::Div>() const {
  return stride_as_Div();
}

template<> inline const Halide::Serialize::Mod *BufferConstraint::stride_as<Halide::Serialize::Mod>() const {
  return stride_as_Mod();
}

template<> inline const Halide::Serialize::Min *BufferConstraint::stride_as<Halide::Serialize::Min>() const {
  return stride_as_Min();
}

template<> inline const Halide::Serialize::Max *BufferConstraint::stride_as<Halide::Serialize::Max>() const {
  return stride_as_Max();
}

template<> inline const Halide::Serialize::EQ *BufferConstraint::stride_as<Halide::Serialize::EQ>() const {
  return stride_as_EQ();
}

template<> inline const Halide::Serialize::NE *BufferConstraint::stride_as<Halide::Serialize::NE>() const {
  return stride_as_NE();
}

template<> inline const Halide::Serialize::LT *BufferConstraint::stride_as<Halide::Serialize::LT>() const {
  return stride_as_LT();
}

template<> inline const Halide::Serialize::LE *BufferConstraint::stride_as<Halide::Serialize::LE>() const {
  return stride_as_LE();
}

template<> inline const Halide::Serialize::GT *BufferConstraint::stride_as<Halide::Serialize::GT>() const {
  return stride_as_GT();
}

template<> inline const Halide::Serialize::GE *BufferConstraint::stride_as<Halide::Serialize::GE>() const {
  return stride_as_GE();
}

template<> inline const Halide::Serialize::And *BufferConstraint::stride_as<Halide::Serialize::And>() const {
  return stride_as_And();
}

template<> inline const Halide::Serialize::Or *BufferConstraint::stride_as<Halide::Serialize::Or>() const {
  return stride_as_Or();
}

template<> inline const Halide::Serialize::Not *BufferConstraint::stride_as<Halide::Serialize::Not>() const {
  return stride_as_Not();
}

template<> inline const Halide::Serialize::Select *BufferConstraint::stride_as<Halide::Serialize::Select>() const {
  return stride_as_Select();
}

template<> inline const Halide::Serialize::Load *BufferConstraint::stride_as<Halide::Serialize::Load>() const {
  return stride_as_Load();
}

template<> inline const Halide::Serialize::Ramp *BufferConstraint::stride_as<Halide::Serialize::Ramp>() const {
  return stride_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *BufferConstraint::stride_as<Halide::Serialize::Broadcast>() const {
  return stride_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *BufferConstraint::stride_as<Halide::Serialize::Let>() const {
  return stride_as_Let();
}

template<> inline const Halide::Serialize::Call *BufferConstraint::stride_as<Halide::Serialize::Call>() const {
  return stride_as_Call();
}

template<> inline const Halide::Serialize::Variable *BufferConstraint::stride_as<Halide::Serialize::Variable>() const {
  return stride_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *BufferConstraint::stride_as<Halide::Serialize::Shuffle>() const {
  return stride_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *BufferConstraint::stride_as<Halide::Serialize::VectorReduce>() const {
  return stride_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *BufferConstraint::stride_as<Halide::Serialize::UndefinedExpr>() const {
  return stride_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *BufferConstraint::min_estimate_as<Halide::Serialize::IntImm>() const {
  return min_estimate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *BufferConstraint::min_estimate_as<Halide::Serialize::UIntImm>() const {
  return min_estimate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *BufferConstraint::min_estimate_as<Halide::Serialize::FloatImm>() const {
  return min_estimate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *BufferConstraint::min_estimate_as<Halide::Serialize::StringImm>() const {
  return min_estimate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *BufferConstraint::min_estimate_as<Halide::Serialize::Cast>() const {
  return min_estimate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *BufferConstraint::min_estimate_as<Halide::Serialize::Reinterpret>() const {
  return min_estimate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *BufferConstraint::min_estimate_as<Halide::Serialize::Add>() const {
  return min_estimate_as_Add();
}

template<> inline const Halide::Serialize::Sub *BufferConstraint::min_estimate_as<Halide::Serialize::Sub>() const {
  return min_estimate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *BufferConstraint::min_estimate_as<Halide::Serialize::Mul>() const {
  return min_estimate_as_Mul();
}

template<> inline const Halide::Serialize::Div *BufferConstraint::min_estimate_as<Halide::Serialize::Div>() const {
  return min_estimate_as_Div();
}

template<> inline const Halide::Serialize::Mod *BufferConstraint::min_estimate_as<Halide::Serialize::Mod>() const {
  return min_estimate_as_Mod();
}

template<> inline const Halide::Serialize::Min *BufferConstraint::min_estimate_as<Halide::Serialize::Min>() const {
  return min_estimate_as_Min();
}

template<> inline const Halide::Serialize::Max *BufferConstraint::min_estimate_as<Halide::Serialize::Max>() const {
  return min_estimate_as_Max();
}

template<> inline const Halide::Serialize::EQ *BufferConstraint::min_estimate_as<Halide::Serialize::EQ>() const {
  return min_estimate_as_EQ();
}

template<> inline const Halide::Serialize::NE *BufferConstraint::min_estimate_as<Halide::Serialize::NE>() const {
  return min_estimate_as_NE();
}

template<> inline const Halide::Serialize::LT *BufferConstraint::min_estimate_as<Halide::Serialize::LT>() const {
  return min_estimate_as_LT();
}

template<> inline const Halide::Serialize::LE *BufferConstraint::min_estimate_as<Halide::Serialize::LE>() const {
  return min_estimate_as_LE();
}

template<> inline const Halide::Serialize::GT *BufferConstraint::min_estimate_as<Halide::Serialize::GT>() const {
  return min_estimate_as_GT();
}

template<> inline const Halide::Serialize::GE *BufferConstraint::min_estimate_as<Halide::Serialize::GE>() const {
  return min_estimate_as_GE();
}

template<> inline const Halide::Serialize::And *BufferConstraint::min_estimate_as<Halide::Serialize::And>() const {
  return min_estimate_as_And();
}

template<> inline const Halide::Serialize::Or *BufferConstraint::min_estimate_as<Halide::Serialize::Or>() const {
  return min_estimate_as_Or();
}

template<> inline const Halide::Serialize::Not *BufferConstraint::min_estimate_as<Halide::Serialize::Not>() const {
  return min_estimate_as_Not();
}

template<> inline const Halide::Serialize::Select *BufferConstraint::min_estimate_as<Halide::Serialize::Select>() const {
  return min_estimate_as_Select();
}

template<> inline const Halide::Serialize::Load *BufferConstraint::min_estimate_as<Halide::Serialize::Load>() const {
  return min_estimate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *BufferConstraint::min_estimate_as<Halide::Serialize::Ramp>() const {
  return min_estimate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *BufferConstraint::min_estimate_as<Halide::Serialize::Broadcast>() const {
  return min_estimate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *BufferConstraint::min_estimate_as<Halide::Serialize::Let>() const {
  return min_estimate_as_Let();
}

template<> inline const Halide::Serialize::Call *BufferConstraint::min_estimate_as<Halide::Serialize::Call>() const {
  return min_estimate_as_Call();
}

template<> inline const Halide::Serialize::Variable *BufferConstraint::min_estimate_as<Halide::Serialize::Variable>() const {
  return min_estimate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *BufferConstraint::min_estimate_as<Halide::Serialize::Shuffle>() const {
  return min_estimate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *BufferConstraint::min_estimate_as<Halide::Serialize::VectorReduce>() const {
  return min_estimate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *BufferConstraint::min_estimate_as<Halide::Serialize::UndefinedExpr>() const {
  return min_estimate_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *BufferConstraint::extent_estimate_as<Halide::Serialize::IntImm>() const {
  return extent_estimate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *BufferConstraint::extent_estimate_as<Halide::Serialize::UIntImm>() const {
  return extent_estimate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *BufferConstraint::extent_estimate_as<Halide::Serialize::FloatImm>() const {
  return extent_estimate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *BufferConstraint::extent_estimate_as<Halide::Serialize::StringImm>() const {
  return extent_estimate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *BufferConstraint::extent_estimate_as<Halide::Serialize::Cast>() const {
  return extent_estimate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *BufferConstraint::extent_estimate_as<Halide::Serialize::Reinterpret>() const {
  return extent_estimate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *BufferConstraint::extent_estimate_as<Halide::Serialize::Add>() const {
  return extent_estimate_as_Add();
}

template<> inline const Halide::Serialize::Sub *BufferConstraint::extent_estimate_as<Halide::Serialize::Sub>() const {
  return extent_estimate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *BufferConstraint::extent_estimate_as<Halide::Serialize::Mul>() const {
  return extent_estimate_as_Mul();
}

template<> inline const Halide::Serialize::Div *BufferConstraint::extent_estimate_as<Halide::Serialize::Div>() const {
  return extent_estimate_as_Div();
}

template<> inline const Halide::Serialize::Mod *BufferConstraint::extent_estimate_as<Halide::Serialize::Mod>() const {
  return extent_estimate_as_Mod();
}

template<> inline const Halide::Serialize::Min *BufferConstraint::extent_estimate_as<Halide::Serialize::Min>() const {
  return extent_estimate_as_Min();
}

template<> inline const Halide::Serialize::Max *BufferConstraint::extent_estimate_as<Halide::Serialize::Max>() const {
  return extent_estimate_as_Max();
}

template<> inline const Halide::Serialize::EQ *BufferConstraint::extent_estimate_as<Halide::Serialize::EQ>() const {
  return extent_estimate_as_EQ();
}

template<> inline const Halide::Serialize::NE *BufferConstraint::extent_estimate_as<Halide::Serialize::NE>() const {
  return extent_estimate_as_NE();
}

template<> inline const Halide::Serialize::LT *BufferConstraint::extent_estimate_as<Halide::Serialize::LT>() const {
  return extent_estimate_as_LT();
}

template<> inline const Halide::Serialize::LE *BufferConstraint::extent_estimate_as<Halide::Serialize::LE>() const {
  return extent_estimate_as_LE();
}

template<> inline const Halide::Serialize::GT *BufferConstraint::extent_estimate_as<Halide::Serialize::GT>() const {
  return extent_estimate_as_GT();
}

template<> inline const Halide::Serialize::GE *BufferConstraint::extent_estimate_as<Halide::Serialize::GE>() const {
  return extent_estimate_as_GE();
}

template<> inline const Halide::Serialize::And *BufferConstraint::extent_estimate_as<Halide::Serialize::And>() const {
  return extent_estimate_as_And();
}

template<> inline const Halide::Serialize::Or *BufferConstraint::extent_estimate_as<Halide::Serialize::Or>() const {
  return extent_estimate_as_Or();
}

template<> inline const Halide::Serialize::Not *BufferConstraint::extent_estimate_as<Halide::Serialize::Not>() const {
  return extent_estimate_as_Not();
}

template<> inline const Halide::Serialize::Select *BufferConstraint::extent_estimate_as<Halide::Serialize::Select>() const {
  return extent_estimate_as_Select();
}

template<> inline const Halide::Serialize::Load *BufferConstraint::extent_estimate_as<Halide::Serialize::Load>() const {
  return extent_estimate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *BufferConstraint::extent_estimate_as<Halide::Serialize::Ramp>() const {
  return extent_estimate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *BufferConstraint::extent_estimate_as<Halide::Serialize::Broadcast>() const {
  return extent_estimate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *BufferConstraint::extent_estimate_as<Halide::Serialize::Let>() const {
  return extent_estimate_as_Let();
}

template<> inline const Halide::Serialize::Call *BufferConstraint::extent_estimate_as<Halide::Serialize::Call>() const {
  return extent_estimate_as_Call();
}

template<> inline const Halide::Serialize::Variable *BufferConstraint::extent_estimate_as<Halide::Serialize::Variable>() const {
  return extent_estimate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *BufferConstraint::extent_estimate_as<Halide::Serialize::Shuffle>() const {
  return extent_estimate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *BufferConstraint::extent_estimate_as<Halide::Serialize::VectorReduce>() const {
  return extent_estimate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *BufferConstraint::extent_estimate_as<Halide::Serialize::UndefinedExpr>() const {
  return extent_estimate_as_UndefinedExpr();
}

struct BufferConstraintBuilder {
  typedef BufferConstraint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_min_type(Halide::Serialize::Expr min_type) {
    fbb_.AddElement<uint8_t>(BufferConstraint::VT_MIN_TYPE, static_cast<uint8_t>(min_type), 0);
  }
  void add_min(::flatbuffers::Offset<void> min) {
    fbb_.AddOffset(BufferConstraint::VT_MIN, min);
  }
  void add_extent_type(Halide::Serialize::Expr extent_type) {
    fbb_.AddElement<uint8_t>(BufferConstraint::VT_EXTENT_TYPE, static_cast<uint8_t>(extent_type), 0);
  }
  void add_extent(::flatbuffers::Offset<void> extent) {
    fbb_.AddOffset(BufferConstraint::VT_EXTENT, extent);
  }
  void add_stride_type(Halide::Serialize::Expr stride_type) {
    fbb_.AddElement<uint8_t>(BufferConstraint::VT_STRIDE_TYPE, static_cast<uint8_t>(stride_type), 0);
  }
  void add_stride(::flatbuffers::Offset<void> stride) {
    fbb_.AddOffset(BufferConstraint::VT_STRIDE, stride);
  }
  void add_min_estimate_type(Halide::Serialize::Expr min_estimate_type) {
    fbb_.AddElement<uint8_t>(BufferConstraint::VT_MIN_ESTIMATE_TYPE, static_cast<uint8_t>(min_estimate_type), 0);
  }
  void add_min_estimate(::flatbuffers::Offset<void> min_estimate) {
    fbb_.AddOffset(BufferConstraint::VT_MIN_ESTIMATE, min_estimate);
  }
  void add_extent_estimate_type(Halide::Serialize::Expr extent_estimate_type) {
    fbb_.AddElement<uint8_t>(BufferConstraint::VT_EXTENT_ESTIMATE_TYPE, static_cast<uint8_t>(extent_estimate_type), 0);
  }
  void add_extent_estimate(::flatbuffers::Offset<void> extent_estimate) {
    fbb_.AddOffset(BufferConstraint::VT_EXTENT_ESTIMATE, extent_estimate);
  }
  explicit BufferConstraintBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BufferConstraint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BufferConstraint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BufferConstraint> CreateBufferConstraint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::Expr min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min = 0,
    Halide::Serialize::Expr extent_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent = 0,
    Halide::Serialize::Expr stride_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> stride = 0,
    Halide::Serialize::Expr min_estimate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> min_estimate = 0,
    Halide::Serialize::Expr extent_estimate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extent_estimate = 0) {
  BufferConstraintBuilder builder_(_fbb);
  builder_.add_extent_estimate(extent_estimate);
  builder_.add_min_estimate(min_estimate);
  builder_.add_stride(stride);
  builder_.add_extent(extent);
  builder_.add_min(min);
  builder_.add_extent_estimate_type(extent_estimate_type);
  builder_.add_min_estimate_type(min_estimate_type);
  builder_.add_stride_type(stride_type);
  builder_.add_extent_type(extent_type);
  builder_.add_min_type(min_type);
  return builder_.Finish();
}

struct BufferConstraint::Traits {
  using type = BufferConstraint;
  static auto constexpr Create = CreateBufferConstraint;
};

struct Parameter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ParameterBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFINED = 4,
    VT_IS_BUFFER = 6,
    VT_TYPE = 8,
    VT_DIMENSIONS = 10,
    VT_NAME = 12,
    VT_HOST_ALIGNMENT = 14,
    VT_BUFFER_CONSTRAINTS = 16,
    VT_MEMORY_TYPE = 18,
    VT_SCALAR_DATA = 20,
    VT_SCALAR_DEFAULT_TYPE = 22,
    VT_SCALAR_DEFAULT = 24,
    VT_SCALAR_MIN_TYPE = 26,
    VT_SCALAR_MIN = 28,
    VT_SCALAR_MAX_TYPE = 30,
    VT_SCALAR_MAX = 32,
    VT_SCALAR_ESTIMATE_TYPE = 34,
    VT_SCALAR_ESTIMATE = 36
  };
  bool defined() const {
    return GetField<uint8_t>(VT_DEFINED, 0) != 0;
  }
  bool is_buffer() const {
    return GetField<uint8_t>(VT_IS_BUFFER, 0) != 0;
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  int32_t dimensions() const {
    return GetField<int32_t>(VT_DIMENSIONS, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t host_alignment() const {
    return GetField<int32_t>(VT_HOST_ALIGNMENT, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>> *buffer_constraints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>> *>(VT_BUFFER_CONSTRAINTS);
  }
  Halide::Serialize::MemoryType memory_type() const {
    return static_cast<Halide::Serialize::MemoryType>(GetField<int8_t>(VT_MEMORY_TYPE, 0));
  }
  ::flatbuffers::Optional<uint64_t> scalar_data() const {
    return GetOptional<uint64_t, uint64_t>(VT_SCALAR_DATA);
  }
  Halide::Serialize::Expr scalar_default_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_SCALAR_DEFAULT_TYPE, 0));
  }
  const void *scalar_default() const {
    return GetPointer<const void *>(VT_SCALAR_DEFAULT);
  }
  template<typename T> const T *scalar_default_as() const;
  const Halide::Serialize::IntImm *scalar_default_as_IntImm() const {
    return scalar_default_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::UIntImm *scalar_default_as_UIntImm() const {
    return scalar_default_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::FloatImm *scalar_default_as_FloatImm() const {
    return scalar_default_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::StringImm *scalar_default_as_StringImm() const {
    return scalar_default_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Cast *scalar_default_as_Cast() const {
    return scalar_default_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *scalar_default_as_Reinterpret() const {
    return scalar_default_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Add *scalar_default_as_Add() const {
    return scalar_default_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Sub *scalar_default_as_Sub() const {
    return scalar_default_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Mul *scalar_default_as_Mul() const {
    return scalar_default_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Div *scalar_default_as_Div() const {
    return scalar_default_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Mod *scalar_default_as_Mod() const {
    return scalar_default_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Min *scalar_default_as_Min() const {
    return scalar_default_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Max *scalar_default_as_Max() const {
    return scalar_default_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::EQ *scalar_default_as_EQ() const {
    return scalar_default_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::NE *scalar_default_as_NE() const {
    return scalar_default_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::LT *scalar_default_as_LT() const {
    return scalar_default_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::LE *scalar_default_as_LE() const {
    return scalar_default_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::GT *scalar_default_as_GT() const {
    return scalar_default_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::GE *scalar_default_as_GE() const {
    return scalar_default_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::And *scalar_default_as_And() const {
    return scalar_default_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Or *scalar_default_as_Or() const {
    return scalar_default_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Not *scalar_default_as_Not() const {
    return scalar_default_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Select *scalar_default_as_Select() const {
    return scalar_default_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Load *scalar_default_as_Load() const {
    return scalar_default_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Ramp *scalar_default_as_Ramp() const {
    return scalar_default_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Broadcast *scalar_default_as_Broadcast() const {
    return scalar_default_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Let *scalar_default_as_Let() const {
    return scalar_default_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Call *scalar_default_as_Call() const {
    return scalar_default_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Variable *scalar_default_as_Variable() const {
    return scalar_default_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::Shuffle *scalar_default_as_Shuffle() const {
    return scalar_default_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *scalar_default_as_VectorReduce() const {
    return scalar_default_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(scalar_default()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *scalar_default_as_UndefinedExpr() const {
    return scalar_default_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(scalar_default()) : nullptr;
  }
  Halide::Serialize::Expr scalar_min_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_SCALAR_MIN_TYPE, 0));
  }
  const void *scalar_min() const {
    return GetPointer<const void *>(VT_SCALAR_MIN);
  }
  template<typename T> const T *scalar_min_as() const;
  const Halide::Serialize::IntImm *scalar_min_as_IntImm() const {
    return scalar_min_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::UIntImm *scalar_min_as_UIntImm() const {
    return scalar_min_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::FloatImm *scalar_min_as_FloatImm() const {
    return scalar_min_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::StringImm *scalar_min_as_StringImm() const {
    return scalar_min_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Cast *scalar_min_as_Cast() const {
    return scalar_min_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *scalar_min_as_Reinterpret() const {
    return scalar_min_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Add *scalar_min_as_Add() const {
    return scalar_min_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Sub *scalar_min_as_Sub() const {
    return scalar_min_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Mul *scalar_min_as_Mul() const {
    return scalar_min_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Div *scalar_min_as_Div() const {
    return scalar_min_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Mod *scalar_min_as_Mod() const {
    return scalar_min_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Min *scalar_min_as_Min() const {
    return scalar_min_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Max *scalar_min_as_Max() const {
    return scalar_min_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::EQ *scalar_min_as_EQ() const {
    return scalar_min_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::NE *scalar_min_as_NE() const {
    return scalar_min_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::LT *scalar_min_as_LT() const {
    return scalar_min_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::LE *scalar_min_as_LE() const {
    return scalar_min_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::GT *scalar_min_as_GT() const {
    return scalar_min_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::GE *scalar_min_as_GE() const {
    return scalar_min_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::And *scalar_min_as_And() const {
    return scalar_min_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Or *scalar_min_as_Or() const {
    return scalar_min_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Not *scalar_min_as_Not() const {
    return scalar_min_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Select *scalar_min_as_Select() const {
    return scalar_min_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Load *scalar_min_as_Load() const {
    return scalar_min_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Ramp *scalar_min_as_Ramp() const {
    return scalar_min_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Broadcast *scalar_min_as_Broadcast() const {
    return scalar_min_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Let *scalar_min_as_Let() const {
    return scalar_min_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Call *scalar_min_as_Call() const {
    return scalar_min_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Variable *scalar_min_as_Variable() const {
    return scalar_min_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::Shuffle *scalar_min_as_Shuffle() const {
    return scalar_min_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *scalar_min_as_VectorReduce() const {
    return scalar_min_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(scalar_min()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *scalar_min_as_UndefinedExpr() const {
    return scalar_min_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(scalar_min()) : nullptr;
  }
  Halide::Serialize::Expr scalar_max_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_SCALAR_MAX_TYPE, 0));
  }
  const void *scalar_max() const {
    return GetPointer<const void *>(VT_SCALAR_MAX);
  }
  template<typename T> const T *scalar_max_as() const;
  const Halide::Serialize::IntImm *scalar_max_as_IntImm() const {
    return scalar_max_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::UIntImm *scalar_max_as_UIntImm() const {
    return scalar_max_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::FloatImm *scalar_max_as_FloatImm() const {
    return scalar_max_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::StringImm *scalar_max_as_StringImm() const {
    return scalar_max_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Cast *scalar_max_as_Cast() const {
    return scalar_max_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *scalar_max_as_Reinterpret() const {
    return scalar_max_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Add *scalar_max_as_Add() const {
    return scalar_max_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Sub *scalar_max_as_Sub() const {
    return scalar_max_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Mul *scalar_max_as_Mul() const {
    return scalar_max_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Div *scalar_max_as_Div() const {
    return scalar_max_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Mod *scalar_max_as_Mod() const {
    return scalar_max_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Min *scalar_max_as_Min() const {
    return scalar_max_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Max *scalar_max_as_Max() const {
    return scalar_max_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::EQ *scalar_max_as_EQ() const {
    return scalar_max_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::NE *scalar_max_as_NE() const {
    return scalar_max_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::LT *scalar_max_as_LT() const {
    return scalar_max_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::LE *scalar_max_as_LE() const {
    return scalar_max_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::GT *scalar_max_as_GT() const {
    return scalar_max_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::GE *scalar_max_as_GE() const {
    return scalar_max_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::And *scalar_max_as_And() const {
    return scalar_max_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Or *scalar_max_as_Or() const {
    return scalar_max_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Not *scalar_max_as_Not() const {
    return scalar_max_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Select *scalar_max_as_Select() const {
    return scalar_max_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Load *scalar_max_as_Load() const {
    return scalar_max_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Ramp *scalar_max_as_Ramp() const {
    return scalar_max_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Broadcast *scalar_max_as_Broadcast() const {
    return scalar_max_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Let *scalar_max_as_Let() const {
    return scalar_max_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Call *scalar_max_as_Call() const {
    return scalar_max_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Variable *scalar_max_as_Variable() const {
    return scalar_max_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::Shuffle *scalar_max_as_Shuffle() const {
    return scalar_max_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *scalar_max_as_VectorReduce() const {
    return scalar_max_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(scalar_max()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *scalar_max_as_UndefinedExpr() const {
    return scalar_max_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(scalar_max()) : nullptr;
  }
  Halide::Serialize::Expr scalar_estimate_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_SCALAR_ESTIMATE_TYPE, 0));
  }
  const void *scalar_estimate() const {
    return GetPointer<const void *>(VT_SCALAR_ESTIMATE);
  }
  template<typename T> const T *scalar_estimate_as() const;
  const Halide::Serialize::IntImm *scalar_estimate_as_IntImm() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::UIntImm *scalar_estimate_as_UIntImm() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::FloatImm *scalar_estimate_as_FloatImm() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::StringImm *scalar_estimate_as_StringImm() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Cast *scalar_estimate_as_Cast() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *scalar_estimate_as_Reinterpret() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Add *scalar_estimate_as_Add() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Sub *scalar_estimate_as_Sub() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Mul *scalar_estimate_as_Mul() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Div *scalar_estimate_as_Div() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Mod *scalar_estimate_as_Mod() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Min *scalar_estimate_as_Min() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Max *scalar_estimate_as_Max() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::EQ *scalar_estimate_as_EQ() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::NE *scalar_estimate_as_NE() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::LT *scalar_estimate_as_LT() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::LE *scalar_estimate_as_LE() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::GT *scalar_estimate_as_GT() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::GE *scalar_estimate_as_GE() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::And *scalar_estimate_as_And() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Or *scalar_estimate_as_Or() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Not *scalar_estimate_as_Not() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Select *scalar_estimate_as_Select() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Load *scalar_estimate_as_Load() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Ramp *scalar_estimate_as_Ramp() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Broadcast *scalar_estimate_as_Broadcast() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Let *scalar_estimate_as_Let() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Call *scalar_estimate_as_Call() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Variable *scalar_estimate_as_Variable() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::Shuffle *scalar_estimate_as_Shuffle() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *scalar_estimate_as_VectorReduce() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(scalar_estimate()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *scalar_estimate_as_UndefinedExpr() const {
    return scalar_estimate_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(scalar_estimate()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DEFINED, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_BUFFER, 1) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyField<int32_t>(verifier, VT_DIMENSIONS, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_HOST_ALIGNMENT, 4) &&
           VerifyOffset(verifier, VT_BUFFER_CONSTRAINTS) &&
           verifier.VerifyVector(buffer_constraints()) &&
           verifier.VerifyVectorOfTables(buffer_constraints()) &&
           VerifyField<int8_t>(verifier, VT_MEMORY_TYPE, 1) &&
           VerifyField<uint64_t>(verifier, VT_SCALAR_DATA, 8) &&
           VerifyField<uint8_t>(verifier, VT_SCALAR_DEFAULT_TYPE, 1) &&
           VerifyOffset(verifier, VT_SCALAR_DEFAULT) &&
           VerifyExpr(verifier, scalar_default(), scalar_default_type()) &&
           VerifyField<uint8_t>(verifier, VT_SCALAR_MIN_TYPE, 1) &&
           VerifyOffset(verifier, VT_SCALAR_MIN) &&
           VerifyExpr(verifier, scalar_min(), scalar_min_type()) &&
           VerifyField<uint8_t>(verifier, VT_SCALAR_MAX_TYPE, 1) &&
           VerifyOffset(verifier, VT_SCALAR_MAX) &&
           VerifyExpr(verifier, scalar_max(), scalar_max_type()) &&
           VerifyField<uint8_t>(verifier, VT_SCALAR_ESTIMATE_TYPE, 1) &&
           VerifyOffset(verifier, VT_SCALAR_ESTIMATE) &&
           VerifyExpr(verifier, scalar_estimate(), scalar_estimate_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Parameter::scalar_default_as<Halide::Serialize::IntImm>() const {
  return scalar_default_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Parameter::scalar_default_as<Halide::Serialize::UIntImm>() const {
  return scalar_default_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Parameter::scalar_default_as<Halide::Serialize::FloatImm>() const {
  return scalar_default_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Parameter::scalar_default_as<Halide::Serialize::StringImm>() const {
  return scalar_default_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Parameter::scalar_default_as<Halide::Serialize::Cast>() const {
  return scalar_default_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Parameter::scalar_default_as<Halide::Serialize::Reinterpret>() const {
  return scalar_default_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Parameter::scalar_default_as<Halide::Serialize::Add>() const {
  return scalar_default_as_Add();
}

template<> inline const Halide::Serialize::Sub *Parameter::scalar_default_as<Halide::Serialize::Sub>() const {
  return scalar_default_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Parameter::scalar_default_as<Halide::Serialize::Mul>() const {
  return scalar_default_as_Mul();
}

template<> inline const Halide::Serialize::Div *Parameter::scalar_default_as<Halide::Serialize::Div>() const {
  return scalar_default_as_Div();
}

template<> inline const Halide::Serialize::Mod *Parameter::scalar_default_as<Halide::Serialize::Mod>() const {
  return scalar_default_as_Mod();
}

template<> inline const Halide::Serialize::Min *Parameter::scalar_default_as<Halide::Serialize::Min>() const {
  return scalar_default_as_Min();
}

template<> inline const Halide::Serialize::Max *Parameter::scalar_default_as<Halide::Serialize::Max>() const {
  return scalar_default_as_Max();
}

template<> inline const Halide::Serialize::EQ *Parameter::scalar_default_as<Halide::Serialize::EQ>() const {
  return scalar_default_as_EQ();
}

template<> inline const Halide::Serialize::NE *Parameter::scalar_default_as<Halide::Serialize::NE>() const {
  return scalar_default_as_NE();
}

template<> inline const Halide::Serialize::LT *Parameter::scalar_default_as<Halide::Serialize::LT>() const {
  return scalar_default_as_LT();
}

template<> inline const Halide::Serialize::LE *Parameter::scalar_default_as<Halide::Serialize::LE>() const {
  return scalar_default_as_LE();
}

template<> inline const Halide::Serialize::GT *Parameter::scalar_default_as<Halide::Serialize::GT>() const {
  return scalar_default_as_GT();
}

template<> inline const Halide::Serialize::GE *Parameter::scalar_default_as<Halide::Serialize::GE>() const {
  return scalar_default_as_GE();
}

template<> inline const Halide::Serialize::And *Parameter::scalar_default_as<Halide::Serialize::And>() const {
  return scalar_default_as_And();
}

template<> inline const Halide::Serialize::Or *Parameter::scalar_default_as<Halide::Serialize::Or>() const {
  return scalar_default_as_Or();
}

template<> inline const Halide::Serialize::Not *Parameter::scalar_default_as<Halide::Serialize::Not>() const {
  return scalar_default_as_Not();
}

template<> inline const Halide::Serialize::Select *Parameter::scalar_default_as<Halide::Serialize::Select>() const {
  return scalar_default_as_Select();
}

template<> inline const Halide::Serialize::Load *Parameter::scalar_default_as<Halide::Serialize::Load>() const {
  return scalar_default_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Parameter::scalar_default_as<Halide::Serialize::Ramp>() const {
  return scalar_default_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Parameter::scalar_default_as<Halide::Serialize::Broadcast>() const {
  return scalar_default_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Parameter::scalar_default_as<Halide::Serialize::Let>() const {
  return scalar_default_as_Let();
}

template<> inline const Halide::Serialize::Call *Parameter::scalar_default_as<Halide::Serialize::Call>() const {
  return scalar_default_as_Call();
}

template<> inline const Halide::Serialize::Variable *Parameter::scalar_default_as<Halide::Serialize::Variable>() const {
  return scalar_default_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Parameter::scalar_default_as<Halide::Serialize::Shuffle>() const {
  return scalar_default_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Parameter::scalar_default_as<Halide::Serialize::VectorReduce>() const {
  return scalar_default_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Parameter::scalar_default_as<Halide::Serialize::UndefinedExpr>() const {
  return scalar_default_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Parameter::scalar_min_as<Halide::Serialize::IntImm>() const {
  return scalar_min_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Parameter::scalar_min_as<Halide::Serialize::UIntImm>() const {
  return scalar_min_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Parameter::scalar_min_as<Halide::Serialize::FloatImm>() const {
  return scalar_min_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Parameter::scalar_min_as<Halide::Serialize::StringImm>() const {
  return scalar_min_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Parameter::scalar_min_as<Halide::Serialize::Cast>() const {
  return scalar_min_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Parameter::scalar_min_as<Halide::Serialize::Reinterpret>() const {
  return scalar_min_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Parameter::scalar_min_as<Halide::Serialize::Add>() const {
  return scalar_min_as_Add();
}

template<> inline const Halide::Serialize::Sub *Parameter::scalar_min_as<Halide::Serialize::Sub>() const {
  return scalar_min_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Parameter::scalar_min_as<Halide::Serialize::Mul>() const {
  return scalar_min_as_Mul();
}

template<> inline const Halide::Serialize::Div *Parameter::scalar_min_as<Halide::Serialize::Div>() const {
  return scalar_min_as_Div();
}

template<> inline const Halide::Serialize::Mod *Parameter::scalar_min_as<Halide::Serialize::Mod>() const {
  return scalar_min_as_Mod();
}

template<> inline const Halide::Serialize::Min *Parameter::scalar_min_as<Halide::Serialize::Min>() const {
  return scalar_min_as_Min();
}

template<> inline const Halide::Serialize::Max *Parameter::scalar_min_as<Halide::Serialize::Max>() const {
  return scalar_min_as_Max();
}

template<> inline const Halide::Serialize::EQ *Parameter::scalar_min_as<Halide::Serialize::EQ>() const {
  return scalar_min_as_EQ();
}

template<> inline const Halide::Serialize::NE *Parameter::scalar_min_as<Halide::Serialize::NE>() const {
  return scalar_min_as_NE();
}

template<> inline const Halide::Serialize::LT *Parameter::scalar_min_as<Halide::Serialize::LT>() const {
  return scalar_min_as_LT();
}

template<> inline const Halide::Serialize::LE *Parameter::scalar_min_as<Halide::Serialize::LE>() const {
  return scalar_min_as_LE();
}

template<> inline const Halide::Serialize::GT *Parameter::scalar_min_as<Halide::Serialize::GT>() const {
  return scalar_min_as_GT();
}

template<> inline const Halide::Serialize::GE *Parameter::scalar_min_as<Halide::Serialize::GE>() const {
  return scalar_min_as_GE();
}

template<> inline const Halide::Serialize::And *Parameter::scalar_min_as<Halide::Serialize::And>() const {
  return scalar_min_as_And();
}

template<> inline const Halide::Serialize::Or *Parameter::scalar_min_as<Halide::Serialize::Or>() const {
  return scalar_min_as_Or();
}

template<> inline const Halide::Serialize::Not *Parameter::scalar_min_as<Halide::Serialize::Not>() const {
  return scalar_min_as_Not();
}

template<> inline const Halide::Serialize::Select *Parameter::scalar_min_as<Halide::Serialize::Select>() const {
  return scalar_min_as_Select();
}

template<> inline const Halide::Serialize::Load *Parameter::scalar_min_as<Halide::Serialize::Load>() const {
  return scalar_min_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Parameter::scalar_min_as<Halide::Serialize::Ramp>() const {
  return scalar_min_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Parameter::scalar_min_as<Halide::Serialize::Broadcast>() const {
  return scalar_min_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Parameter::scalar_min_as<Halide::Serialize::Let>() const {
  return scalar_min_as_Let();
}

template<> inline const Halide::Serialize::Call *Parameter::scalar_min_as<Halide::Serialize::Call>() const {
  return scalar_min_as_Call();
}

template<> inline const Halide::Serialize::Variable *Parameter::scalar_min_as<Halide::Serialize::Variable>() const {
  return scalar_min_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Parameter::scalar_min_as<Halide::Serialize::Shuffle>() const {
  return scalar_min_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Parameter::scalar_min_as<Halide::Serialize::VectorReduce>() const {
  return scalar_min_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Parameter::scalar_min_as<Halide::Serialize::UndefinedExpr>() const {
  return scalar_min_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Parameter::scalar_max_as<Halide::Serialize::IntImm>() const {
  return scalar_max_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Parameter::scalar_max_as<Halide::Serialize::UIntImm>() const {
  return scalar_max_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Parameter::scalar_max_as<Halide::Serialize::FloatImm>() const {
  return scalar_max_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Parameter::scalar_max_as<Halide::Serialize::StringImm>() const {
  return scalar_max_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Parameter::scalar_max_as<Halide::Serialize::Cast>() const {
  return scalar_max_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Parameter::scalar_max_as<Halide::Serialize::Reinterpret>() const {
  return scalar_max_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Parameter::scalar_max_as<Halide::Serialize::Add>() const {
  return scalar_max_as_Add();
}

template<> inline const Halide::Serialize::Sub *Parameter::scalar_max_as<Halide::Serialize::Sub>() const {
  return scalar_max_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Parameter::scalar_max_as<Halide::Serialize::Mul>() const {
  return scalar_max_as_Mul();
}

template<> inline const Halide::Serialize::Div *Parameter::scalar_max_as<Halide::Serialize::Div>() const {
  return scalar_max_as_Div();
}

template<> inline const Halide::Serialize::Mod *Parameter::scalar_max_as<Halide::Serialize::Mod>() const {
  return scalar_max_as_Mod();
}

template<> inline const Halide::Serialize::Min *Parameter::scalar_max_as<Halide::Serialize::Min>() const {
  return scalar_max_as_Min();
}

template<> inline const Halide::Serialize::Max *Parameter::scalar_max_as<Halide::Serialize::Max>() const {
  return scalar_max_as_Max();
}

template<> inline const Halide::Serialize::EQ *Parameter::scalar_max_as<Halide::Serialize::EQ>() const {
  return scalar_max_as_EQ();
}

template<> inline const Halide::Serialize::NE *Parameter::scalar_max_as<Halide::Serialize::NE>() const {
  return scalar_max_as_NE();
}

template<> inline const Halide::Serialize::LT *Parameter::scalar_max_as<Halide::Serialize::LT>() const {
  return scalar_max_as_LT();
}

template<> inline const Halide::Serialize::LE *Parameter::scalar_max_as<Halide::Serialize::LE>() const {
  return scalar_max_as_LE();
}

template<> inline const Halide::Serialize::GT *Parameter::scalar_max_as<Halide::Serialize::GT>() const {
  return scalar_max_as_GT();
}

template<> inline const Halide::Serialize::GE *Parameter::scalar_max_as<Halide::Serialize::GE>() const {
  return scalar_max_as_GE();
}

template<> inline const Halide::Serialize::And *Parameter::scalar_max_as<Halide::Serialize::And>() const {
  return scalar_max_as_And();
}

template<> inline const Halide::Serialize::Or *Parameter::scalar_max_as<Halide::Serialize::Or>() const {
  return scalar_max_as_Or();
}

template<> inline const Halide::Serialize::Not *Parameter::scalar_max_as<Halide::Serialize::Not>() const {
  return scalar_max_as_Not();
}

template<> inline const Halide::Serialize::Select *Parameter::scalar_max_as<Halide::Serialize::Select>() const {
  return scalar_max_as_Select();
}

template<> inline const Halide::Serialize::Load *Parameter::scalar_max_as<Halide::Serialize::Load>() const {
  return scalar_max_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Parameter::scalar_max_as<Halide::Serialize::Ramp>() const {
  return scalar_max_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Parameter::scalar_max_as<Halide::Serialize::Broadcast>() const {
  return scalar_max_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Parameter::scalar_max_as<Halide::Serialize::Let>() const {
  return scalar_max_as_Let();
}

template<> inline const Halide::Serialize::Call *Parameter::scalar_max_as<Halide::Serialize::Call>() const {
  return scalar_max_as_Call();
}

template<> inline const Halide::Serialize::Variable *Parameter::scalar_max_as<Halide::Serialize::Variable>() const {
  return scalar_max_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Parameter::scalar_max_as<Halide::Serialize::Shuffle>() const {
  return scalar_max_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Parameter::scalar_max_as<Halide::Serialize::VectorReduce>() const {
  return scalar_max_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Parameter::scalar_max_as<Halide::Serialize::UndefinedExpr>() const {
  return scalar_max_as_UndefinedExpr();
}

template<> inline const Halide::Serialize::IntImm *Parameter::scalar_estimate_as<Halide::Serialize::IntImm>() const {
  return scalar_estimate_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Parameter::scalar_estimate_as<Halide::Serialize::UIntImm>() const {
  return scalar_estimate_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Parameter::scalar_estimate_as<Halide::Serialize::FloatImm>() const {
  return scalar_estimate_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Parameter::scalar_estimate_as<Halide::Serialize::StringImm>() const {
  return scalar_estimate_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Parameter::scalar_estimate_as<Halide::Serialize::Cast>() const {
  return scalar_estimate_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Parameter::scalar_estimate_as<Halide::Serialize::Reinterpret>() const {
  return scalar_estimate_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Parameter::scalar_estimate_as<Halide::Serialize::Add>() const {
  return scalar_estimate_as_Add();
}

template<> inline const Halide::Serialize::Sub *Parameter::scalar_estimate_as<Halide::Serialize::Sub>() const {
  return scalar_estimate_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Parameter::scalar_estimate_as<Halide::Serialize::Mul>() const {
  return scalar_estimate_as_Mul();
}

template<> inline const Halide::Serialize::Div *Parameter::scalar_estimate_as<Halide::Serialize::Div>() const {
  return scalar_estimate_as_Div();
}

template<> inline const Halide::Serialize::Mod *Parameter::scalar_estimate_as<Halide::Serialize::Mod>() const {
  return scalar_estimate_as_Mod();
}

template<> inline const Halide::Serialize::Min *Parameter::scalar_estimate_as<Halide::Serialize::Min>() const {
  return scalar_estimate_as_Min();
}

template<> inline const Halide::Serialize::Max *Parameter::scalar_estimate_as<Halide::Serialize::Max>() const {
  return scalar_estimate_as_Max();
}

template<> inline const Halide::Serialize::EQ *Parameter::scalar_estimate_as<Halide::Serialize::EQ>() const {
  return scalar_estimate_as_EQ();
}

template<> inline const Halide::Serialize::NE *Parameter::scalar_estimate_as<Halide::Serialize::NE>() const {
  return scalar_estimate_as_NE();
}

template<> inline const Halide::Serialize::LT *Parameter::scalar_estimate_as<Halide::Serialize::LT>() const {
  return scalar_estimate_as_LT();
}

template<> inline const Halide::Serialize::LE *Parameter::scalar_estimate_as<Halide::Serialize::LE>() const {
  return scalar_estimate_as_LE();
}

template<> inline const Halide::Serialize::GT *Parameter::scalar_estimate_as<Halide::Serialize::GT>() const {
  return scalar_estimate_as_GT();
}

template<> inline const Halide::Serialize::GE *Parameter::scalar_estimate_as<Halide::Serialize::GE>() const {
  return scalar_estimate_as_GE();
}

template<> inline const Halide::Serialize::And *Parameter::scalar_estimate_as<Halide::Serialize::And>() const {
  return scalar_estimate_as_And();
}

template<> inline const Halide::Serialize::Or *Parameter::scalar_estimate_as<Halide::Serialize::Or>() const {
  return scalar_estimate_as_Or();
}

template<> inline const Halide::Serialize::Not *Parameter::scalar_estimate_as<Halide::Serialize::Not>() const {
  return scalar_estimate_as_Not();
}

template<> inline const Halide::Serialize::Select *Parameter::scalar_estimate_as<Halide::Serialize::Select>() const {
  return scalar_estimate_as_Select();
}

template<> inline const Halide::Serialize::Load *Parameter::scalar_estimate_as<Halide::Serialize::Load>() const {
  return scalar_estimate_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Parameter::scalar_estimate_as<Halide::Serialize::Ramp>() const {
  return scalar_estimate_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Parameter::scalar_estimate_as<Halide::Serialize::Broadcast>() const {
  return scalar_estimate_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Parameter::scalar_estimate_as<Halide::Serialize::Let>() const {
  return scalar_estimate_as_Let();
}

template<> inline const Halide::Serialize::Call *Parameter::scalar_estimate_as<Halide::Serialize::Call>() const {
  return scalar_estimate_as_Call();
}

template<> inline const Halide::Serialize::Variable *Parameter::scalar_estimate_as<Halide::Serialize::Variable>() const {
  return scalar_estimate_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Parameter::scalar_estimate_as<Halide::Serialize::Shuffle>() const {
  return scalar_estimate_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Parameter::scalar_estimate_as<Halide::Serialize::VectorReduce>() const {
  return scalar_estimate_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Parameter::scalar_estimate_as<Halide::Serialize::UndefinedExpr>() const {
  return scalar_estimate_as_UndefinedExpr();
}

struct ParameterBuilder {
  typedef Parameter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_defined(bool defined) {
    fbb_.AddElement<uint8_t>(Parameter::VT_DEFINED, static_cast<uint8_t>(defined), 0);
  }
  void add_is_buffer(bool is_buffer) {
    fbb_.AddElement<uint8_t>(Parameter::VT_IS_BUFFER, static_cast<uint8_t>(is_buffer), 0);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Parameter::VT_TYPE, type);
  }
  void add_dimensions(int32_t dimensions) {
    fbb_.AddElement<int32_t>(Parameter::VT_DIMENSIONS, dimensions, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Parameter::VT_NAME, name);
  }
  void add_host_alignment(int32_t host_alignment) {
    fbb_.AddElement<int32_t>(Parameter::VT_HOST_ALIGNMENT, host_alignment, 0);
  }
  void add_buffer_constraints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>>> buffer_constraints) {
    fbb_.AddOffset(Parameter::VT_BUFFER_CONSTRAINTS, buffer_constraints);
  }
  void add_memory_type(Halide::Serialize::MemoryType memory_type) {
    fbb_.AddElement<int8_t>(Parameter::VT_MEMORY_TYPE, static_cast<int8_t>(memory_type), 0);
  }
  void add_scalar_data(uint64_t scalar_data) {
    fbb_.AddElement<uint64_t>(Parameter::VT_SCALAR_DATA, scalar_data);
  }
  void add_scalar_default_type(Halide::Serialize::Expr scalar_default_type) {
    fbb_.AddElement<uint8_t>(Parameter::VT_SCALAR_DEFAULT_TYPE, static_cast<uint8_t>(scalar_default_type), 0);
  }
  void add_scalar_default(::flatbuffers::Offset<void> scalar_default) {
    fbb_.AddOffset(Parameter::VT_SCALAR_DEFAULT, scalar_default);
  }
  void add_scalar_min_type(Halide::Serialize::Expr scalar_min_type) {
    fbb_.AddElement<uint8_t>(Parameter::VT_SCALAR_MIN_TYPE, static_cast<uint8_t>(scalar_min_type), 0);
  }
  void add_scalar_min(::flatbuffers::Offset<void> scalar_min) {
    fbb_.AddOffset(Parameter::VT_SCALAR_MIN, scalar_min);
  }
  void add_scalar_max_type(Halide::Serialize::Expr scalar_max_type) {
    fbb_.AddElement<uint8_t>(Parameter::VT_SCALAR_MAX_TYPE, static_cast<uint8_t>(scalar_max_type), 0);
  }
  void add_scalar_max(::flatbuffers::Offset<void> scalar_max) {
    fbb_.AddOffset(Parameter::VT_SCALAR_MAX, scalar_max);
  }
  void add_scalar_estimate_type(Halide::Serialize::Expr scalar_estimate_type) {
    fbb_.AddElement<uint8_t>(Parameter::VT_SCALAR_ESTIMATE_TYPE, static_cast<uint8_t>(scalar_estimate_type), 0);
  }
  void add_scalar_estimate(::flatbuffers::Offset<void> scalar_estimate) {
    fbb_.AddOffset(Parameter::VT_SCALAR_ESTIMATE, scalar_estimate);
  }
  explicit ParameterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Parameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Parameter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Parameter> CreateParameter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    bool is_buffer = false,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t host_alignment = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>>> buffer_constraints = 0,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    ::flatbuffers::Optional<uint64_t> scalar_data = ::flatbuffers::nullopt,
    Halide::Serialize::Expr scalar_default_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_default = 0,
    Halide::Serialize::Expr scalar_min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_min = 0,
    Halide::Serialize::Expr scalar_max_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_max = 0,
    Halide::Serialize::Expr scalar_estimate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_estimate = 0) {
  ParameterBuilder builder_(_fbb);
  if(scalar_data) { builder_.add_scalar_data(*scalar_data); }
  builder_.add_scalar_estimate(scalar_estimate);
  builder_.add_scalar_max(scalar_max);
  builder_.add_scalar_min(scalar_min);
  builder_.add_scalar_default(scalar_default);
  builder_.add_buffer_constraints(buffer_constraints);
  builder_.add_host_alignment(host_alignment);
  builder_.add_name(name);
  builder_.add_dimensions(dimensions);
  builder_.add_type(type);
  builder_.add_scalar_estimate_type(scalar_estimate_type);
  builder_.add_scalar_max_type(scalar_max_type);
  builder_.add_scalar_min_type(scalar_min_type);
  builder_.add_scalar_default_type(scalar_default_type);
  builder_.add_memory_type(memory_type);
  builder_.add_is_buffer(is_buffer);
  builder_.add_defined(defined);
  return builder_.Finish();
}

struct Parameter::Traits {
  using type = Parameter;
  static auto constexpr Create = CreateParameter;
};

inline ::flatbuffers::Offset<Parameter> CreateParameterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    bool is_buffer = false,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    const char *name = nullptr,
    int32_t host_alignment = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>> *buffer_constraints = nullptr,
    Halide::Serialize::MemoryType memory_type = Halide::Serialize::MemoryType::Auto,
    ::flatbuffers::Optional<uint64_t> scalar_data = ::flatbuffers::nullopt,
    Halide::Serialize::Expr scalar_default_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_default = 0,
    Halide::Serialize::Expr scalar_min_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_min = 0,
    Halide::Serialize::Expr scalar_max_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_max = 0,
    Halide::Serialize::Expr scalar_estimate_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> scalar_estimate = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto buffer_constraints__ = buffer_constraints ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::BufferConstraint>>(*buffer_constraints) : 0;
  return Halide::Serialize::CreateParameter(
      _fbb,
      defined,
      is_buffer,
      type,
      dimensions,
      name__,
      host_alignment,
      buffer_constraints__,
      memory_type,
      scalar_data,
      scalar_default_type,
      scalar_default,
      scalar_min_type,
      scalar_min,
      scalar_max_type,
      scalar_max,
      scalar_estimate_type,
      scalar_estimate);
}

struct ExternalParameter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExternalParameterBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_BUFFER = 4,
    VT_TYPE = 6,
    VT_DIMENSIONS = 8,
    VT_NAME = 10
  };
  bool is_buffer() const {
    return GetField<uint8_t>(VT_IS_BUFFER, 0) != 0;
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  int32_t dimensions() const {
    return GetField<int32_t>(VT_DIMENSIONS, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_BUFFER, 1) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyField<int32_t>(verifier, VT_DIMENSIONS, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ExternalParameterBuilder {
  typedef ExternalParameter Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_is_buffer(bool is_buffer) {
    fbb_.AddElement<uint8_t>(ExternalParameter::VT_IS_BUFFER, static_cast<uint8_t>(is_buffer), 0);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(ExternalParameter::VT_TYPE, type);
  }
  void add_dimensions(int32_t dimensions) {
    fbb_.AddElement<int32_t>(ExternalParameter::VT_DIMENSIONS, dimensions, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ExternalParameter::VT_NAME, name);
  }
  explicit ExternalParameterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ExternalParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ExternalParameter>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ExternalParameter> CreateExternalParameter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_buffer = false,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ExternalParameterBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_dimensions(dimensions);
  builder_.add_type(type);
  builder_.add_is_buffer(is_buffer);
  return builder_.Finish();
}

struct ExternalParameter::Traits {
  using type = ExternalParameter;
  static auto constexpr Create = CreateExternalParameter;
};

inline ::flatbuffers::Offset<ExternalParameter> CreateExternalParameterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool is_buffer = false,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Halide::Serialize::CreateExternalParameter(
      _fbb,
      is_buffer,
      type,
      dimensions,
      name__);
}

struct ExternFuncArgument FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExternFuncArgumentBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARG_TYPE = 4,
    VT_FUNC_INDEX = 6,
    VT_BUFFER_NAME = 8,
    VT_EXPR_TYPE = 10,
    VT_EXPR = 12,
    VT_IMAGE_PARAM_NAME = 14
  };
  Halide::Serialize::ExternFuncArgumentType arg_type() const {
    return static_cast<Halide::Serialize::ExternFuncArgumentType>(GetField<uint8_t>(VT_ARG_TYPE, 0));
  }
  int32_t func_index() const {
    return GetField<int32_t>(VT_FUNC_INDEX, 0);
  }
  const ::flatbuffers::String *buffer_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUFFER_NAME);
  }
  Halide::Serialize::Expr expr_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXPR_TYPE, 0));
  }
  const void *expr() const {
    return GetPointer<const void *>(VT_EXPR);
  }
  template<typename T> const T *expr_as() const;
  const Halide::Serialize::IntImm *expr_as_IntImm() const {
    return expr_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(expr()) : nullptr;
  }
  const Halide::Serialize::UIntImm *expr_as_UIntImm() const {
    return expr_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(expr()) : nullptr;
  }
  const Halide::Serialize::FloatImm *expr_as_FloatImm() const {
    return expr_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(expr()) : nullptr;
  }
  const Halide::Serialize::StringImm *expr_as_StringImm() const {
    return expr_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(expr()) : nullptr;
  }
  const Halide::Serialize::Cast *expr_as_Cast() const {
    return expr_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(expr()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *expr_as_Reinterpret() const {
    return expr_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(expr()) : nullptr;
  }
  const Halide::Serialize::Add *expr_as_Add() const {
    return expr_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(expr()) : nullptr;
  }
  const Halide::Serialize::Sub *expr_as_Sub() const {
    return expr_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(expr()) : nullptr;
  }
  const Halide::Serialize::Mul *expr_as_Mul() const {
    return expr_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(expr()) : nullptr;
  }
  const Halide::Serialize::Div *expr_as_Div() const {
    return expr_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(expr()) : nullptr;
  }
  const Halide::Serialize::Mod *expr_as_Mod() const {
    return expr_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(expr()) : nullptr;
  }
  const Halide::Serialize::Min *expr_as_Min() const {
    return expr_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(expr()) : nullptr;
  }
  const Halide::Serialize::Max *expr_as_Max() const {
    return expr_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(expr()) : nullptr;
  }
  const Halide::Serialize::EQ *expr_as_EQ() const {
    return expr_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(expr()) : nullptr;
  }
  const Halide::Serialize::NE *expr_as_NE() const {
    return expr_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(expr()) : nullptr;
  }
  const Halide::Serialize::LT *expr_as_LT() const {
    return expr_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(expr()) : nullptr;
  }
  const Halide::Serialize::LE *expr_as_LE() const {
    return expr_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(expr()) : nullptr;
  }
  const Halide::Serialize::GT *expr_as_GT() const {
    return expr_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(expr()) : nullptr;
  }
  const Halide::Serialize::GE *expr_as_GE() const {
    return expr_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(expr()) : nullptr;
  }
  const Halide::Serialize::And *expr_as_And() const {
    return expr_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(expr()) : nullptr;
  }
  const Halide::Serialize::Or *expr_as_Or() const {
    return expr_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(expr()) : nullptr;
  }
  const Halide::Serialize::Not *expr_as_Not() const {
    return expr_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(expr()) : nullptr;
  }
  const Halide::Serialize::Select *expr_as_Select() const {
    return expr_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(expr()) : nullptr;
  }
  const Halide::Serialize::Load *expr_as_Load() const {
    return expr_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(expr()) : nullptr;
  }
  const Halide::Serialize::Ramp *expr_as_Ramp() const {
    return expr_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(expr()) : nullptr;
  }
  const Halide::Serialize::Broadcast *expr_as_Broadcast() const {
    return expr_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(expr()) : nullptr;
  }
  const Halide::Serialize::Let *expr_as_Let() const {
    return expr_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(expr()) : nullptr;
  }
  const Halide::Serialize::Call *expr_as_Call() const {
    return expr_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(expr()) : nullptr;
  }
  const Halide::Serialize::Variable *expr_as_Variable() const {
    return expr_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(expr()) : nullptr;
  }
  const Halide::Serialize::Shuffle *expr_as_Shuffle() const {
    return expr_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(expr()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *expr_as_VectorReduce() const {
    return expr_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(expr()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *expr_as_UndefinedExpr() const {
    return expr_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(expr()) : nullptr;
  }
  const ::flatbuffers::String *image_param_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGE_PARAM_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ARG_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_FUNC_INDEX, 4) &&
           VerifyOffset(verifier, VT_BUFFER_NAME) &&
           verifier.VerifyString(buffer_name()) &&
           VerifyField<uint8_t>(verifier, VT_EXPR_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXPR) &&
           VerifyExpr(verifier, expr(), expr_type()) &&
           VerifyOffset(verifier, VT_IMAGE_PARAM_NAME) &&
           verifier.VerifyString(image_param_name()) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *ExternFuncArgument::expr_as<Halide::Serialize::IntImm>() const {
  return expr_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *ExternFuncArgument::expr_as<Halide::Serialize::UIntImm>() const {
  return expr_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *ExternFuncArgument::expr_as<Halide::Serialize::FloatImm>() const {
  return expr_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *ExternFuncArgument::expr_as<Halide::Serialize::StringImm>() const {
  return expr_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *ExternFuncArgument::expr_as<Halide::Serialize::Cast>() const {
  return expr_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *ExternFuncArgument::expr_as<Halide::Serialize::Reinterpret>() const {
  return expr_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *ExternFuncArgument::expr_as<Halide::Serialize::Add>() const {
  return expr_as_Add();
}

template<> inline const Halide::Serialize::Sub *ExternFuncArgument::expr_as<Halide::Serialize::Sub>() const {
  return expr_as_Sub();
}

template<> inline const Halide::Serialize::Mul *ExternFuncArgument::expr_as<Halide::Serialize::Mul>() const {
  return expr_as_Mul();
}

template<> inline const Halide::Serialize::Div *ExternFuncArgument::expr_as<Halide::Serialize::Div>() const {
  return expr_as_Div();
}

template<> inline const Halide::Serialize::Mod *ExternFuncArgument::expr_as<Halide::Serialize::Mod>() const {
  return expr_as_Mod();
}

template<> inline const Halide::Serialize::Min *ExternFuncArgument::expr_as<Halide::Serialize::Min>() const {
  return expr_as_Min();
}

template<> inline const Halide::Serialize::Max *ExternFuncArgument::expr_as<Halide::Serialize::Max>() const {
  return expr_as_Max();
}

template<> inline const Halide::Serialize::EQ *ExternFuncArgument::expr_as<Halide::Serialize::EQ>() const {
  return expr_as_EQ();
}

template<> inline const Halide::Serialize::NE *ExternFuncArgument::expr_as<Halide::Serialize::NE>() const {
  return expr_as_NE();
}

template<> inline const Halide::Serialize::LT *ExternFuncArgument::expr_as<Halide::Serialize::LT>() const {
  return expr_as_LT();
}

template<> inline const Halide::Serialize::LE *ExternFuncArgument::expr_as<Halide::Serialize::LE>() const {
  return expr_as_LE();
}

template<> inline const Halide::Serialize::GT *ExternFuncArgument::expr_as<Halide::Serialize::GT>() const {
  return expr_as_GT();
}

template<> inline const Halide::Serialize::GE *ExternFuncArgument::expr_as<Halide::Serialize::GE>() const {
  return expr_as_GE();
}

template<> inline const Halide::Serialize::And *ExternFuncArgument::expr_as<Halide::Serialize::And>() const {
  return expr_as_And();
}

template<> inline const Halide::Serialize::Or *ExternFuncArgument::expr_as<Halide::Serialize::Or>() const {
  return expr_as_Or();
}

template<> inline const Halide::Serialize::Not *ExternFuncArgument::expr_as<Halide::Serialize::Not>() const {
  return expr_as_Not();
}

template<> inline const Halide::Serialize::Select *ExternFuncArgument::expr_as<Halide::Serialize::Select>() const {
  return expr_as_Select();
}

template<> inline const Halide::Serialize::Load *ExternFuncArgument::expr_as<Halide::Serialize::Load>() const {
  return expr_as_Load();
}

template<> inline const Halide::Serialize::Ramp *ExternFuncArgument::expr_as<Halide::Serialize::Ramp>() const {
  return expr_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *ExternFuncArgument::expr_as<Halide::Serialize::Broadcast>() const {
  return expr_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *ExternFuncArgument::expr_as<Halide::Serialize::Let>() const {
  return expr_as_Let();
}

template<> inline const Halide::Serialize::Call *ExternFuncArgument::expr_as<Halide::Serialize::Call>() const {
  return expr_as_Call();
}

template<> inline const Halide::Serialize::Variable *ExternFuncArgument::expr_as<Halide::Serialize::Variable>() const {
  return expr_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *ExternFuncArgument::expr_as<Halide::Serialize::Shuffle>() const {
  return expr_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *ExternFuncArgument::expr_as<Halide::Serialize::VectorReduce>() const {
  return expr_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *ExternFuncArgument::expr_as<Halide::Serialize::UndefinedExpr>() const {
  return expr_as_UndefinedExpr();
}

struct ExternFuncArgumentBuilder {
  typedef ExternFuncArgument Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_arg_type(Halide::Serialize::ExternFuncArgumentType arg_type) {
    fbb_.AddElement<uint8_t>(ExternFuncArgument::VT_ARG_TYPE, static_cast<uint8_t>(arg_type), 0);
  }
  void add_func_index(int32_t func_index) {
    fbb_.AddElement<int32_t>(ExternFuncArgument::VT_FUNC_INDEX, func_index, 0);
  }
  void add_buffer_name(::flatbuffers::Offset<::flatbuffers::String> buffer_name) {
    fbb_.AddOffset(ExternFuncArgument::VT_BUFFER_NAME, buffer_name);
  }
  void add_expr_type(Halide::Serialize::Expr expr_type) {
    fbb_.AddElement<uint8_t>(ExternFuncArgument::VT_EXPR_TYPE, static_cast<uint8_t>(expr_type), 0);
  }
  void add_expr(::flatbuffers::Offset<void> expr) {
    fbb_.AddOffset(ExternFuncArgument::VT_EXPR, expr);
  }
  void add_image_param_name(::flatbuffers::Offset<::flatbuffers::String> image_param_name) {
    fbb_.AddOffset(ExternFuncArgument::VT_IMAGE_PARAM_NAME, image_param_name);
  }
  explicit ExternFuncArgumentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ExternFuncArgument> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ExternFuncArgument>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ExternFuncArgument> CreateExternFuncArgument(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::ExternFuncArgumentType arg_type = Halide::Serialize::ExternFuncArgumentType::UndefinedArg,
    int32_t func_index = 0,
    ::flatbuffers::Offset<::flatbuffers::String> buffer_name = 0,
    Halide::Serialize::Expr expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> expr = 0,
    ::flatbuffers::Offset<::flatbuffers::String> image_param_name = 0) {
  ExternFuncArgumentBuilder builder_(_fbb);
  builder_.add_image_param_name(image_param_name);
  builder_.add_expr(expr);
  builder_.add_buffer_name(buffer_name);
  builder_.add_func_index(func_index);
  builder_.add_expr_type(expr_type);
  builder_.add_arg_type(arg_type);
  return builder_.Finish();
}

struct ExternFuncArgument::Traits {
  using type = ExternFuncArgument;
  static auto constexpr Create = CreateExternFuncArgument;
};

inline ::flatbuffers::Offset<ExternFuncArgument> CreateExternFuncArgumentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Halide::Serialize::ExternFuncArgumentType arg_type = Halide::Serialize::ExternFuncArgumentType::UndefinedArg,
    int32_t func_index = 0,
    const char *buffer_name = nullptr,
    Halide::Serialize::Expr expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> expr = 0,
    const char *image_param_name = nullptr) {
  auto buffer_name__ = buffer_name ? _fbb.CreateString(buffer_name) : 0;
  auto image_param_name__ = image_param_name ? _fbb.CreateString(image_param_name) : 0;
  return Halide::Serialize::CreateExternFuncArgument(
      _fbb,
      arg_type,
      func_index,
      buffer_name__,
      expr_type,
      expr,
      image_param_name__);
}

struct BufferDimension FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BufferDimensionBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MIN = 4,
    VT_EXTENT = 6,
    VT_STRIDE = 8
  };
  int32_t min() const {
    return GetField<int32_t>(VT_MIN, 0);
  }
  int32_t extent() const {
    return GetField<int32_t>(VT_EXTENT, 0);
  }
  int32_t stride() const {
    return GetField<int32_t>(VT_STRIDE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MIN, 4) &&
           VerifyField<int32_t>(verifier, VT_EXTENT, 4) &&
           VerifyField<int32_t>(verifier, VT_STRIDE, 4) &&
           verifier.EndTable();
  }
};

struct BufferDimensionBuilder {
  typedef BufferDimension Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_min(int32_t min) {
    fbb_.AddElement<int32_t>(BufferDimension::VT_MIN, min, 0);
  }
  void add_extent(int32_t extent) {
    fbb_.AddElement<int32_t>(BufferDimension::VT_EXTENT, extent, 0);
  }
  void add_stride(int32_t stride) {
    fbb_.AddElement<int32_t>(BufferDimension::VT_STRIDE, stride, 0);
  }
  explicit BufferDimensionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BufferDimension> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BufferDimension>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BufferDimension> CreateBufferDimension(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t min = 0,
    int32_t extent = 0,
    int32_t stride = 0) {
  BufferDimensionBuilder builder_(_fbb);
  builder_.add_stride(stride);
  builder_.add_extent(extent);
  builder_.add_min(min);
  return builder_.Finish();
}

struct BufferDimension::Traits {
  using type = BufferDimension;
  static auto constexpr Create = CreateBufferDimension;
};

struct Buffer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BufferBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFINED = 4,
    VT_NAME = 6,
    VT_TYPE = 8,
    VT_DIMENSIONS = 10,
    VT_DIMS = 12,
    VT_DATA = 14
  };
  bool defined() const {
    return GetField<uint8_t>(VT_DEFINED, 0) != 0;
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Halide::Serialize::Type *type() const {
    return GetPointer<const Halide::Serialize::Type *>(VT_TYPE);
  }
  int32_t dimensions() const {
    return GetField<int32_t>(VT_DIMENSIONS, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>> *dims() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>> *>(VT_DIMS);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DEFINED, 1) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyTable(type()) &&
           VerifyField<int32_t>(verifier, VT_DIMENSIONS, 4) &&
           VerifyOffset(verifier, VT_DIMS) &&
           verifier.VerifyVector(dims()) &&
           verifier.VerifyVectorOfTables(dims()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct BufferBuilder {
  typedef Buffer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_defined(bool defined) {
    fbb_.AddElement<uint8_t>(Buffer::VT_DEFINED, static_cast<uint8_t>(defined), 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Buffer::VT_NAME, name);
  }
  void add_type(::flatbuffers::Offset<Halide::Serialize::Type> type) {
    fbb_.AddOffset(Buffer::VT_TYPE, type);
  }
  void add_dimensions(int32_t dimensions) {
    fbb_.AddElement<int32_t>(Buffer::VT_DIMENSIONS, dimensions, 0);
  }
  void add_dims(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>>> dims) {
    fbb_.AddOffset(Buffer::VT_DIMS, dims);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Buffer::VT_DATA, data);
  }
  explicit BufferBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Buffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Buffer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Buffer> CreateBuffer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>>> dims = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  BufferBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_dims(dims);
  builder_.add_dimensions(dimensions);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_defined(defined);
  return builder_.Finish();
}

struct Buffer::Traits {
  using type = Buffer;
  static auto constexpr Create = CreateBuffer;
};

inline ::flatbuffers::Offset<Buffer> CreateBufferDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool defined = false,
    const char *name = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::Type> type = 0,
    int32_t dimensions = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>> *dims = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto dims__ = dims ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::BufferDimension>>(*dims) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Halide::Serialize::CreateBuffer(
      _fbb,
      defined,
      name__,
      type,
      dimensions,
      dims__,
      data__);
}

struct Func FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FuncBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ORIGIN_NAME = 6,
    VT_OUTPUT_TYPES = 8,
    VT_REQUIRED_TYPES = 10,
    VT_REQUIRED_DIMS = 12,
    VT_ARGS = 14,
    VT_FUNC_SCHEDULE = 16,
    VT_INIT_DEF = 18,
    VT_UPDATES = 20,
    VT_DEBUG_FILE = 22,
    VT_OUTPUT_BUFFERS_NAMES = 24,
    VT_EXTERN_ARGUMENTS = 26,
    VT_EXTERN_FUNCTION_NAME = 28,
    VT_EXTERN_MANGLING = 30,
    VT_EXTERN_FUNCTION_DEVICE_API = 32,
    VT_EXTERN_PROXY_EXPR_TYPE = 34,
    VT_EXTERN_PROXY_EXPR = 36,
    VT_TRACE_LOADS = 38,
    VT_TRACE_STORES = 40,
    VT_TRACE_REALIZATIONS = 42,
    VT_TRACE_TAGS = 44,
    VT_FROZEN = 46
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *origin_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *output_types() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *>(VT_OUTPUT_TYPES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *required_types() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>> *>(VT_REQUIRED_TYPES);
  }
  int32_t required_dims() const {
    return GetField<int32_t>(VT_REQUIRED_DIMS, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *args() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ARGS);
  }
  const Halide::Serialize::FuncSchedule *func_schedule() const {
    return GetPointer<const Halide::Serialize::FuncSchedule *>(VT_FUNC_SCHEDULE);
  }
  const Halide::Serialize::Definition *init_def() const {
    return GetPointer<const Halide::Serialize::Definition *>(VT_INIT_DEF);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Definition>> *updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Definition>> *>(VT_UPDATES);
  }
  const ::flatbuffers::String *debug_file() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEBUG_FILE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *output_buffers_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OUTPUT_BUFFERS_NAMES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>> *extern_arguments() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>> *>(VT_EXTERN_ARGUMENTS);
  }
  const ::flatbuffers::String *extern_function_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERN_FUNCTION_NAME);
  }
  Halide::Serialize::NameMangling extern_mangling() const {
    return static_cast<Halide::Serialize::NameMangling>(GetField<uint8_t>(VT_EXTERN_MANGLING, 0));
  }
  Halide::Serialize::DeviceAPI extern_function_device_api() const {
    return static_cast<Halide::Serialize::DeviceAPI>(GetField<int8_t>(VT_EXTERN_FUNCTION_DEVICE_API, 0));
  }
  Halide::Serialize::Expr extern_proxy_expr_type() const {
    return static_cast<Halide::Serialize::Expr>(GetField<uint8_t>(VT_EXTERN_PROXY_EXPR_TYPE, 0));
  }
  const void *extern_proxy_expr() const {
    return GetPointer<const void *>(VT_EXTERN_PROXY_EXPR);
  }
  template<typename T> const T *extern_proxy_expr_as() const;
  const Halide::Serialize::IntImm *extern_proxy_expr_as_IntImm() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::IntImm ? static_cast<const Halide::Serialize::IntImm *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::UIntImm *extern_proxy_expr_as_UIntImm() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::UIntImm ? static_cast<const Halide::Serialize::UIntImm *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::FloatImm *extern_proxy_expr_as_FloatImm() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::FloatImm ? static_cast<const Halide::Serialize::FloatImm *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::StringImm *extern_proxy_expr_as_StringImm() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::StringImm ? static_cast<const Halide::Serialize::StringImm *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Cast *extern_proxy_expr_as_Cast() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Cast ? static_cast<const Halide::Serialize::Cast *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Reinterpret *extern_proxy_expr_as_Reinterpret() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Reinterpret ? static_cast<const Halide::Serialize::Reinterpret *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Add *extern_proxy_expr_as_Add() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Add ? static_cast<const Halide::Serialize::Add *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Sub *extern_proxy_expr_as_Sub() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Sub ? static_cast<const Halide::Serialize::Sub *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Mul *extern_proxy_expr_as_Mul() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Mul ? static_cast<const Halide::Serialize::Mul *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Div *extern_proxy_expr_as_Div() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Div ? static_cast<const Halide::Serialize::Div *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Mod *extern_proxy_expr_as_Mod() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Mod ? static_cast<const Halide::Serialize::Mod *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Min *extern_proxy_expr_as_Min() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Min ? static_cast<const Halide::Serialize::Min *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Max *extern_proxy_expr_as_Max() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Max ? static_cast<const Halide::Serialize::Max *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::EQ *extern_proxy_expr_as_EQ() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::EQ ? static_cast<const Halide::Serialize::EQ *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::NE *extern_proxy_expr_as_NE() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::NE ? static_cast<const Halide::Serialize::NE *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::LT *extern_proxy_expr_as_LT() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::LT ? static_cast<const Halide::Serialize::LT *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::LE *extern_proxy_expr_as_LE() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::LE ? static_cast<const Halide::Serialize::LE *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::GT *extern_proxy_expr_as_GT() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::GT ? static_cast<const Halide::Serialize::GT *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::GE *extern_proxy_expr_as_GE() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::GE ? static_cast<const Halide::Serialize::GE *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::And *extern_proxy_expr_as_And() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::And ? static_cast<const Halide::Serialize::And *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Or *extern_proxy_expr_as_Or() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Or ? static_cast<const Halide::Serialize::Or *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Not *extern_proxy_expr_as_Not() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Not ? static_cast<const Halide::Serialize::Not *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Select *extern_proxy_expr_as_Select() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Select ? static_cast<const Halide::Serialize::Select *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Load *extern_proxy_expr_as_Load() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Load ? static_cast<const Halide::Serialize::Load *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Ramp *extern_proxy_expr_as_Ramp() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Ramp ? static_cast<const Halide::Serialize::Ramp *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Broadcast *extern_proxy_expr_as_Broadcast() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Broadcast ? static_cast<const Halide::Serialize::Broadcast *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Let *extern_proxy_expr_as_Let() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Let ? static_cast<const Halide::Serialize::Let *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Call *extern_proxy_expr_as_Call() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Call ? static_cast<const Halide::Serialize::Call *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Variable *extern_proxy_expr_as_Variable() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Variable ? static_cast<const Halide::Serialize::Variable *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::Shuffle *extern_proxy_expr_as_Shuffle() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::Shuffle ? static_cast<const Halide::Serialize::Shuffle *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::VectorReduce *extern_proxy_expr_as_VectorReduce() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::VectorReduce ? static_cast<const Halide::Serialize::VectorReduce *>(extern_proxy_expr()) : nullptr;
  }
  const Halide::Serialize::UndefinedExpr *extern_proxy_expr_as_UndefinedExpr() const {
    return extern_proxy_expr_type() == Halide::Serialize::Expr::UndefinedExpr ? static_cast<const Halide::Serialize::UndefinedExpr *>(extern_proxy_expr()) : nullptr;
  }
  bool trace_loads() const {
    return GetField<uint8_t>(VT_TRACE_LOADS, 0) != 0;
  }
  bool trace_stores() const {
    return GetField<uint8_t>(VT_TRACE_STORES, 0) != 0;
  }
  bool trace_realizations() const {
    return GetField<uint8_t>(VT_TRACE_REALIZATIONS, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *trace_tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRACE_TAGS);
  }
  bool frozen() const {
    return GetField<uint8_t>(VT_FROZEN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ORIGIN_NAME) &&
           verifier.VerifyString(origin_name()) &&
           VerifyOffset(verifier, VT_OUTPUT_TYPES) &&
           verifier.VerifyVector(output_types()) &&
           verifier.VerifyVectorOfTables(output_types()) &&
           VerifyOffset(verifier, VT_REQUIRED_TYPES) &&
           verifier.VerifyVector(required_types()) &&
           verifier.VerifyVectorOfTables(required_types()) &&
           VerifyField<int32_t>(verifier, VT_REQUIRED_DIMS, 4) &&
           VerifyOffset(verifier, VT_ARGS) &&
           verifier.VerifyVector(args()) &&
           verifier.VerifyVectorOfStrings(args()) &&
           VerifyOffset(verifier, VT_FUNC_SCHEDULE) &&
           verifier.VerifyTable(func_schedule()) &&
           VerifyOffset(verifier, VT_INIT_DEF) &&
           verifier.VerifyTable(init_def()) &&
           VerifyOffset(verifier, VT_UPDATES) &&
           verifier.VerifyVector(updates()) &&
           verifier.VerifyVectorOfTables(updates()) &&
           VerifyOffset(verifier, VT_DEBUG_FILE) &&
           verifier.VerifyString(debug_file()) &&
           VerifyOffset(verifier, VT_OUTPUT_BUFFERS_NAMES) &&
           verifier.VerifyVector(output_buffers_names()) &&
           verifier.VerifyVectorOfStrings(output_buffers_names()) &&
           VerifyOffset(verifier, VT_EXTERN_ARGUMENTS) &&
           verifier.VerifyVector(extern_arguments()) &&
           verifier.VerifyVectorOfTables(extern_arguments()) &&
           VerifyOffset(verifier, VT_EXTERN_FUNCTION_NAME) &&
           verifier.VerifyString(extern_function_name()) &&
           VerifyField<uint8_t>(verifier, VT_EXTERN_MANGLING, 1) &&
           VerifyField<int8_t>(verifier, VT_EXTERN_FUNCTION_DEVICE_API, 1) &&
           VerifyField<uint8_t>(verifier, VT_EXTERN_PROXY_EXPR_TYPE, 1) &&
           VerifyOffset(verifier, VT_EXTERN_PROXY_EXPR) &&
           VerifyExpr(verifier, extern_proxy_expr(), extern_proxy_expr_type()) &&
           VerifyField<uint8_t>(verifier, VT_TRACE_LOADS, 1) &&
           VerifyField<uint8_t>(verifier, VT_TRACE_STORES, 1) &&
           VerifyField<uint8_t>(verifier, VT_TRACE_REALIZATIONS, 1) &&
           VerifyOffset(verifier, VT_TRACE_TAGS) &&
           verifier.VerifyVector(trace_tags()) &&
           verifier.VerifyVectorOfStrings(trace_tags()) &&
           VerifyField<uint8_t>(verifier, VT_FROZEN, 1) &&
           verifier.EndTable();
  }
};

template<> inline const Halide::Serialize::IntImm *Func::extern_proxy_expr_as<Halide::Serialize::IntImm>() const {
  return extern_proxy_expr_as_IntImm();
}

template<> inline const Halide::Serialize::UIntImm *Func::extern_proxy_expr_as<Halide::Serialize::UIntImm>() const {
  return extern_proxy_expr_as_UIntImm();
}

template<> inline const Halide::Serialize::FloatImm *Func::extern_proxy_expr_as<Halide::Serialize::FloatImm>() const {
  return extern_proxy_expr_as_FloatImm();
}

template<> inline const Halide::Serialize::StringImm *Func::extern_proxy_expr_as<Halide::Serialize::StringImm>() const {
  return extern_proxy_expr_as_StringImm();
}

template<> inline const Halide::Serialize::Cast *Func::extern_proxy_expr_as<Halide::Serialize::Cast>() const {
  return extern_proxy_expr_as_Cast();
}

template<> inline const Halide::Serialize::Reinterpret *Func::extern_proxy_expr_as<Halide::Serialize::Reinterpret>() const {
  return extern_proxy_expr_as_Reinterpret();
}

template<> inline const Halide::Serialize::Add *Func::extern_proxy_expr_as<Halide::Serialize::Add>() const {
  return extern_proxy_expr_as_Add();
}

template<> inline const Halide::Serialize::Sub *Func::extern_proxy_expr_as<Halide::Serialize::Sub>() const {
  return extern_proxy_expr_as_Sub();
}

template<> inline const Halide::Serialize::Mul *Func::extern_proxy_expr_as<Halide::Serialize::Mul>() const {
  return extern_proxy_expr_as_Mul();
}

template<> inline const Halide::Serialize::Div *Func::extern_proxy_expr_as<Halide::Serialize::Div>() const {
  return extern_proxy_expr_as_Div();
}

template<> inline const Halide::Serialize::Mod *Func::extern_proxy_expr_as<Halide::Serialize::Mod>() const {
  return extern_proxy_expr_as_Mod();
}

template<> inline const Halide::Serialize::Min *Func::extern_proxy_expr_as<Halide::Serialize::Min>() const {
  return extern_proxy_expr_as_Min();
}

template<> inline const Halide::Serialize::Max *Func::extern_proxy_expr_as<Halide::Serialize::Max>() const {
  return extern_proxy_expr_as_Max();
}

template<> inline const Halide::Serialize::EQ *Func::extern_proxy_expr_as<Halide::Serialize::EQ>() const {
  return extern_proxy_expr_as_EQ();
}

template<> inline const Halide::Serialize::NE *Func::extern_proxy_expr_as<Halide::Serialize::NE>() const {
  return extern_proxy_expr_as_NE();
}

template<> inline const Halide::Serialize::LT *Func::extern_proxy_expr_as<Halide::Serialize::LT>() const {
  return extern_proxy_expr_as_LT();
}

template<> inline const Halide::Serialize::LE *Func::extern_proxy_expr_as<Halide::Serialize::LE>() const {
  return extern_proxy_expr_as_LE();
}

template<> inline const Halide::Serialize::GT *Func::extern_proxy_expr_as<Halide::Serialize::GT>() const {
  return extern_proxy_expr_as_GT();
}

template<> inline const Halide::Serialize::GE *Func::extern_proxy_expr_as<Halide::Serialize::GE>() const {
  return extern_proxy_expr_as_GE();
}

template<> inline const Halide::Serialize::And *Func::extern_proxy_expr_as<Halide::Serialize::And>() const {
  return extern_proxy_expr_as_And();
}

template<> inline const Halide::Serialize::Or *Func::extern_proxy_expr_as<Halide::Serialize::Or>() const {
  return extern_proxy_expr_as_Or();
}

template<> inline const Halide::Serialize::Not *Func::extern_proxy_expr_as<Halide::Serialize::Not>() const {
  return extern_proxy_expr_as_Not();
}

template<> inline const Halide::Serialize::Select *Func::extern_proxy_expr_as<Halide::Serialize::Select>() const {
  return extern_proxy_expr_as_Select();
}

template<> inline const Halide::Serialize::Load *Func::extern_proxy_expr_as<Halide::Serialize::Load>() const {
  return extern_proxy_expr_as_Load();
}

template<> inline const Halide::Serialize::Ramp *Func::extern_proxy_expr_as<Halide::Serialize::Ramp>() const {
  return extern_proxy_expr_as_Ramp();
}

template<> inline const Halide::Serialize::Broadcast *Func::extern_proxy_expr_as<Halide::Serialize::Broadcast>() const {
  return extern_proxy_expr_as_Broadcast();
}

template<> inline const Halide::Serialize::Let *Func::extern_proxy_expr_as<Halide::Serialize::Let>() const {
  return extern_proxy_expr_as_Let();
}

template<> inline const Halide::Serialize::Call *Func::extern_proxy_expr_as<Halide::Serialize::Call>() const {
  return extern_proxy_expr_as_Call();
}

template<> inline const Halide::Serialize::Variable *Func::extern_proxy_expr_as<Halide::Serialize::Variable>() const {
  return extern_proxy_expr_as_Variable();
}

template<> inline const Halide::Serialize::Shuffle *Func::extern_proxy_expr_as<Halide::Serialize::Shuffle>() const {
  return extern_proxy_expr_as_Shuffle();
}

template<> inline const Halide::Serialize::VectorReduce *Func::extern_proxy_expr_as<Halide::Serialize::VectorReduce>() const {
  return extern_proxy_expr_as_VectorReduce();
}

template<> inline const Halide::Serialize::UndefinedExpr *Func::extern_proxy_expr_as<Halide::Serialize::UndefinedExpr>() const {
  return extern_proxy_expr_as_UndefinedExpr();
}

struct FuncBuilder {
  typedef Func Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Func::VT_NAME, name);
  }
  void add_origin_name(::flatbuffers::Offset<::flatbuffers::String> origin_name) {
    fbb_.AddOffset(Func::VT_ORIGIN_NAME, origin_name);
  }
  void add_output_types(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> output_types) {
    fbb_.AddOffset(Func::VT_OUTPUT_TYPES, output_types);
  }
  void add_required_types(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> required_types) {
    fbb_.AddOffset(Func::VT_REQUIRED_TYPES, required_types);
  }
  void add_required_dims(int32_t required_dims) {
    fbb_.AddElement<int32_t>(Func::VT_REQUIRED_DIMS, required_dims, 0);
  }
  void add_args(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> args) {
    fbb_.AddOffset(Func::VT_ARGS, args);
  }
  void add_func_schedule(::flatbuffers::Offset<Halide::Serialize::FuncSchedule> func_schedule) {
    fbb_.AddOffset(Func::VT_FUNC_SCHEDULE, func_schedule);
  }
  void add_init_def(::flatbuffers::Offset<Halide::Serialize::Definition> init_def) {
    fbb_.AddOffset(Func::VT_INIT_DEF, init_def);
  }
  void add_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Definition>>> updates) {
    fbb_.AddOffset(Func::VT_UPDATES, updates);
  }
  void add_debug_file(::flatbuffers::Offset<::flatbuffers::String> debug_file) {
    fbb_.AddOffset(Func::VT_DEBUG_FILE, debug_file);
  }
  void add_output_buffers_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> output_buffers_names) {
    fbb_.AddOffset(Func::VT_OUTPUT_BUFFERS_NAMES, output_buffers_names);
  }
  void add_extern_arguments(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>>> extern_arguments) {
    fbb_.AddOffset(Func::VT_EXTERN_ARGUMENTS, extern_arguments);
  }
  void add_extern_function_name(::flatbuffers::Offset<::flatbuffers::String> extern_function_name) {
    fbb_.AddOffset(Func::VT_EXTERN_FUNCTION_NAME, extern_function_name);
  }
  void add_extern_mangling(Halide::Serialize::NameMangling extern_mangling) {
    fbb_.AddElement<uint8_t>(Func::VT_EXTERN_MANGLING, static_cast<uint8_t>(extern_mangling), 0);
  }
  void add_extern_function_device_api(Halide::Serialize::DeviceAPI extern_function_device_api) {
    fbb_.AddElement<int8_t>(Func::VT_EXTERN_FUNCTION_DEVICE_API, static_cast<int8_t>(extern_function_device_api), 0);
  }
  void add_extern_proxy_expr_type(Halide::Serialize::Expr extern_proxy_expr_type) {
    fbb_.AddElement<uint8_t>(Func::VT_EXTERN_PROXY_EXPR_TYPE, static_cast<uint8_t>(extern_proxy_expr_type), 0);
  }
  void add_extern_proxy_expr(::flatbuffers::Offset<void> extern_proxy_expr) {
    fbb_.AddOffset(Func::VT_EXTERN_PROXY_EXPR, extern_proxy_expr);
  }
  void add_trace_loads(bool trace_loads) {
    fbb_.AddElement<uint8_t>(Func::VT_TRACE_LOADS, static_cast<uint8_t>(trace_loads), 0);
  }
  void add_trace_stores(bool trace_stores) {
    fbb_.AddElement<uint8_t>(Func::VT_TRACE_STORES, static_cast<uint8_t>(trace_stores), 0);
  }
  void add_trace_realizations(bool trace_realizations) {
    fbb_.AddElement<uint8_t>(Func::VT_TRACE_REALIZATIONS, static_cast<uint8_t>(trace_realizations), 0);
  }
  void add_trace_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trace_tags) {
    fbb_.AddOffset(Func::VT_TRACE_TAGS, trace_tags);
  }
  void add_frozen(bool frozen) {
    fbb_.AddElement<uint8_t>(Func::VT_FROZEN, static_cast<uint8_t>(frozen), 0);
  }
  explicit FuncBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Func> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Func>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Func> CreateFunc(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin_name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> output_types = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Type>>> required_types = 0,
    int32_t required_dims = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> args = 0,
    ::flatbuffers::Offset<Halide::Serialize::FuncSchedule> func_schedule = 0,
    ::flatbuffers::Offset<Halide::Serialize::Definition> init_def = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Definition>>> updates = 0,
    ::flatbuffers::Offset<::flatbuffers::String> debug_file = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> output_buffers_names = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>>> extern_arguments = 0,
    ::flatbuffers::Offset<::flatbuffers::String> extern_function_name = 0,
    Halide::Serialize::NameMangling extern_mangling = Halide::Serialize::NameMangling::Default,
    Halide::Serialize::DeviceAPI extern_function_device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::Expr extern_proxy_expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extern_proxy_expr = 0,
    bool trace_loads = false,
    bool trace_stores = false,
    bool trace_realizations = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trace_tags = 0,
    bool frozen = false) {
  FuncBuilder builder_(_fbb);
  builder_.add_trace_tags(trace_tags);
  builder_.add_extern_proxy_expr(extern_proxy_expr);
  builder_.add_extern_function_name(extern_function_name);
  builder_.add_extern_arguments(extern_arguments);
  builder_.add_output_buffers_names(output_buffers_names);
  builder_.add_debug_file(debug_file);
  builder_.add_updates(updates);
  builder_.add_init_def(init_def);
  builder_.add_func_schedule(func_schedule);
  builder_.add_args(args);
  builder_.add_required_dims(required_dims);
  builder_.add_required_types(required_types);
  builder_.add_output_types(output_types);
  builder_.add_origin_name(origin_name);
  builder_.add_name(name);
  builder_.add_frozen(frozen);
  builder_.add_trace_realizations(trace_realizations);
  builder_.add_trace_stores(trace_stores);
  builder_.add_trace_loads(trace_loads);
  builder_.add_extern_proxy_expr_type(extern_proxy_expr_type);
  builder_.add_extern_function_device_api(extern_function_device_api);
  builder_.add_extern_mangling(extern_mangling);
  return builder_.Finish();
}

struct Func::Traits {
  using type = Func;
  static auto constexpr Create = CreateFunc;
};

inline ::flatbuffers::Offset<Func> CreateFuncDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *origin_name = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Type>> *output_types = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Type>> *required_types = nullptr,
    int32_t required_dims = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *args = nullptr,
    ::flatbuffers::Offset<Halide::Serialize::FuncSchedule> func_schedule = 0,
    ::flatbuffers::Offset<Halide::Serialize::Definition> init_def = 0,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Definition>> *updates = nullptr,
    const char *debug_file = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *output_buffers_names = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>> *extern_arguments = nullptr,
    const char *extern_function_name = nullptr,
    Halide::Serialize::NameMangling extern_mangling = Halide::Serialize::NameMangling::Default,
    Halide::Serialize::DeviceAPI extern_function_device_api = Halide::Serialize::DeviceAPI::None,
    Halide::Serialize::Expr extern_proxy_expr_type = Halide::Serialize::Expr::NONE,
    ::flatbuffers::Offset<void> extern_proxy_expr = 0,
    bool trace_loads = false,
    bool trace_stores = false,
    bool trace_realizations = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *trace_tags = nullptr,
    bool frozen = false) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto origin_name__ = origin_name ? _fbb.CreateString(origin_name) : 0;
  auto output_types__ = output_types ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Type>>(*output_types) : 0;
  auto required_types__ = required_types ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Type>>(*required_types) : 0;
  auto args__ = args ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*args) : 0;
  auto updates__ = updates ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Definition>>(*updates) : 0;
  auto debug_file__ = debug_file ? _fbb.CreateString(debug_file) : 0;
  auto output_buffers_names__ = output_buffers_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*output_buffers_names) : 0;
  auto extern_arguments__ = extern_arguments ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::ExternFuncArgument>>(*extern_arguments) : 0;
  auto extern_function_name__ = extern_function_name ? _fbb.CreateString(extern_function_name) : 0;
  auto trace_tags__ = trace_tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*trace_tags) : 0;
  return Halide::Serialize::CreateFunc(
      _fbb,
      name__,
      origin_name__,
      output_types__,
      required_types__,
      required_dims,
      args__,
      func_schedule,
      init_def,
      updates__,
      debug_file__,
      output_buffers_names__,
      extern_arguments__,
      extern_function_name__,
      extern_mangling,
      extern_function_device_api,
      extern_proxy_expr_type,
      extern_proxy_expr,
      trace_loads,
      trace_stores,
      trace_realizations,
      trace_tags__,
      frozen);
}

struct Pipeline FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PipelineBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUNCS = 4,
    VT_OUTPUT_NAMES = 6,
    VT_REQUIREMENTS_TYPE = 8,
    VT_REQUIREMENTS = 10,
    VT_FUNC_NAMES_IN_ORDER = 12,
    VT_PARAMETERS = 14,
    VT_EXTERNAL_PARAMETERS = 16,
    VT_BUFFERS = 18
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Func>> *funcs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Func>> *>(VT_FUNCS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *output_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OUTPUT_NAMES);
  }
  const ::flatbuffers::Vector<Halide::Serialize::Stmt> *requirements_type() const {
    return GetPointer<const ::flatbuffers::Vector<Halide::Serialize::Stmt> *>(VT_REQUIREMENTS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *requirements() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_REQUIREMENTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *func_names_in_order() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FUNC_NAMES_IN_ORDER);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Parameter>> *parameters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Parameter>> *>(VT_PARAMETERS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>> *external_parameters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>> *>(VT_EXTERNAL_PARAMETERS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Buffer>> *buffers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Buffer>> *>(VT_BUFFERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUNCS) &&
           verifier.VerifyVector(funcs()) &&
           verifier.VerifyVectorOfTables(funcs()) &&
           VerifyOffset(verifier, VT_OUTPUT_NAMES) &&
           verifier.VerifyVector(output_names()) &&
           verifier.VerifyVectorOfStrings(output_names()) &&
           VerifyOffset(verifier, VT_REQUIREMENTS_TYPE) &&
           verifier.VerifyVector(requirements_type()) &&
           VerifyOffset(verifier, VT_REQUIREMENTS) &&
           verifier.VerifyVector(requirements()) &&
           VerifyStmtVector(verifier, requirements(), requirements_type()) &&
           VerifyOffset(verifier, VT_FUNC_NAMES_IN_ORDER) &&
           verifier.VerifyVector(func_names_in_order()) &&
           verifier.VerifyVectorOfStrings(func_names_in_order()) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfTables(parameters()) &&
           VerifyOffset(verifier, VT_EXTERNAL_PARAMETERS) &&
           verifier.VerifyVector(external_parameters()) &&
           verifier.VerifyVectorOfTables(external_parameters()) &&
           VerifyOffset(verifier, VT_BUFFERS) &&
           verifier.VerifyVector(buffers()) &&
           verifier.VerifyVectorOfTables(buffers()) &&
           verifier.EndTable();
  }
};

struct PipelineBuilder {
  typedef Pipeline Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_funcs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Func>>> funcs) {
    fbb_.AddOffset(Pipeline::VT_FUNCS, funcs);
  }
  void add_output_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> output_names) {
    fbb_.AddOffset(Pipeline::VT_OUTPUT_NAMES, output_names);
  }
  void add_requirements_type(::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Stmt>> requirements_type) {
    fbb_.AddOffset(Pipeline::VT_REQUIREMENTS_TYPE, requirements_type);
  }
  void add_requirements(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> requirements) {
    fbb_.AddOffset(Pipeline::VT_REQUIREMENTS, requirements);
  }
  void add_func_names_in_order(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> func_names_in_order) {
    fbb_.AddOffset(Pipeline::VT_FUNC_NAMES_IN_ORDER, func_names_in_order);
  }
  void add_parameters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Parameter>>> parameters) {
    fbb_.AddOffset(Pipeline::VT_PARAMETERS, parameters);
  }
  void add_external_parameters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>>> external_parameters) {
    fbb_.AddOffset(Pipeline::VT_EXTERNAL_PARAMETERS, external_parameters);
  }
  void add_buffers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Buffer>>> buffers) {
    fbb_.AddOffset(Pipeline::VT_BUFFERS, buffers);
  }
  explicit PipelineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pipeline> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pipeline>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pipeline> CreatePipeline(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Func>>> funcs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> output_names = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<Halide::Serialize::Stmt>> requirements_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> requirements = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> func_names_in_order = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Parameter>>> parameters = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>>> external_parameters = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Halide::Serialize::Buffer>>> buffers = 0) {
  PipelineBuilder builder_(_fbb);
  builder_.add_buffers(buffers);
  builder_.add_external_parameters(external_parameters);
  builder_.add_parameters(parameters);
  builder_.add_func_names_in_order(func_names_in_order);
  builder_.add_requirements(requirements);
  builder_.add_requirements_type(requirements_type);
  builder_.add_output_names(output_names);
  builder_.add_funcs(funcs);
  return builder_.Finish();
}

struct Pipeline::Traits {
  using type = Pipeline;
  static auto constexpr Create = CreatePipeline;
};

inline ::flatbuffers::Offset<Pipeline> CreatePipelineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Func>> *funcs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *output_names = nullptr,
    const std::vector<Halide::Serialize::Stmt> *requirements_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *requirements = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *func_names_in_order = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Parameter>> *parameters = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>> *external_parameters = nullptr,
    const std::vector<::flatbuffers::Offset<Halide::Serialize::Buffer>> *buffers = nullptr) {
  auto funcs__ = funcs ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Func>>(*funcs) : 0;
  auto output_names__ = output_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*output_names) : 0;
  auto requirements_type__ = requirements_type ? _fbb.CreateVector<Halide::Serialize::Stmt>(*requirements_type) : 0;
  auto requirements__ = requirements ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*requirements) : 0;
  auto func_names_in_order__ = func_names_in_order ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*func_names_in_order) : 0;
  auto parameters__ = parameters ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Parameter>>(*parameters) : 0;
  auto external_parameters__ = external_parameters ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::ExternalParameter>>(*external_parameters) : 0;
  auto buffers__ = buffers ? _fbb.CreateVector<::flatbuffers::Offset<Halide::Serialize::Buffer>>(*buffers) : 0;
  return Halide::Serialize::CreatePipeline(
      _fbb,
      funcs__,
      output_names__,
      requirements_type__,
      requirements__,
      func_names_in_order__,
      parameters__,
      external_parameters__,
      buffers__);
}

inline bool VerifyStmt(::flatbuffers::Verifier &verifier, const void *obj, Stmt type) {
  switch (type) {
    case Stmt::NONE: {
      return true;
    }
    case Stmt::LetStmt: {
      auto ptr = reinterpret_cast<const Halide::Serialize::LetStmt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::AssertStmt: {
      auto ptr = reinterpret_cast<const Halide::Serialize::AssertStmt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::ProducerConsumer: {
      auto ptr = reinterpret_cast<const Halide::Serialize::ProducerConsumer *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::For: {
      auto ptr = reinterpret_cast<const Halide::Serialize::For *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Store: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Store *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Provide: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Provide *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Allocate: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Allocate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Free: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Free *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Realize: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Realize *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Block: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Block *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::IfThenElse: {
      auto ptr = reinterpret_cast<const Halide::Serialize::IfThenElse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Evaluate: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Evaluate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Prefetch: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Prefetch *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Acquire: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Acquire *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Fork: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Fork *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::Atomic: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Atomic *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::HoistedStorage: {
      auto ptr = reinterpret_cast<const Halide::Serialize::HoistedStorage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Stmt::UndefinedStmt: {
      auto ptr = reinterpret_cast<const Halide::Serialize::UndefinedStmt *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyStmtVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Stmt> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyStmt(
        verifier,  values->Get(i), types->GetEnum<Stmt>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyExpr(::flatbuffers::Verifier &verifier, const void *obj, Expr type) {
  switch (type) {
    case Expr::NONE: {
      return true;
    }
    case Expr::IntImm: {
      auto ptr = reinterpret_cast<const Halide::Serialize::IntImm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::UIntImm: {
      auto ptr = reinterpret_cast<const Halide::Serialize::UIntImm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::FloatImm: {
      auto ptr = reinterpret_cast<const Halide::Serialize::FloatImm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::StringImm: {
      auto ptr = reinterpret_cast<const Halide::Serialize::StringImm *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Cast: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Cast *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Reinterpret: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Reinterpret *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Add: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Add *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Sub: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Sub *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Mul: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Mul *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Div: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Div *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Mod: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Mod *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Min: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Min *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Max: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Max *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::EQ: {
      auto ptr = reinterpret_cast<const Halide::Serialize::EQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::NE: {
      auto ptr = reinterpret_cast<const Halide::Serialize::NE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::LT: {
      auto ptr = reinterpret_cast<const Halide::Serialize::LT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::LE: {
      auto ptr = reinterpret_cast<const Halide::Serialize::LE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::GT: {
      auto ptr = reinterpret_cast<const Halide::Serialize::GT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::GE: {
      auto ptr = reinterpret_cast<const Halide::Serialize::GE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::And: {
      auto ptr = reinterpret_cast<const Halide::Serialize::And *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Or: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Or *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Not: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Not *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Select: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Select *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Load: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Load *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Ramp: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Ramp *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Broadcast: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Broadcast *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Let: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Let *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Call: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Call *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Variable: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Variable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::Shuffle: {
      auto ptr = reinterpret_cast<const Halide::Serialize::Shuffle *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::VectorReduce: {
      auto ptr = reinterpret_cast<const Halide::Serialize::VectorReduce *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Expr::UndefinedExpr: {
      auto ptr = reinterpret_cast<const Halide::Serialize::UndefinedExpr *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyExprVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Expr> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyExpr(
        verifier,  values->Get(i), types->GetEnum<Expr>(i))) {
      return false;
    }
  }
  return true;
}

inline const Halide::Serialize::Pipeline *GetPipeline(const void *buf) {
  return ::flatbuffers::GetRoot<Halide::Serialize::Pipeline>(buf);
}

inline const Halide::Serialize::Pipeline *GetSizePrefixedPipeline(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Halide::Serialize::Pipeline>(buf);
}

inline const char *PipelineIdentifier() {
  return "HL17";
}

inline bool PipelineBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PipelineIdentifier());
}

inline bool SizePrefixedPipelineBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PipelineIdentifier(), true);
}

inline bool VerifyPipelineBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Halide::Serialize::Pipeline>(PipelineIdentifier());
}

inline bool VerifySizePrefixedPipelineBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Halide::Serialize::Pipeline>(PipelineIdentifier());
}

inline const char *PipelineExtension() {
  return "hlpipe";
}

inline void FinishPipelineBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Halide::Serialize::Pipeline> root) {
  fbb.Finish(root, PipelineIdentifier());
}

inline void FinishSizePrefixedPipelineBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Halide::Serialize::Pipeline> root) {
  fbb.FinishSizePrefixed(root, PipelineIdentifier());
}

}  // namespace Serialize
}  // namespace Halide

#endif  // FLATBUFFERS_GENERATED_HALIDEIR_HALIDE_SERIALIZE_H_
