<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{85D3DBB3-2E33-4CDD-8601-B73AA41A215F}</ProjectGuid>
  </PropertyGroup>
  <PropertyGroup>
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v110</PlatformToolset>
    <TargetExt>.lib</TargetExt>
    <TargetName>halide_initial_modules</TargetName>
    <OutDir>
    </OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <IntDir>$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <AdditionalDependencies>architecture.x86.stdlib.obj;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="..\..\src\runtime\android_io.cpp" />
    <ClInclude Include="..\..\src\runtime\copy_to_host_noop.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_allocator.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_clock.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_error_handler.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_io.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_math.cpp" />
    <ClInclude Include="..\..\src\runtime\posix_thread_pool.cpp" />
    <ClInclude Include="..\..\src\runtime\fake_thread_pool.cpp" />
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="..\..\src\runtime\runtime.x86_32.cpp">
      <LlName>x86</LlName>
      <ModName>x86_32</ModName>
      <Command>
        @echo on
        echo ... calling clang
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(Identity) -o tmp.ll
        echo ... adding ll stubs
        copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(LlName).ll %(ModName).initmod.ll
        echo ... calling llvm-as
        $(SolutionDir)..\..\llvm\build\bin\Release\llvm-as.exe %(ModName).initmod.ll -o %(ModName).initmod.bc
        echo ... calling bitcode2cpp
        $(TargetDir)bitcode2cpp.exe %(ModName) &lt; %(ModName).initmod.bc &gt; %(ModName).initmod.cpp
        echo ... compiling init mod
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -c %(ModName).initmod.cpp -o %(ModName).initmod.obj
        echo ... done
      </Command>
      <Outputs>%(ModName).initmod.obj</Outputs>
    </CustomBuild>
    <CustomBuild Include="..\..\src\runtime\runtime.x86_32_sse41.cpp">
      <LlName>x86_sse41</LlName>
      <ModName>x86_32_sse41</ModName>
      <Command>
        @echo on
        echo ... calling clang
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(Identity) -o tmp.ll
        echo ... adding ll stubs
        copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(LlName).ll %(ModName).initmod.ll
        echo ... calling llvm-as
        $(SolutionDir)..\..\llvm\build\bin\Release\llvm-as.exe %(ModName).initmod.ll -o %(ModName).initmod.bc
        echo ... calling bitcode2cpp
        $(TargetDir)bitcode2cpp.exe %(ModName) &lt; %(ModName).initmod.bc &gt; %(ModName).initmod.cpp
        echo ... compiling init mod
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -c %(ModName).initmod.cpp -o %(ModName).initmod.obj
        echo ... done
      </Command>
      <Outputs>%(ModName).initmod.obj</Outputs>
    </CustomBuild>
    <CustomBuild Include="..\..\src\runtime\runtime.x86_64.cpp">
      <LlName>x86</LlName>
      <ModName>x86_64</ModName>
      <Command>
        @echo on
        echo ... calling clang
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(Identity) -o tmp.ll
        echo ... adding ll stubs
        copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(LlName).ll %(ModName).initmod.ll
        echo ... calling llvm-as
        $(SolutionDir)..\..\llvm\build\bin\Release\llvm-as.exe %(ModName).initmod.ll -o %(ModName).initmod.bc
        echo ... calling bitcode2cpp
        $(TargetDir)bitcode2cpp.exe %(ModName) &lt; %(ModName).initmod.bc &gt; %(ModName).initmod.cpp
        echo ... compiling init mod
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -c %(ModName).initmod.cpp -o %(ModName).initmod.obj
        echo ... done
      </Command>
      <Outputs>%(ModName).initmod.obj</Outputs>
    </CustomBuild>
    <CustomBuild Include="..\..\src\runtime\runtime.x86_64_avx.cpp">
      <LlName>x86_avx</LlName>
      <ModName>x86_64_avx</ModName>
      <Command>
        @echo on
        echo ... calling clang
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(Identity) -o tmp.ll
        echo ... adding ll stubs
        copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(LlName).ll %(ModName).initmod.ll
        echo ... calling llvm-as
        $(SolutionDir)..\..\llvm\build\bin\Release\llvm-as.exe %(ModName).initmod.ll -o %(ModName).initmod.bc
        echo ... calling bitcode2cpp
        $(TargetDir)bitcode2cpp.exe %(ModName) &lt; %(ModName).initmod.bc &gt; %(ModName).initmod.cpp
        echo ... compiling init mod
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -c %(ModName).initmod.cpp -o %(ModName).initmod.obj
        echo ... done
      </Command>
      <Outputs>%(ModName).initmod.obj</Outputs>
    </CustomBuild>
    <CustomBuild Include="..\..\src\runtime\runtime.x86_64_sse41.cpp">
      <LlName>x86_sse41</LlName>
      <ModName>x86_64_sse41</ModName>
      <Command>
        @echo on
        echo ... calling clang
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(Identity) -o tmp.ll
        echo ... adding ll stubs
        copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(LlName).ll %(ModName).initmod.ll
        echo ... calling llvm-as
        $(SolutionDir)..\..\llvm\build\bin\Release\llvm-as.exe %(ModName).initmod.ll -o %(ModName).initmod.bc
        echo ... calling bitcode2cpp
        $(TargetDir)bitcode2cpp.exe %(ModName) &lt; %(ModName).initmod.bc &gt; %(ModName).initmod.cpp
        echo ... compiling init mod
        $(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -c %(ModName).initmod.cpp -o %(ModName).initmod.obj
        echo ... done
      </Command>
      <Outputs>%(ModName).initmod.obj</Outputs>
    </CustomBuild>
  </ItemGroup>
  <ItemDefinitionGroup>
    <CustomBuild>
      <Message>Compiling %(ModName) initial module to bitcode</Message>
    </CustomBuild>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <!--<Target Name="Build">
    <Message Text="Compiling %(InitMod.Identity)..." Importance="high"></Message>
    <Exec Command="$(SolutionDir)..\..\llvm\build\bin\Release\clang.exe -march=corei7-avx -D_LP64 -D_CRT_SECURE_NO_WARNINGS -emit-llvm -O3 -I $(SolutionDir)\pthread -S %(InitMod.Identity) -o tmp.ll" />
    <Exec Command="copy /b tmp.ll + $(SolutionDir)..\src\runtime\%(InitMod.LlName).ll %(InitMod.ModName).initmod.ll" />
  </Target>-->
</Project>