include(CMakeParseArguments)

include_directories("${CMAKE_BINARY_DIR}/tools")

# Detect if we need supress -Wunused-but-set-variable warning.  This warning
# might be emitted by gcc for the tutorials as they don't always use a result
# when showing a demonstration of a computation in C code.
check_cxx_compiler_flag("-Wno-unused-but-set-variable" SUPPORT_NO_UNUSED_BUT_SET_VARIABLE)

file(GLOB IMAGES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/images" "${CMAKE_CURRENT_SOURCE_DIR}/images/*.png")
file(MAKE_DIRECTORY "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/images")
foreach(FILE ${IMAGES})
  configure_file("${CMAKE_CURRENT_SOURCE_DIR}/images/${FILE}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/images/" COPYONLY)
endforeach()

function(add_tutorial source_file)
  set(options WITH_IMAGE_IO WITH_OPENMP)
  set(oneValueArgs )
  set(multiValueArgs SRCS )
  cmake_parse_arguments(args "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

  string(REPLACE ".cpp" "" name ${source_file})
  halide_project(${name} "tutorials" ${source_file})
  add_to_group(test_tutorials "${name}" EXECUTE
               WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  target_include_directories(${name} PRIVATE "${CMAKE_SOURCE_DIR}/tools")
  if (SUPPORT_NO_UNUSED_BUT_SET_VARIABLE)
    target_compile_options(${name} PRIVATE "-Wno-unused-but-set-variable")
  endif()
  if (${args_WITH_IMAGE_IO})
    halide_use_image_io(${name})
  endif()
  if (${args_WITH_OPENMP})
    if (NOT MSVC)
      if (OPENMP_FOUND)
        target_compile_options(${name} PRIVATE ${OpenMP_CXX_FLAGS})
        target_link_libraries(${name} PRIVATE ${OpenMP_CXX_FLAGS})
      else()
        # Compile anyway but supress warnings about unrecognised pragmas
        target_compile_options(${name} PRIVATE -Wno-unknown-pragmas)
      endif()
    else()
      message(STATUS "TODO: Implement OpenMP support for MSVC")
    endif()
  endif()
endfunction()

# Declare tutorials
add_tutorial(lesson_01_basics.cpp)
add_tutorial(lesson_02_input_image.cpp WITH_IMAGE_IO)
add_tutorial(lesson_03_debugging_1.cpp)
add_tutorial(lesson_04_debugging_2.cpp)
add_tutorial(lesson_05_scheduling_1.cpp)
add_tutorial(lesson_06_realizing_over_shifted_domains.cpp)
add_tutorial(lesson_07_multi_stage_pipelines.cpp WITH_IMAGE_IO)
add_tutorial(lesson_08_scheduling_2.cpp WITH_IMAGE_IO WITH_OPENMP)
add_tutorial(lesson_09_update_definitions.cpp WITH_IMAGE_IO WITH_OPENMP)
add_tutorial(lesson_11_cross_compilation.cpp)
add_tutorial(lesson_12_using_the_gpu.cpp WITH_IMAGE_IO)
add_tutorial(lesson_13_tuples.cpp)
add_tutorial(lesson_14_types.cpp)

option(BUILD_AOT_TUTORIAL "Build the ahead-of-time compilation tutorial" ON)
if (BUILD_AOT_TUTORIAL)
  # Tutorial 10 requires that we build generation code, then run it,
  # so we can build the final executable.
  add_tutorial(lesson_10_aot_compilation_generate.cpp)

  set(FILTER_H "lesson_10_halide.h")
  set(FILTER_LIB "lesson_10_halide${CMAKE_STATIC_LIBRARY_SUFFIX}")
  set(FILTER_DIR "${CMAKE_CURRENT_BINARY_DIR}")
  add_custom_command(OUTPUT "${FILTER_H}" "${FILTER_LIB}"
                     DEPENDS lesson_10_aot_compilation_generate
                     COMMAND lesson_10_aot_compilation_generate
                     WORKING_DIRECTORY "${FILTER_DIR}"
                     COMMENT "generating stuff in ${FILTER_DIR}" )
  add_custom_target(exec_lesson_10_aot_compilation_generate
                    DEPENDS "${FILTER_H}" "${FILTER_LIB}")

  # This will be linked with the code generated by
  # the generator (lesson_10_aot_compilation_generate)
  add_executable(lesson_10_aot_compilation_run
                 lesson_10_aot_compilation_run.cpp)
  add_dependencies(lesson_10_aot_compilation_run
                   exec_lesson_10_aot_compilation_generate)
  target_link_libraries(lesson_10_aot_compilation_run PRIVATE "${FILTER_DIR}/${FILTER_LIB}")
  target_include_directories(lesson_10_aot_compilation_run PRIVATE "${FILTER_DIR}")
  # Needed to find HalideBuffer.h
  target_include_directories(lesson_10_aot_compilation_run PRIVATE "${CMAKE_BINARY_DIR}/include")

  if (NOT WIN32)
    target_link_libraries(lesson_10_aot_compilation_run PRIVATE dl pthread)
  endif()

endif()
