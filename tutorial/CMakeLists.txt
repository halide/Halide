include(../HalideGenerator.cmake)

include_directories("${CMAKE_BINARY_DIR}/tools")
macro(use_libpng TARGET)
  target_compile_definitions(${TARGET} PRIVATE ${PNG_DEFINITIONS})
  target_include_directories(${TARGET} PRIVATE ${PNG_INCLUDE_DIRS})
  target_link_libraries(${TARGET} PRIVATE ${PNG_LIBRARIES})
endmacro()

# Detect if we need supress -Wunused-but-set-variable warning.  This warning
# might be emitted by gcc for the tutorials as they don't always use a result
# when showing a demonstration of a computation in C code.
check_cxx_compiler_flag("-Wno-unused-but-set-variable" SUPPORT_NO_UNUSED_BUT_SET_VARIABLE)

macro(add_tutorial source_file)
  string(REPLACE ".cpp" "" name ${source_file})
  halide_project(${name} "tutorials" ${source_file})
  target_include_directories(${name} PRIVATE "${CMAKE_SOURCE_DIR}/tools")
  if (SUPPORT_NO_UNUSED_BUT_SET_VARIABLE)
    target_compile_options(${name} PRIVATE "-Wno-unused-but-set-variable")
  endif()
endmacro()

macro(use_openmp TARGET)
  if (NOT MSVC)
    if (OPENMP_FOUND)
      target_compile_options(${TARGET} PRIVATE ${OpenMP_CXX_FLAGS})
      target_link_libraries(${TARGET} PRIVATE ${OpenMP_CXX_FLAGS})
    else()
      # Compile anyway but supress warnings about unrecognised pragmas
      target_compile_options(${TARGET} PRIVATE -Wno-unknown-pragmas)
    endif()
  else()
    message(STATUS "TODO: Implement OpenMP support for MSVC")
  endif()
endmacro()

# Declare tutorials
add_tutorial(lesson_01_basics.cpp)
add_tutorial(lesson_03_debugging_1.cpp)
add_tutorial(lesson_04_debugging_2.cpp)
add_tutorial(lesson_05_scheduling_1.cpp)
add_tutorial(lesson_06_realizing_over_shifted_domains.cpp)
add_tutorial(lesson_11_cross_compilation.cpp)
add_tutorial(lesson_13_tuples.cpp)
add_tutorial(lesson_14_types.cpp)
if (PNG_FOUND)
  add_tutorial(lesson_02_input_image.cpp)
  use_libpng(lesson_02_input_image)
  add_tutorial(lesson_07_multi_stage_pipelines.cpp)
  use_libpng(lesson_07_multi_stage_pipelines)
  add_tutorial(lesson_08_scheduling_2.cpp)
  use_libpng(lesson_08_scheduling_2)
  use_openmp(lesson_08_scheduling_2)
  add_tutorial(lesson_09_update_definitions.cpp)
  use_libpng(lesson_09_update_definitions)
  use_openmp(lesson_09_update_definitions)
  add_tutorial(lesson_12_using_the_gpu.cpp)
  use_libpng(lesson_12_using_the_gpu)
else()
  message(WARNING "Not building all tutorials due to missing libpng")
endif()

option(BUILD_AOT_TUTORIAL "Build the ahead-of-time compilation tutorial" ON)
if (BUILD_AOT_TUTORIAL)
  # Tutorial 10 requires that we build a generator then run it
  # so we can build the final executable
  add_tutorial(lesson_10_aot_compilation_generate.cpp)

  # This will be linked with the code generated by
  # the generator (lesson_10_aot_compilation_generate)
  add_executable(lesson_10_aot_compilation_run
                 lesson_10_aot_compilation_run.cpp)

  halide_add_generator_dependency(TARGET lesson_10_aot_compilation_run
    GENERATOR_TARGET lesson_10_aot_compilation_generate
    GENERATOR_NAME lesson_10_aot_compilation_generate
    GENERATED_FUNCTION "lesson_10_halide"
    GENERATOR_ARGS ""
  )

  # FIXME: Shouldn't halide_add_generator_dependency() add these??
  if (NOT WIN32)
    target_link_libraries(lesson_10_aot_compilation_run dl pthread)
  endif()

endif()
